<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview &lt;code>jsx.collections.Map&lt;/code> is an Interface class. Defines the methods for base map. A map is an object that maps keys to values.
<span class='linenumber'>  4</span> 	* @example
<span class='linenumber'>  5</span> 	&lt;pre>
<span class='linenumber'>  6</span> 		class MyMap implements Map
<span class='linenumber'>  7</span> 	&lt;/pre>
<span class='linenumber'>  8</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  9</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 10</span> 	* @class Map
<span class='linenumber'> 11</span> 	* @extends jsx.collections.Iterable
<span class='linenumber'> 12</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 13</span> 	</span><span class="NAME">jsx.collections.Map</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">this.initialize.apply</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 14</span> </span><span class="NAME">jsx.collections.Map.prototype</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Iterable</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 15</span> </span><span class="NAME">jsx.collections.Map.prototype.constructor</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Map</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 16</span> </span><span class="NAME">jsx.collections.Map.superclass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Iterable.prototype</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 17</span> </span><span class="WHIT">
<span class='linenumber'> 18</span> </span><span class="WHIT">	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 19</span> 	</span><span class="NAME">jsx.collections.Map.prototype.initialize</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 20</span> 
<span class='linenumber'> 21</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 22</span> 	* Clears all the keys and values in the map
<span class='linenumber'> 23</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 24</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.clear</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.clear is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 25</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 26</span> 	* Returns whether the map contains the specified key.
<span class='linenumber'> 27</span> 	* @param {Object} _key
<span class='linenumber'> 28</span> 	* @return {Boolean}
<span class='linenumber'> 29</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 30</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.containsKey</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_key</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.containsKey is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 31</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 32</span> 	* Returns whether the map contains the specified value.
<span class='linenumber'> 33</span> 	* @param {Object} _value
<span class='linenumber'> 34</span> 	* @return {Boolean}
<span class='linenumber'> 35</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 36</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.containsValue</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.containsValue is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 37</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 38</span> 	* Returns a set view of the mappings contained in this map.
<span class='linenumber'> 39</span> 	* @return {jsx.collection.Set}
<span class='linenumber'> 40</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 41</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.entrySet</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.entrySet is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 42</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 43</span> 	* Returns the value to which this map maps the specified key.
<span class='linenumber'> 44</span> 	* @param {Object} _key
<span class='linenumber'> 45</span> 	* @return {Object}
<span class='linenumber'> 46</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 47</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.get</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_key</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.get is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 48</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 49</span> 	* Returns whether if this map contains no key-value mappings.
<span class='linenumber'> 50</span> 	* @return {Boolean}
<span class='linenumber'> 51</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 52</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.isEmpty</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.isEmpty is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 53</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 54</span> 	* Returns a set view of the keys contained in this map.
<span class='linenumber'> 55</span> 	* @return {jsx.collection.Set}
<span class='linenumber'> 56</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 57</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.keySet</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.keySet is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 58</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 59</span> 	* Associates the specified value with the specified key in this map. Returns previous value associated with specified key,
<span class='linenumber'> 60</span> 	*  or null  if there was no mapping for key.
<span class='linenumber'> 61</span> 	* @param {Object} _key
<span class='linenumber'> 62</span> 	* @param {Object} _value
<span class='linenumber'> 63</span> 	* @return {Object}
<span class='linenumber'> 64</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 65</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.put</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_key</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.put is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 66</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 67</span> 	* Copies all of the mappings from the specified map to this map.
<span class='linenumber'> 68</span> 	* @param {jsx.collections.Map} _map
<span class='linenumber'> 69</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 70</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.putAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_map</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.putAll is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 71</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 72</span> 	* Removes and returns the mapping for this key from this map if it is present.
<span class='linenumber'> 73</span> 	* @param {Object} _key
<span class='linenumber'> 74</span> 	* @return {Object}
<span class='linenumber'> 75</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 76</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.remove</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_key</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.remove is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 77</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 78</span> 	* Returns the number of key-value mappings in this map.
<span class='linenumber'> 79</span> 	* @return {Number}
<span class='linenumber'> 80</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 81</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.size</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.size is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 82</span> </span><span class="WHIT">	</span><span class="COMM">/**
<span class='linenumber'> 83</span> 	* Returns a collection view of the values contained in this map.
<span class='linenumber'> 84</span> 	* @return {jsx.collection.Collection}
<span class='linenumber'> 85</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 86</span> </span><span class="WHIT">	</span><span class="NAME">jsx.collections.Map.prototype.values</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'Map.values is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 87</span> 
<span class='linenumber'> 88</span> 
<span class='linenumber'> 89</span> </span><span class="NAME">jsx.collections.Map.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 90</span> </span><span class="NAME">jsx.collections.Map.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections.Map"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 91</span> </span><span class="NAME">jsx.collections.Map.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections.Iterable"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 92</span> </span><span class="NAME">jsx.collections.Map.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.collections.Iterable"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 93</span> </span><span class="NAME">jsx.collections.Map.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 94</span> </span><span class="NAME">jsx.collections.Map.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 95</span> </span><span class="NAME">jsx.collections.Map.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Map.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 96</span> </span><span class="NAME">jsx.collections.Map.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">jsx.collections.Map.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 97</span> </span><span class="NAME">jsx.collections.Map.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Map.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 98</span> </span><span class="NAME">jsx.collections.Map.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 99</span> </span></pre></body></html>