<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview
<span class='linenumber'>  4</span> 	* @example
<span class='linenumber'>  5</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  6</span> 	</span><span class="COMM">/**
<span class='linenumber'>  7</span> 	* @class Thread
<span class='linenumber'>  8</span> 	* @constructor
<span class='linenumber'>  9</span> 	* @description This is not a true thread. This is just a cleaner API wrapping the global objects setTimeout and setInterval methods.
<span class='linenumber'> 10</span> 	* @param {Function} _block Block to execute.
<span class='linenumber'> 11</span> 	* @param {Object} _object Context object.
<span class='linenumber'> 12</span> 	* @param {Array} _args Array of parameters to pass into the block.
<span class='linenumber'> 13</span> 	* @param {Number} _milliseconds Specify in milliseconds when to execute. If the thread is a daemon thread, the milliseconds will indicate
<span class='linenumber'> 14</span> 	*  the intervals the block will execute. If the thread is not a daemon thread, the milliseconds will indicate the delay until the
<span class='linenumber'> 15</span> 	*  block will execute.
<span class='linenumber'> 16</span> 	* @param {String} _name Name of the Thread.
<span class='linenumber'> 17</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 18</span> 	</span><span class="NAME">jsx.lang.Thread</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">this.initialize.apply</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 19</span> 
<span class='linenumber'> 20</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 21</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.initialize</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_args</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_milliseconds</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_name</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 22</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 23</span> 		</span><span class="NAME">this.block</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 24</span> 		</span><span class="NAME">this.object</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 25</span> 		</span><span class="NAME">this.args</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_args</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 26</span> 		</span><span class="NAME">this.milliseconds</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_milliseconds</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 27</span> 		</span><span class="NAME">this.name</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_name</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 28</span> 
<span class='linenumber'> 29</span> 		</span><span class="NAME">this.id</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 30</span> 		</span><span class="NAME">this.daemon</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 31</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 32</span> 
<span class='linenumber'> 33</span> 	</span><span class="COMM">/**
<span class='linenumber'> 34</span> 	* Starts the jsx.lang.Thread.
<span class='linenumber'> 35</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 36</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.start</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 37</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 38</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this.milliseconds</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">this.milliseconds</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="NAME">this.milliseconds</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 39</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.daemon</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 40</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 41</span> 			</span><span class="COMM">// execute blocktion every milliseconds</span><span class="WHIT">
<span class='linenumber'> 42</span> 			</span><span class="NAME">this.id</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">setInterval</span><span class="PUNC">(</span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Closure</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">bind</span><span class="PUNC">(</span><span class="NAME">this.block</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.object</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.args</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.milliseconds</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 43</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 44</span> 		</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'> 45</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 46</span> 			</span><span class="COMM">// execute blocktion in milliseconds</span><span class="WHIT">
<span class='linenumber'> 47</span> 			</span><span class="NAME">this.id</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">setTimeout</span><span class="PUNC">(</span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Closure</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">bind</span><span class="PUNC">(</span><span class="NAME">this.block</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.object</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.args</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">)</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">this.milliseconds</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 48</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 49</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 50</span> 
<span class='linenumber'> 51</span> 	</span><span class="COMM">/**
<span class='linenumber'> 52</span> 	* Stops the jsx.lang.Thread.
<span class='linenumber'> 53</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 54</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.stop</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 55</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 56</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.daemon</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 57</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 58</span> 			</span><span class="NAME">clearInterval</span><span class="PUNC">(</span><span class="NAME">this.id</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 59</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 60</span> 		</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'> 61</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 62</span> 			</span><span class="NAME">clearTimeout</span><span class="PUNC">(</span><span class="NAME">this.id</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 63</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 64</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 65</span> 
<span class='linenumber'> 66</span> 	</span><span class="COMM">/**
<span class='linenumber'> 67</span> 	* Makes the Thread sleep for a number of milliseconds.
<span class='linenumber'> 68</span> 	* @param {Number} _milliseconds How long to sleep for.
<span class='linenumber'> 69</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 70</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.sleep</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_milliseconds</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 71</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 72</span> 		</span><span class="NAME">this.stop</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 73</span> 
<span class='linenumber'> 74</span> 		</span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Thread</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 75</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 76</span> 			</span><span class="NAME">this.start</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 77</span> 		</span><span class="PUNC">}</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_milliseconds</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">start</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 78</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 79</span> 
<span class='linenumber'> 80</span> 	</span><span class="COMM">/**
<span class='linenumber'> 81</span> 	* Returns the Thread ID.
<span class='linenumber'> 82</span> 	* @return {Number}
<span class='linenumber'> 83</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 84</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.getID</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 85</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 86</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.id</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 87</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 88</span> 
<span class='linenumber'> 89</span> 	</span><span class="COMM">/**
<span class='linenumber'> 90</span> 	* Returns the Thread Name.
<span class='linenumber'> 91</span> 	* @return {String}
<span class='linenumber'> 92</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 93</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 94</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 95</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.name</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 96</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 97</span> 
<span class='linenumber'> 98</span> 	</span><span class="COMM">/**
<span class='linenumber'> 99</span> 	* Set the Thread Name.
<span class='linenumber'>100</span> 	* @param {String} _name
<span class='linenumber'>101</span> 	* @return {Thread}
<span class='linenumber'>102</span> 	*/</span><span class="WHIT">
<span class='linenumber'>103</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.setName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_name</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>104</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>105</span> 		</span><span class="NAME">this.name</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_name</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>106</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>107</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>108</span> 
<span class='linenumber'>109</span> 	</span><span class="COMM">/**
<span class='linenumber'>110</span> 	* Returns whether the Thread is a Daemon jsx.lang.Thread.
<span class='linenumber'>111</span> 	* @return {Boolean}
<span class='linenumber'>112</span> 	*/</span><span class="WHIT">
<span class='linenumber'>113</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.isDaemon</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>114</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>115</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.daemon</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>116</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>117</span> 
<span class='linenumber'>118</span> 	</span><span class="COMM">/**
<span class='linenumber'>119</span> 	* Set whether the Thread should be a Daemon jsx.lang.Thread.
<span class='linenumber'>120</span> 	* @param {Boolean} _isDaemon
<span class='linenumber'>121</span> 	* @return {Thread}
<span class='linenumber'>122</span> 	*/</span><span class="WHIT">
<span class='linenumber'>123</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.setDaemon</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_isDaemon</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>124</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>125</span> 		</span><span class="NAME">this.daemon</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_isDaemon</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>126</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>127</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>128</span> 
<span class='linenumber'>129</span> 	</span><span class="COMM">/**
<span class='linenumber'>130</span> 	* Returns the String representation of the jsx.lang.Thread.
<span class='linenumber'>131</span> 	* @return {String}
<span class='linenumber'>132</span> 	*/</span><span class="WHIT">
<span class='linenumber'>133</span> 	</span><span class="NAME">jsx.lang.Thread.prototype.toString</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>134</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>135</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_tmp</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"Thread -> ID: "</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">this.getID</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>136</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.name</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="NAME">_tmp</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">" Name: "</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">this.name</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>137</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_tmp</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>138</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>139</span> 
<span class='linenumber'>140</span> 
<span class='linenumber'>141</span> </span><span class="NAME">jsx.lang.Thread.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.lang"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>142</span> </span><span class="NAME">jsx.lang.Thread.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.lang.Thread"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>143</span> </span><span class="NAME">jsx.lang.Thread.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>144</span> </span><span class="NAME">jsx.lang.Thread.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.lang.Closure"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>145</span> </span><span class="NAME">jsx.lang.Thread.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>146</span> </span><span class="NAME">jsx.lang.Thread.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>147</span> </span><span class="NAME">jsx.lang.Thread.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Thread.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>148</span> </span><span class="NAME">jsx.lang.Thread.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">jsx.lang.Thread.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>149</span> </span><span class="NAME">jsx.lang.Thread.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Thread.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>150</span> </span><span class="NAME">jsx.lang.Thread.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>151</span> </span></pre></body></html>