<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview &lt;code>jsx.collections.AbstractCollection&lt;/code> is an abstract class used as a base implementation for &lt;code>jsx.collections.Collection&lt;/code> classes.
<span class='linenumber'>  4</span> 	* @example
<span class='linenumber'>  5</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  6</span> 	</span><span class="COMM">/**
<span class='linenumber'>  7</span> 	* @class AbstractCollection
<span class='linenumber'>  8</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  9</span> 	</span><span class="NAME">jsx.collections.AbstractCollection</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">this.initialize.apply</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 10</span> 
<span class='linenumber'> 11</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 12</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.initialize</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 13</span> 
<span class='linenumber'> 14</span> 	</span><span class="COMM">/**
<span class='linenumber'> 15</span> 	* Iterate over the collection of elements.
<span class='linenumber'> 16</span> 	* @param {Function} _block The function to execute for every element in the collection during iteration.
<span class='linenumber'> 17</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 18</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.iterator</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'AbstractCollection.iterator is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 19</span> 
<span class='linenumber'> 20</span> 	</span><span class="COMM">/**
<span class='linenumber'> 21</span> 	* Add an element to the end of collection. Returns whether the element was added to the collection.
<span class='linenumber'> 22</span> 	* @param {Object} _object The element added to the collection
<span class='linenumber'> 23</span> 	* @return {Boolean}
<span class='linenumber'> 24</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 25</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.add</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'AbstractCollection.add is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 26</span> 
<span class='linenumber'> 27</span> 	</span><span class="COMM">/**
<span class='linenumber'> 28</span> 	* Removes the specified object from the collection. Return whether the object was removed.
<span class='linenumber'> 29</span> 	* @param {Object} _object
<span class='linenumber'> 30</span> 	* @return {Boolean}
<span class='linenumber'> 31</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 32</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.remove</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'AbstractCollection.remove is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 33</span> 
<span class='linenumber'> 34</span> 	</span><span class="COMM">/**
<span class='linenumber'> 35</span> 	* Returns the size of the collection.
<span class='linenumber'> 36</span> 	* @return {Number}
<span class='linenumber'> 37</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 38</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.size</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">'AbstractCollection.size is abstract'</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 39</span> 
<span class='linenumber'> 40</span> 	</span><span class="COMM">/**
<span class='linenumber'> 41</span> 	* Required by the jsx.collections.Enumerable mixin. Calls &lt;subclass>#iterator(_block) passing a {Object}value and {Number}index to the block.
<span class='linenumber'> 42</span> 	* @param {Function} _block. Parameters passed to the _block are &lt;value>Object and &lt;index>Number.
<span class='linenumber'> 43</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 44</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.each</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 45</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 46</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 47</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">index</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 48</span> 		</span><span class="KEYW">try</span><span class="WHIT">
<span class='linenumber'> 49</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 50</span> 			</span><span class="NAME">this.iterator</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 51</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 52</span> 				</span><span class="KEYW">try</span><span class="WHIT">
<span class='linenumber'> 53</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 54</span> 					</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">index</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 55</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 56</span> 				</span><span class="KEYW">catch</span><span class="PUNC">(</span><span class="NAME">e</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 57</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 58</span> 					</span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">e</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">e</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 59</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 60</span> 			</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 61</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 62</span> 		</span><span class="KEYW">catch</span><span class="PUNC">(</span><span class="NAME">e</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 63</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 64</span> 			</span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">e</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">e</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 65</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 66</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 67</span> 
<span class='linenumber'> 68</span> 	</span><span class="COMM">/**
<span class='linenumber'> 69</span> 	* Adds all the elements in the specified collecion to the end of the collection. Returns whether the current collection was modified.
<span class='linenumber'> 70</span> 	* @param {jsx.collections.Collection} _collection
<span class='linenumber'> 71</span> 	* @return {Boolean}
<span class='linenumber'> 72</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 73</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.addAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_collection</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 74</span>     </span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 75</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 76</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 77</span> 		</span><span class="NAME">_collection.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 78</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 79</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">me.add</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 80</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 81</span> 				</span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 82</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 83</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 84</span>     	</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 85</span>     </span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 86</span> 
<span class='linenumber'> 87</span> 	</span><span class="COMM">/**
<span class='linenumber'> 88</span> 	* Removes all elements in the collection.
<span class='linenumber'> 89</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 90</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.clear</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 91</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 92</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 93</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 94</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 95</span> 			</span><span class="NAME">me.remove</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 96</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 97</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 98</span> 
<span class='linenumber'> 99</span> 	</span><span class="COMM">/**
<span class='linenumber'>100</span> 	* Returns whether the specified object is contained in the collection.
<span class='linenumber'>101</span> 	* @param {Object} _object Parameter could be null. If there is a null element in the collection, true will be returned.
<span class='linenumber'>102</span> 	* @return {Boolean}
<span class='linenumber'>103</span> 	*/</span><span class="WHIT">
<span class='linenumber'>104</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.contains</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>105</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>106</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>107</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>108</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>109</span> 			</span><span class="COMM">// check for null</span><span class="WHIT">
<span class='linenumber'>110</span> 			</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>111</span> 			</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>112</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>113</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>114</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>115</span> 					</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>116</span> 					</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>117</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>118</span> 			</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>119</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>120</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>121</span> 		</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>122</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>123</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.include</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>124</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>125</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>126</span> 
<span class='linenumber'>127</span> 	</span><span class="COMM">/**
<span class='linenumber'>128</span> 	* Returns whether the elements in the specified collection exist in the collection.
<span class='linenumber'>129</span> 	* @param {jsx.collections.Collection}
<span class='linenumber'>130</span> 	* @return {Boolean}
<span class='linenumber'>131</span> 	*/</span><span class="WHIT">
<span class='linenumber'>132</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.containsAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_collection</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>133</span>     </span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>134</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>135</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>136</span> 		</span><span class="NAME">_collection.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>137</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>138</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">me.contains</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>139</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>140</span> 				</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>141</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>142</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>143</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>144</span>     	</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>145</span>     </span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>146</span> 
<span class='linenumber'>147</span> 	</span><span class="COMM">/**
<span class='linenumber'>148</span> 	* Returns whether the collection is empty.
<span class='linenumber'>149</span> 	* @return {Boolean}
<span class='linenumber'>150</span> 	*/</span><span class="WHIT">
<span class='linenumber'>151</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.isEmpty</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>152</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>153</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.size</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>154</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>155</span> 
<span class='linenumber'>156</span> 	</span><span class="COMM">/**
<span class='linenumber'>157</span> 	* Removes all the elements in the specified collection from the current collection. Returns whether the current collection was modified.
<span class='linenumber'>158</span> 	* @param {jsx.collections.Collection} _collection
<span class='linenumber'>159</span> 	* @return {Boolean}
<span class='linenumber'>160</span> 	*/</span><span class="WHIT">
<span class='linenumber'>161</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.removeAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_collection</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>162</span>     </span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>163</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>164</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>165</span> 		</span><span class="NAME">_collection.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>166</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>167</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">me.remove</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>168</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>169</span> 				</span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>170</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>171</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>172</span>     	</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>173</span>     </span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>174</span> 
<span class='linenumber'>175</span> 	</span><span class="COMM">/**
<span class='linenumber'>176</span> 	* Removes all elements in the current collection if they are not in the specified collection. Returns whether the current collection was modified.
<span class='linenumber'>177</span> 	* @param {Object} _collection
<span class='linenumber'>178</span> 	* @return {Boolean}
<span class='linenumber'>179</span> 	*/</span><span class="WHIT">
<span class='linenumber'>180</span>     </span><span class="NAME">jsx.collections.AbstractCollection.prototype.retainAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_collection</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>181</span>     </span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>182</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>183</span>     	</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>184</span> 		</span><span class="COMM">//TODO, not very elegant</span><span class="WHIT">
<span class='linenumber'>185</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">tmp</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>186</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>187</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>188</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_collection.contains</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>189</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>190</span> 				</span><span class="NAME">tmp</span><span class="PUNC">[</span><span class="NAME">tmp.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>191</span> 				</span><span class="NAME">modified</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>192</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>193</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>194</span> 
<span class='linenumber'>195</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">modified</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>196</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>197</span> 			</span><span class="KEYW">for</span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="NUMB">0</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">&lt;</span><span class="NAME">tmp.length</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>198</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>199</span> 				</span><span class="NAME">this.remove</span><span class="PUNC">(</span><span class="NAME">tmp</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>200</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>201</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>202</span> 
<span class='linenumber'>203</span>     	</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">modified</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>204</span>     </span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>205</span> 
<span class='linenumber'>206</span> 	</span><span class="COMM">/**
<span class='linenumber'>207</span> 	* Returns a String representation of a jsx.collections.Collection.
<span class='linenumber'>208</span> 	* @return {Stirng}
<span class='linenumber'>209</span> 	*/</span><span class="WHIT">
<span class='linenumber'>210</span> 	</span><span class="NAME">jsx.collections.AbstractCollection.prototype.toString</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>211</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>212</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>213</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">sb</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.StringBuffer</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>214</span> 		</span><span class="NAME">sb.append</span><span class="PUNC">(</span><span class="STRN">"["</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>215</span> 
<span class='linenumber'>216</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_index</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>217</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>218</span> 			</span><span class="NAME">sb.append</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>219</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_index</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">me.size</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">sb.append</span><span class="PUNC">(</span><span class="STRN">", "</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>220</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>221</span> 
<span class='linenumber'>222</span> 		</span><span class="NAME">sb.append</span><span class="PUNC">(</span><span class="STRN">"]"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>223</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">sb.toString</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>224</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>225</span> 
<span class='linenumber'>226</span> 
<span class='linenumber'>227</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.invoke</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.invoke</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>228</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.map</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.map</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>229</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.detect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.detect</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>230</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.echo</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.echo</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>231</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.zip</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.zip</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>232</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.max</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.max</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>233</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.toArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.toArray</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>234</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.min</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.min</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>235</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.convertToArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.convertToArray</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>236</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.$break</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>237</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.sortBy</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.sortBy</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>238</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.select</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.select</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>239</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.inject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.inject</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>240</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.find</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.find</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>241</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.collect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.collect</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>242</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.any</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.any</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>243</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.entries</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.entries</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>244</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.findAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.findAll</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>245</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.grep</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.grep</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>246</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.pluck</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.pluck</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>247</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.$continue</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>248</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.partition</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.partition</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>249</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.reject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.reject</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>250</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.all</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.all</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>251</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.member</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.member</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>252</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.include</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.include</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>253</span> 
<span class='linenumber'>254</span> </span><span class="NAME">jsx.collections.AbstractCollection.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>255</span> </span><span class="NAME">jsx.collections.AbstractCollection.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections.AbstractCollection"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>256</span> </span><span class="NAME">jsx.collections.AbstractCollection.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>257</span> </span><span class="NAME">jsx.collections.AbstractCollection.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.lang.StringBuffer"</span><span class="PUNC">,</span><span class="STRN">"jsx.collections.Enumerable"</span><span class="PUNC">,</span><span class="STRN">"jsx.collections.Collection"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>258</span> </span><span class="NAME">jsx.collections.AbstractCollection.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.collections.Collection"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>259</span> </span><span class="NAME">jsx.collections.AbstractCollection.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.collections.Enumerable"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>260</span> </span><span class="NAME">jsx.collections.AbstractCollection.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.AbstractCollection.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>261</span> </span><span class="NAME">jsx.collections.AbstractCollection.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">jsx.collections.AbstractCollection.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>262</span> </span><span class="NAME">jsx.collections.AbstractCollection.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.AbstractCollection.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>263</span> </span><span class="NAME">jsx.collections.AbstractCollection.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>264</span> </span></pre></body></html>