<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview
<span class='linenumber'>  4</span> 	* @example
<span class='linenumber'>  5</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  6</span> 
<span class='linenumber'>  7</span> 	</span><span class="COMM">/**
<span class='linenumber'>  8</span> 	* Largest number that is less than infinity.
<span class='linenumber'>  9</span> 	* @name MAX_VALUE
<span class='linenumber'> 10</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 11</span> 	</span><span class="NAME">Number._$MAX_VALUE$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 12</span> 	</span><span class="COMM">/**
<span class='linenumber'> 13</span> 	* Smallest number that is greater than negative infinity.
<span class='linenumber'> 14</span> 	* @name MIN_VALUE
<span class='linenumber'> 15</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 16</span> 	</span><span class="NAME">Number._$MIN_VALUE$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 17</span> 	</span><span class="COMM">/**
<span class='linenumber'> 18</span> 	* Not a number.
<span class='linenumber'> 19</span> 	* @name NaN
<span class='linenumber'> 20</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 21</span> 	</span><span class="NAME">Number._$NaN$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 22</span> 	</span><span class="COMM">/**
<span class='linenumber'> 23</span> 	* Out of range negative number.
<span class='linenumber'> 24</span> 	* @name NEGATIVE_INFINITY
<span class='linenumber'> 25</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 26</span> 	</span><span class="NAME">Number._$NEGATIVE_INFINITY$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 27</span> 	</span><span class="COMM">/**
<span class='linenumber'> 28</span> 	* Out of range positive number.
<span class='linenumber'> 29</span> 	* @name POSITIVE_INFINITY
<span class='linenumber'> 30</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 31</span> 	</span><span class="NAME">Number._$POSITIVE_INFINITY$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 32</span> 	</span><span class="COMM">/**
<span class='linenumber'> 33</span> 	* Out of range number.
<span class='linenumber'> 34</span> 	* @name INFINITY
<span class='linenumber'> 35</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 36</span> 	</span><span class="NAME">Number.INFINITY</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">Infinity</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 37</span> 
<span class='linenumber'> 38</span> 	</span><span class="COMM">/**
<span class='linenumber'> 39</span> 	* Round a Number to the specified number of decimals.
<span class='linenumber'> 40</span> 	* @name toFixed
<span class='linenumber'> 41</span> 	* @function
<span class='linenumber'> 42</span> 	* @memberOf Number
<span class='linenumber'> 43</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 44</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 45</span> 	</span><span class="NAME">Number.prototype._$toFixed$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 46</span> 	</span><span class="COMM">/**
<span class='linenumber'> 47</span> 	* Convert the value of the object into an exponential notation.
<span class='linenumber'> 48</span> 	* @name toExponential
<span class='linenumber'> 49</span> 	* @function
<span class='linenumber'> 50</span> 	* @memberOf Number
<span class='linenumber'> 51</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 52</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 53</span> 	</span><span class="NAME">Number.prototype._$toExponential$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 54</span> 	</span><span class="COMM">/**
<span class='linenumber'> 55</span> 	* Converts the value of the object into an exponential notation if it has more digits than specified.
<span class='linenumber'> 56</span> 	* @name toPrecision
<span class='linenumber'> 57</span> 	* @function
<span class='linenumber'> 58</span> 	* @memberOf Number
<span class='linenumber'> 59</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 60</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 61</span> 	</span><span class="NAME">Number.prototype._$toPrecision$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 62</span> 
<span class='linenumber'> 63</span> 	</span><span class="COMM">/**
<span class='linenumber'> 64</span> 	* Calls parseFloat native on the global object.
<span class='linenumber'> 65</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 66</span> 	</span><span class="NAME">Number.parseFloat</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.parseFloat</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 67</span> 	</span><span class="COMM">/**
<span class='linenumber'> 68</span> 	* Calls parseInt native on the global object.
<span class='linenumber'> 69</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 70</span> 	</span><span class="NAME">Number.parseInt</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.parseInt</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 71</span> 	</span><span class="COMM">/**
<span class='linenumber'> 72</span> 	* Calls isFinite native on the global object.
<span class='linenumber'> 73</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 74</span> 	</span><span class="NAME">Number.isFinite</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.isFinite</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 75</span> 	</span><span class="COMM">/**
<span class='linenumber'> 76</span> 	* Calls isNaN native on the global object.
<span class='linenumber'> 77</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 78</span> 	</span><span class="NAME">Number.isNaN</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.isNaN</span><span class="PUNC">(</span><span class="NAME">_number</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 79</span> 
<span class='linenumber'> 80</span> 	</span><span class="COMM">/**
<span class='linenumber'> 81</span> 	* Executes the block the same number of times the number represents. Parameter to the block is an number.
<span class='linenumber'> 82</span> 	* @param {Function} _block
<span class='linenumber'> 83</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 84</span> 	</span><span class="NAME">Number.prototype.times</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 85</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 86</span> 		</span><span class="KEYW">for</span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="NUMB">0</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">&lt;</span><span class="KEYW">this</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 87</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 88</span> 			</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">i</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 89</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 90</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 91</span> 
<span class='linenumber'> 92</span> 	</span><span class="COMM">/**
<span class='linenumber'> 93</span> 	* Executes the block the number of times upto the other number. Parameter to the block is an number.
<span class='linenumber'> 94</span> 	* @param {Number} _other
<span class='linenumber'> 95</span> 	* @param {Function} _block
<span class='linenumber'> 96</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 97</span> 	</span><span class="NAME">Number.prototype.upto</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 98</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 99</span> 		</span><span class="KEYW">for</span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="KEYW">this</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">&lt;=</span><span class="NAME">_other</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>100</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>101</span> 			</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">i</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>102</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>103</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>104</span> 
<span class='linenumber'>105</span> 	</span><span class="COMM">/**
<span class='linenumber'>106</span> 	* Executes the block the number of times downto the other number. Parameter to the block is an number.
<span class='linenumber'>107</span> 	* @param {Number} _other
<span class='linenumber'>108</span> 	* @param {Function} _block
<span class='linenumber'>109</span> 	*/</span><span class="WHIT">
<span class='linenumber'>110</span> 	</span><span class="NAME">Number.prototype.downto</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>111</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>112</span> 		</span><span class="KEYW">for</span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="KEYW">this</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">>=</span><span class="NAME">_other</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">--</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>113</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>114</span> 			</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">i</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>115</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>116</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>117</span> 
<span class='linenumber'>118</span> 	</span><span class="COMM">/**
<span class='linenumber'>119</span> 	* Executes the block. Step using the other number. Parameter to the block is an number.
<span class='linenumber'>120</span> 	* @param {Number} _other
<span class='linenumber'>121</span> 	* @param {Function} _block
<span class='linenumber'>122</span> 	*/</span><span class="WHIT">
<span class='linenumber'>123</span> 	</span><span class="NAME">Number.prototype.towards</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>124</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>125</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">step</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.compare</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>126</span> 		</span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="KEYW">this</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">!==</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">-</span><span class="NAME">step</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="NAME">i</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">step</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>127</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>128</span> 			</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">i</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>129</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>130</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>131</span> 
<span class='linenumber'>132</span> 	</span><span class="COMM">/**
<span class='linenumber'>133</span> 	* Returns the number incremented by 1.
<span class='linenumber'>134</span> 	* @return {Number}
<span class='linenumber'>135</span> 	*/</span><span class="WHIT">
<span class='linenumber'>136</span> 	</span><span class="NAME">Number.prototype.succ</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>137</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>138</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>139</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>140</span> 
<span class='linenumber'>141</span> 	</span><span class="COMM">/**
<span class='linenumber'>142</span> 	* Returns the number decremented by 1.
<span class='linenumber'>143</span> 	* @return {Number}
<span class='linenumber'>144</span> 	*/</span><span class="WHIT">
<span class='linenumber'>145</span> 	</span><span class="NAME">Number.prototype.pred</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>146</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>147</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>148</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>149</span> 
<span class='linenumber'>150</span> 	</span><span class="COMM">/**
<span class='linenumber'>151</span> 	* Returns the character code this number represents.
<span class='linenumber'>152</span> 	* @return {Number}
<span class='linenumber'>153</span> 	*/</span><span class="WHIT">
<span class='linenumber'>154</span> 	</span><span class="NAME">Number.prototype.toChar</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>155</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>156</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">String.fromCharCode</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>157</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>158</span> 
<span class='linenumber'>159</span> 	</span><span class="COMM">/**
<span class='linenumber'>160</span> 	* Compares the number against the other number. Returns -1, 0, 1.
<span class='linenumber'>161</span> 	* @param {Number} _other
<span class='linenumber'>162</span> 	* @return {Number}
<span class='linenumber'>163</span> 	*/</span><span class="WHIT">
<span class='linenumber'>164</span> 	</span><span class="NAME">Number.prototype.compare</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>165</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>166</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">_other</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>167</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="WHIT"> </span><span class="PUNC">></span><span class="WHIT"> </span><span class="NAME">_other</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>168</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>169</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>170</span> 
<span class='linenumber'>171</span> 	</span><span class="COMM">/**
<span class='linenumber'>172</span> 	* Returns a new array of numbers from the current number to the specified number.
<span class='linenumber'>173</span> 	* @param {Number} _other Inclusive
<span class='linenumber'>174</span> 	* @return {Array}
<span class='linenumber'>175</span> 	*/</span><span class="WHIT">
<span class='linenumber'>176</span> 	</span><span class="NAME">Number.prototype.toArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>177</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>178</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">numbers</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>179</span> 		</span><span class="NAME">this.upto</span><span class="PUNC">(</span><span class="NAME">_other</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">numbers</span><span class="PUNC">[</span><span class="NAME">numbers.length</span><span class="PUNC">]</span><span class="PUNC">=</span><span class="NAME">_value</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>180</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">numbers</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>181</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>182</span> 
<span class='linenumber'>183</span> 	</span><span class="COMM">/**
<span class='linenumber'>184</span> 	* Returns whether this object is equal to the specified _object.
<span class='linenumber'>185</span> 	* @param {Object} _object
<span class='linenumber'>186</span> 	* @return {Boolean}
<span class='linenumber'>187</span> 	*/</span><span class="WHIT">
<span class='linenumber'>188</span> 	</span><span class="NAME">Number.prototype.equals</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>189</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>190</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="WHIT"> </span><span class="PUNC">===</span><span class="WHIT"> </span><span class="NAME">_object</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>191</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>192</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>193</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>194</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">this.getClass</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">isInstance</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>195</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>196</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>197</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>198</span> 
<span class='linenumber'>199</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.toString</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">equals</span><span class="PUNC">(</span><span class="NAME">_object.toString</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>200</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>201</span> 
<span class='linenumber'>202</span> 
<span class='linenumber'>203</span> </span><span class="NAME">Number.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>204</span> </span><span class="NAME">Number.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"Number"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>205</span> </span><span class="NAME">Number.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>206</span> </span><span class="NAME">Number.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>207</span> </span><span class="NAME">Number.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>208</span> </span><span class="NAME">Number.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>209</span> </span><span class="NAME">Number.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">Number.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>210</span> </span><span class="NAME">Number.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">Number.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>211</span> </span><span class="NAME">Number.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">Number.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>212</span> </span><span class="NAME">Number.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>213</span> </span></pre></body></html>