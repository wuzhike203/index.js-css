<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview String is one of the core classes to native JavaScript. Here, String mixes in the jsx.collections.Enumerable class
<span class='linenumber'>  4</span> 	*  which gives String a lot more functionalilty. See jsx.collections.Enumerable to see all the enumerable methods on String
<span class='linenumber'>  5</span> 	* @example
<span class='linenumber'>  6</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  7</span> 
<span class='linenumber'>  8</span> 	</span><span class="COMM">/**
<span class='linenumber'>  9</span> 	* Returns the number of characters in a string.
<span class='linenumber'> 10</span> 	* @name length
<span class='linenumber'> 11</span> 	* @type {Number}
<span class='linenumber'> 12</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 13</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 14</span> 	</span><span class="NAME">String.prototype._$length$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"don't use me, used for reflection."</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 15</span> 	</span><span class="COMM">/**
<span class='linenumber'> 16</span> 	* Takes the specified Unicode values and returns a string. String.fromCharCode is
<span class='linenumber'> 17</span> 	*  a class method of the String class.
<span class='linenumber'> 18</span> 	* @name String.fromCharCode
<span class='linenumber'> 19</span> 	* @param _numX  String.fromCharCode(numX,numX,...,numX) allowed.
<span class='linenumber'> 20</span> 	* @return {String}
<span class='linenumber'> 21</span> 	* @function
<span class='linenumber'> 22</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 23</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 24</span> 	</span><span class="NAME">String._$fromCharCode$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">n</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">n</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">n</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">n</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 25</span> 
<span class='linenumber'> 26</span> 	</span><span class="COMM">/**
<span class='linenumber'> 27</span> 	* Returns the character at a specified position.
<span class='linenumber'> 28</span> 	* @name charAt
<span class='linenumber'> 29</span> 	* @param {Number} _index
<span class='linenumber'> 30</span> 	* @return {String}
<span class='linenumber'> 31</span> 	* @function
<span class='linenumber'> 32</span> 	* @memberOf String
<span class='linenumber'> 33</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 34</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 35</span> 	</span><span class="NAME">String.prototype._$charAt$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_index</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 36</span> 	</span><span class="COMM">/**
<span class='linenumber'> 37</span> 	* Returns the Unicode of the character at a specified position.
<span class='linenumber'> 38</span> 	* @name charCodeAt
<span class='linenumber'> 39</span> 	* @param {Number} _index
<span class='linenumber'> 40</span> 	* @return {Number}
<span class='linenumber'> 41</span> 	* @function
<span class='linenumber'> 42</span> 	* @memberOf String
<span class='linenumber'> 43</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 44</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 45</span> 	</span><span class="NAME">String.prototype._$charCodeAt$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_index</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 46</span> 	</span><span class="COMM">/**
<span class='linenumber'> 47</span> 	* Joins two or more strings.
<span class='linenumber'> 48</span> 	* @name concat
<span class='linenumber'> 49</span> 	* @param {String} _string. String#concat(stringX,stringX,...,stringX) allowed.
<span class='linenumber'> 50</span> 	* @function
<span class='linenumber'> 51</span> 	* @memberOf String
<span class='linenumber'> 52</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 53</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 54</span> 	</span><span class="NAME">String.prototype._$concat$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">n</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">n</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 55</span> 	</span><span class="COMM">/**
<span class='linenumber'> 56</span> 	* Returns the position of the first occurrence of a specified string value in a string.
<span class='linenumber'> 57</span> 	* @name indexOf
<span class='linenumber'> 58</span> 	* @param {String} _string Specifies a string value to search for.
<span class='linenumber'> 59</span> 	* @param {Number} [_start] Specifies where to start the search.
<span class='linenumber'> 60</span> 	* @return {Number} This method returns -1 if the string value to search for never occurs.
<span class='linenumber'> 61</span> 	* @function
<span class='linenumber'> 62</span> 	* @memberOf String
<span class='linenumber'> 63</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 64</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 65</span> 	</span><span class="NAME">String.prototype._$indexOf$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_start</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 66</span> 	</span><span class="COMM">/**
<span class='linenumber'> 67</span> 	* Returns the position of the last occurrence of a specified string value, searching backwards from the specified position in a string.
<span class='linenumber'> 68</span> 	* @name lastIndexOf
<span class='linenumber'> 69</span> 	* @param {String} _string Specifies a string value to search for.
<span class='linenumber'> 70</span> 	* @param {Number} [_start] Specifies where to start the search.
<span class='linenumber'> 71</span> 	* @return {Number} This method returns -1 if the string value to search for never occurs.
<span class='linenumber'> 72</span> 	* @function
<span class='linenumber'> 73</span> 	* @memberOf String
<span class='linenumber'> 74</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 75</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 76</span> 	</span><span class="NAME">String.prototype._$lastIndexOf$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_start</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 77</span> 	</span><span class="COMM">/**
<span class='linenumber'> 78</span> 	* Searches for a specified value in a string.
<span class='linenumber'> 79</span> 	* @name match
<span class='linenumber'> 80</span> 	* @param {String} _regexp Could be /'string'/ or new RegExp("string").
<span class='linenumber'> 81</span> 	* @return {String}
<span class='linenumber'> 82</span> 	* @function
<span class='linenumber'> 83</span> 	* @memberOf String
<span class='linenumber'> 84</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 85</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 86</span> 	</span><span class="NAME">String.prototype._$match$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_regexp</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 87</span> 	</span><span class="COMM">/**
<span class='linenumber'> 88</span> 	* Replaces some characters with some other characters in a string.
<span class='linenumber'> 89</span> 	* @name replace
<span class='linenumber'> 90</span> 	* @param {String} _regexp Could be /'string'/ or new RegExp("string").
<span class='linenumber'> 91</span> 	* @param {String} _replacement
<span class='linenumber'> 92</span> 	* @function
<span class='linenumber'> 93</span> 	* @memberOf String
<span class='linenumber'> 94</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 95</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 96</span> 	</span><span class="NAME">String.prototype._$replace$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_regexp</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_replacement</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 97</span> 	</span><span class="COMM">/**
<span class='linenumber'> 98</span> 	* Searches a string for a specified value. Returns the position of the specified value in the string. If no match was found it returns -1.
<span class='linenumber'> 99</span> 	* @name search
<span class='linenumber'>100</span> 	* @param {String} _regexp Could be /'string'/ or new RegExp("string").
<span class='linenumber'>101</span> 	* @return {Number}
<span class='linenumber'>102</span> 	* @function
<span class='linenumber'>103</span> 	* @memberOf String
<span class='linenumber'>104</span> 	*/</span><span class="WHIT">
<span class='linenumber'>105</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>106</span> 	</span><span class="NAME">String.prototype._$search$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_regexp</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>107</span> 	</span><span class="COMM">/**
<span class='linenumber'>108</span> 	* Extracts a part of a string and returns the extracted part in a new string.
<span class='linenumber'>109</span> 	* @name slice
<span class='linenumber'>110</span> 	* @param {Number} _start Specify where to start the selection.
<span class='linenumber'>111</span> 	* @param {Number} _end Specify where to end the selection.
<span class='linenumber'>112</span> 	* @return {String}
<span class='linenumber'>113</span> 	* @function
<span class='linenumber'>114</span> 	* @memberOf String
<span class='linenumber'>115</span> 	*/</span><span class="WHIT">
<span class='linenumber'>116</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>117</span> 	</span><span class="NAME">String.prototype._$slice$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_start</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_end</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>118</span> 	</span><span class="COMM">/**
<span class='linenumber'>119</span> 	* Splits a string into an array of strings.
<span class='linenumber'>120</span> 	* @name split
<span class='linenumber'>121</span> 	* @param {String} _delimiter Specifies the character, regular expression, or substring that is used to determine where to split the string.
<span class='linenumber'>122</span> 	*  Could be /'string'/ or new RegExp("string").
<span class='linenumber'>123</span> 	* @param {Number} [_limit] Specify how many times split should occur. Must be a numeric value.
<span class='linenumber'>124</span> 	* @return {Array}
<span class='linenumber'>125</span> 	* @function
<span class='linenumber'>126</span> 	* @memberOf String
<span class='linenumber'>127</span> 	*/</span><span class="WHIT">
<span class='linenumber'>128</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>129</span> 	</span><span class="NAME">String.prototype._$split$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_delimiter</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_limit</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>130</span> 	</span><span class="COMM">/**
<span class='linenumber'>131</span> 	* Extracts a specified number of characters in a string, from a start index.
<span class='linenumber'>132</span> 	* @name substr
<span class='linenumber'>133</span> 	* @param {Number} _start Where to start the extraction.
<span class='linenumber'>134</span> 	* @param {Number} [_length] How many characters to extract.
<span class='linenumber'>135</span> 	* @return {String}
<span class='linenumber'>136</span> 	* @function
<span class='linenumber'>137</span> 	* @memberOf String
<span class='linenumber'>138</span> 	*/</span><span class="WHIT">
<span class='linenumber'>139</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>140</span> 	</span><span class="NAME">String.prototype._$substr$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_start</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_length</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>141</span> 	</span><span class="COMM">/**
<span class='linenumber'>142</span> 	* Extracts the characters in a string between two specified indices.
<span class='linenumber'>143</span> 	* @name substring
<span class='linenumber'>144</span> 	* @param {Number} _from Where to start the extraction.
<span class='linenumber'>145</span> 	* @param {Number} [_to] Where to end the extraction.
<span class='linenumber'>146</span> 	* @return {String}
<span class='linenumber'>147</span> 	* @function
<span class='linenumber'>148</span> 	* @memberOf String
<span class='linenumber'>149</span> 	*/</span><span class="WHIT">
<span class='linenumber'>150</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>151</span> 	</span><span class="NAME">String.prototype._$substring$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_from</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_to</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>152</span> 	</span><span class="COMM">/**
<span class='linenumber'>153</span> 	* Displays a string in lowercase letters.
<span class='linenumber'>154</span> 	* @name toLowerCase
<span class='linenumber'>155</span> 	* @function
<span class='linenumber'>156</span> 	* @memberOf String
<span class='linenumber'>157</span> 	*/</span><span class="WHIT">
<span class='linenumber'>158</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>159</span> 	</span><span class="NAME">String.prototype._$toLowerCase$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>160</span> 	</span><span class="COMM">/**
<span class='linenumber'>161</span> 	* Displays a string in uppercase letters.
<span class='linenumber'>162</span> 	* @name toUpperCase
<span class='linenumber'>163</span> 	* @function
<span class='linenumber'>164</span> 	* @memberOf String
<span class='linenumber'>165</span> 	*/</span><span class="WHIT">
<span class='linenumber'>166</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'>167</span> 	</span><span class="NAME">String.prototype._$toUpperCase$_</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="STRN">"don't call me, used for reflection."</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>168</span> 
<span class='linenumber'>169</span> 	</span><span class="COMM">/**
<span class='linenumber'>170</span> 	* Returns 0123456789.
<span class='linenumber'>171</span> 	*/</span><span class="WHIT">
<span class='linenumber'>172</span> 	</span><span class="NAME">String.DIGIT</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">'0123456789'</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>173</span> 	</span><span class="COMM">/**
<span class='linenumber'>174</span> 	* Returns ABCDEFGHIJKLMNOPQRSTUVWXYZ.
<span class='linenumber'>175</span> 	*/</span><span class="WHIT">
<span class='linenumber'>176</span> 	</span><span class="NAME">String.ALPHA_UPPER_CASE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>177</span> 	</span><span class="COMM">/**
<span class='linenumber'>178</span> 	* Returns abcdefghijklmnopqrstuvwxyz.
<span class='linenumber'>179</span> 	*/</span><span class="WHIT">
<span class='linenumber'>180</span> 	</span><span class="NAME">String.ALPHA_LOWER_CASE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">'abcdefghijklmnopqrstuvwxyz'</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>181</span> 	</span><span class="COMM">/**
<span class='linenumber'>182</span> 	* Returns ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.
<span class='linenumber'>183</span> 	*/</span><span class="WHIT">
<span class='linenumber'>184</span> 	</span><span class="NAME">String.ALPHA</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>185</span> 	</span><span class="COMM">/**
<span class='linenumber'>186</span> 	* Returns 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.
<span class='linenumber'>187</span> 	*/</span><span class="WHIT">
<span class='linenumber'>188</span> 	</span><span class="NAME">String.ALPHA_NUMERIC</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>189</span> 
<span class='linenumber'>190</span> 	</span><span class="COMM">/**
<span class='linenumber'>191</span> 	* Calls encodeURI native on the global object.
<span class='linenumber'>192</span> 	*/</span><span class="WHIT">
<span class='linenumber'>193</span> 	</span><span class="NAME">String.prototype.encodeURI</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.encodeURI</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>194</span> 	</span><span class="COMM">/**
<span class='linenumber'>195</span> 	* Calls encodeURIComponent native on the global object.
<span class='linenumber'>196</span> 	*/</span><span class="WHIT">
<span class='linenumber'>197</span> 	</span><span class="NAME">String.prototype.encodeURIComponent</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.encodeURIComponent</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>198</span> 	</span><span class="COMM">/**
<span class='linenumber'>199</span> 	* Calls decodeURI native on the global object.
<span class='linenumber'>200</span> 	*/</span><span class="WHIT">
<span class='linenumber'>201</span> 	</span><span class="NAME">String.prototype.decodeURI</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.decodeURI</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>202</span> 	</span><span class="COMM">/**
<span class='linenumber'>203</span> 	* Calls decodeURIComponent native on the global object.
<span class='linenumber'>204</span> 	*/</span><span class="WHIT">
<span class='linenumber'>205</span> 	</span><span class="NAME">String.prototype.decodeURIComponent</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.decodeURIComponent</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>206</span> 	</span><span class="COMM">/**
<span class='linenumber'>207</span> 	* Calls escape native on the global object.
<span class='linenumber'>208</span> 	*/</span><span class="WHIT">
<span class='linenumber'>209</span> 	</span><span class="NAME">String.prototype.escape</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.escape</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>210</span> 	</span><span class="COMM">/**
<span class='linenumber'>211</span> 	* Calls unescape native on the global object.
<span class='linenumber'>212</span> 	*/</span><span class="WHIT">
<span class='linenumber'>213</span> 	</span><span class="NAME">String.prototype.unescape</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">$GLOBAL_OBJECT.unescape</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>214</span> 
<span class='linenumber'>215</span> 	</span><span class="COMM">/**
<span class='linenumber'>216</span> 	* Required by the jsx.collections.Enumerable mixin. Calls String#iterator(_delimiter, _block) passing a
<span class='linenumber'>217</span> 	*  {Object}value and {Number}index to the block.
<span class='linenumber'>218</span> 	* @param {String} _delimiter Specifies the character, regular expression, or substring that is used to determine where to split the string.
<span class='linenumber'>219</span> 	* @param {Function} _block. Parameters passed to the _block are {Object}array[index] and the {Number}index.
<span class='linenumber'>220</span> 	*/</span><span class="WHIT">
<span class='linenumber'>221</span> 	</span><span class="NAME">String.prototype.each</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_delimiter</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>222</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>223</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>224</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">index</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>225</span> 		</span><span class="KEYW">try</span><span class="WHIT">
<span class='linenumber'>226</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>227</span> 			</span><span class="NAME">this.iterator</span><span class="PUNC">(</span><span class="NAME">_delimiter</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>228</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>229</span> 				</span><span class="KEYW">try</span><span class="WHIT">
<span class='linenumber'>230</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>231</span> 					</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">index</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>232</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>233</span> 				</span><span class="KEYW">catch</span><span class="PUNC">(</span><span class="NAME">e</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>234</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>235</span> 					</span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">e</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">e</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>236</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>237</span> 			</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>238</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>239</span> 		</span><span class="KEYW">catch</span><span class="PUNC">(</span><span class="NAME">e</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>240</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>241</span> 			</span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">e</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">e</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>242</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>243</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>244</span> 
<span class='linenumber'>245</span> 	</span><span class="COMM">/**
<span class='linenumber'>246</span> 	* Iterates through the String array created by String#split, executing the _block and passing a value from String.array[index] as its parameter. Used by String#each(_block).
<span class='linenumber'>247</span> 	* @param {Function} _delimiter
<span class='linenumber'>248</span> 	* @param {Function} _block
<span class='linenumber'>249</span> 	*/</span><span class="WHIT">
<span class='linenumber'>250</span> 	</span><span class="NAME">String.prototype.iterator</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_delimiter</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>251</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>252</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_parts</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.split</span><span class="PUNC">(</span><span class="NAME">_delimiter</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>253</span> 		</span><span class="KEYW">for</span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="NUMB">0</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">&lt;</span><span class="NAME">_parts.length</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>254</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>255</span> 			</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_parts</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>256</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>257</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>258</span> 
<span class='linenumber'>259</span> 	</span><span class="COMM">/**
<span class='linenumber'>260</span> 	* Returns a new string without spaces on either side.
<span class='linenumber'>261</span> 	* @return {String}
<span class='linenumber'>262</span> 	*/</span><span class="WHIT">
<span class='linenumber'>263</span> 	</span><span class="NAME">String.prototype.trim</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>264</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>265</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.replace</span><span class="PUNC">(</span><span class="REGX">/^\s+/</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>266</span> 					</span><span class="PUNC">.</span><span class="NAME">replace</span><span class="PUNC">(</span><span class="REGX">/\s+$/</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>267</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>268</span> 
<span class='linenumber'>269</span> 	</span><span class="COMM">/**
<span class='linenumber'>270</span> 	* Returns a new string escaping HTML reserved characters.
<span class='linenumber'>271</span> 	* @return {String}
<span class='linenumber'>272</span> 	*/</span><span class="WHIT">
<span class='linenumber'>273</span> 	</span><span class="NAME">String.prototype.escapeHTML</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>274</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>275</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.replace</span><span class="PUNC">(</span><span class="REGX">/&/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"&amp;"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>276</span> 					</span><span class="PUNC">.</span><span class="NAME">replace</span><span class="PUNC">(</span><span class="REGX">/&lt;/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"&lt;"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>277</span> 					</span><span class="PUNC">.</span><span class="NAME">replace</span><span class="PUNC">(</span><span class="REGX">/>/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"&gt;"</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>278</span> 					</span><span class="COMM">//.replace(/\"/gm, '&quot;')</span><span class="WHIT">
<span class='linenumber'>279</span> 					</span><span class="COMM">//.replace(/'/gm, "&apos;");</span><span class="WHIT">
<span class='linenumber'>280</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>281</span> 
<span class='linenumber'>282</span> 	</span><span class="COMM">/**
<span class='linenumber'>283</span> 	* Returns a new string unescaping HTML reserved characters.
<span class='linenumber'>284</span> 	* @return {String}
<span class='linenumber'>285</span> 	*/</span><span class="WHIT">
<span class='linenumber'>286</span> 	</span><span class="NAME">String.prototype.unescapeHTML</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>287</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>288</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.replace</span><span class="PUNC">(</span><span class="REGX">/&amp;/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"&"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>289</span> 					</span><span class="PUNC">.</span><span class="NAME">replace</span><span class="PUNC">(</span><span class="REGX">/&lt;/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"&lt;"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>290</span> 					</span><span class="PUNC">.</span><span class="NAME">replace</span><span class="PUNC">(</span><span class="REGX">/&gt;/gm</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">">"</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>291</span> 					</span><span class="COMM">//.replace(/&quot;/gm, '"')</span><span class="WHIT">
<span class='linenumber'>292</span> 					</span><span class="COMM">//.replace(/&apos;/gm, "'");</span><span class="WHIT">
<span class='linenumber'>293</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>294</span> 
<span class='linenumber'>295</span> 	</span><span class="COMM">/**
<span class='linenumber'>296</span> 	* Returns whether the string starts with the specified string paramerter.
<span class='linenumber'>297</span> 	* @param {String} _string
<span class='linenumber'>298</span> 	* @return {Boolean}
<span class='linenumber'>299</span> 	*/</span><span class="WHIT">
<span class='linenumber'>300</span> 	</span><span class="NAME">String.prototype.startsWith</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>301</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>302</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.indexOf</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>303</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>304</span> 
<span class='linenumber'>305</span> 	</span><span class="COMM">/**
<span class='linenumber'>306</span> 	* Returns whether the string ends with the specified string paramerter.
<span class='linenumber'>307</span> 	* @param {String} _string
<span class='linenumber'>308</span> 	* @return {Boolean}
<span class='linenumber'>309</span> 	*/</span><span class="WHIT">
<span class='linenumber'>310</span> 	</span><span class="NAME">String.prototype.endsWith</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>311</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>312</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.lastIndexOf</span><span class="PUNC">(</span><span class="NAME">_string</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">this.length</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="WHIT"> </span><span class="NAME">_string.length</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>313</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>314</span> 
<span class='linenumber'>315</span> 	</span><span class="COMM">/**
<span class='linenumber'>316</span> 	* Returns whether the string has the specified string paramerter within it's contents.
<span class='linenumber'>317</span> 	* @param {String} _string
<span class='linenumber'>318</span> 	* @return {Boolean}
<span class='linenumber'>319</span> 	*/</span><span class="WHIT">
<span class='linenumber'>320</span> 	</span><span class="NAME">String.prototype.has</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_char</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>321</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>322</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.indexOf</span><span class="PUNC">(</span><span class="NAME">_char</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">></span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>323</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>324</span> 
<span class='linenumber'>325</span> 	</span><span class="COMM">/**
<span class='linenumber'>326</span> 	* Returns a new string but in reverse order from the original string.
<span class='linenumber'>327</span> 	* @return {String}
<span class='linenumber'>328</span> 	*/</span><span class="WHIT">
<span class='linenumber'>329</span> 	</span><span class="NAME">String.prototype.reverse</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>330</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>331</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.split</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">reverse</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">join</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>332</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>333</span> 
<span class='linenumber'>334</span> 	</span><span class="COMM">/**
<span class='linenumber'>335</span> 	* Truncates the string to the specified length. Returns a new string.
<span class='linenumber'>336</span> 	* @param {Number} _length The length to truncate the string to.
<span class='linenumber'>337</span> 	* @return {String}
<span class='linenumber'>338</span> 	*/</span><span class="WHIT">
<span class='linenumber'>339</span> 	</span><span class="NAME">String.prototype.truncate</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_length</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>340</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>341</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.slice</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_length</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>342</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>343</span> 
<span class='linenumber'>344</span> 	</span><span class="COMM">/**
<span class='linenumber'>345</span> 	* Returns a new string capitalizing the original string.
<span class='linenumber'>346</span> 	* @return {String}
<span class='linenumber'>347</span> 	*/</span><span class="WHIT">
<span class='linenumber'>348</span> 	</span><span class="NAME">String.prototype.capitalize</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>349</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>350</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.charAt</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">this.substring</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>351</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>352</span> 
<span class='linenumber'>353</span> 	</span><span class="COMM">/**
<span class='linenumber'>354</span> 	* Returns a new string camel casing the original hyphen or snake case string. Ex. background-image or background_image -> backgroundImage.
<span class='linenumber'>355</span> 	* @return {String}
<span class='linenumber'>356</span> 	*/</span><span class="WHIT">
<span class='linenumber'>357</span> 	</span><span class="NAME">String.prototype.camelCase</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>358</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>359</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>360</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>361</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>362</span> 
<span class='linenumber'>363</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.indexOf</span><span class="PUNC">(</span><span class="STRN">"-"</span><span class="PUNC">)</span><span class="PUNC">></span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>364</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>365</span> 			</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">"-"</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_index</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>366</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>367</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="NAME">me.$continue</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>368</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_once</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>369</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>370</span> 					</span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.charAt</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">_value.substring</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>371</span> 					</span><span class="NAME">_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>372</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>373</span> 				</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>374</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>375</span> 					</span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.charAt</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">_value.substring</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>376</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>377</span> 			</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>378</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>379</span> 		</span><span class="KEYW">else</span><span class="WHIT"> </span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.indexOf</span><span class="PUNC">(</span><span class="STRN">"_"</span><span class="PUNC">)</span><span class="PUNC">></span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>380</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>381</span> 			</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">"_"</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_index</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>382</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>383</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="NAME">me.$continue</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>384</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_once</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>385</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>386</span> 					</span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.charAt</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">_value.substring</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>387</span> 					</span><span class="NAME">_once</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>388</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>389</span> 				</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>390</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>391</span> 					</span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.charAt</span><span class="PUNC">(</span><span class="NUMB">0</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">toUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="WHIT"> </span><span class="NAME">_value.substring</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>392</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>393</span> 			</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>394</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>395</span> 		</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>396</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>397</span> 			</span><span class="NAME">_camelized</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>398</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>399</span> 
<span class='linenumber'>400</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_camelized</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>401</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>402</span> 
<span class='linenumber'>403</span> 	</span><span class="COMM">/**
<span class='linenumber'>404</span> 	* Returns a new string hyphen casing the original camel case string. Ex. backgroundImage -> background-image.
<span class='linenumber'>405</span> 	* @return {String}
<span class='linenumber'>406</span> 	*/</span><span class="WHIT">
<span class='linenumber'>407</span> 	</span><span class="NAME">String.prototype.hyphenCase</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>408</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>409</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>410</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_hyphenated</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>411</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_index</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>412</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>413</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_index</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT"> </span><span class="NAME">_value.isUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>414</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>415</span> 				</span><span class="NAME">_hyphenated</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>416</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>417</span> 			</span><span class="KEYW">else</span><span class="WHIT"> </span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_value.isUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>418</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>419</span> 				</span><span class="NAME">_hyphenated</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"-"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>420</span> 				</span><span class="NAME">_hyphenated</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>421</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>422</span> 			</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>423</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>424</span> 				</span><span class="NAME">_hyphenated</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>425</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>426</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>427</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_hyphenated</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>428</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>429</span> 
<span class='linenumber'>430</span> 	</span><span class="COMM">/**
<span class='linenumber'>431</span> 	* Returns a new string snake casing the original camel case string. Ex. backgroundImage -> background_image.
<span class='linenumber'>432</span> 	* @return {String}
<span class='linenumber'>433</span> 	*/</span><span class="WHIT">
<span class='linenumber'>434</span> 	</span><span class="NAME">String.prototype.snakeCase</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>435</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>436</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>437</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_snaked</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>438</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_index</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>439</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>440</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_index</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT"> </span><span class="NAME">_value.isUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>441</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>442</span> 				</span><span class="NAME">_snaked</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>443</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>444</span> 			</span><span class="KEYW">else</span><span class="WHIT"> </span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_value.isUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>445</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>446</span> 				</span><span class="NAME">_snaked</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"_"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>447</span> 				</span><span class="NAME">_snaked</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value.toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>448</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>449</span> 			</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>450</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>451</span> 				</span><span class="NAME">_snaked</span><span class="WHIT"> </span><span class="PUNC">+</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_value</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>452</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>453</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>454</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_snaked</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>455</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>456</span> 
<span class='linenumber'>457</span> 	</span><span class="COMM">/**
<span class='linenumber'>458</span> 	* Returns whether the string has all up cased characters.
<span class='linenumber'>459</span> 	* @return {Boolean}
<span class='linenumber'>460</span> 	*/</span><span class="WHIT">
<span class='linenumber'>461</span> 	</span><span class="NAME">String.prototype.isUpperCase</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>462</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>463</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>464</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_upper</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>465</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>466</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>467</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">(</span><span class="PUNC">[</span><span class="STRN">" "</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"\n"</span><span class="PUNC">,</span><span class="WHIT">  </span><span class="STRN">"\t"</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"\r"</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">indexOf</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT">
<span class='linenumber'>468</span> 				</span><span class="PUNC">(</span><span class="NAME">_value.equals</span><span class="PUNC">(</span><span class="NAME">_value.toLowerCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>469</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>470</span> 				</span><span class="NAME">_upper</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>471</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>472</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>473</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>474</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_upper</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>475</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>476</span> 
<span class='linenumber'>477</span> 	</span><span class="COMM">/**
<span class='linenumber'>478</span> 	* Returns whether the string has all lower cased characters.
<span class='linenumber'>479</span> 	* @return {Boolean}
<span class='linenumber'>480</span> 	*/</span><span class="WHIT">
<span class='linenumber'>481</span> 	</span><span class="NAME">String.prototype.isLowerCase</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>482</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>483</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>484</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_lower</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>485</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>486</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>487</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">(</span><span class="PUNC">[</span><span class="STRN">" "</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"\n"</span><span class="PUNC">,</span><span class="WHIT">  </span><span class="STRN">"\t"</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="STRN">"\r"</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">indexOf</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT">
<span class='linenumber'>488</span> 				</span><span class="PUNC">(</span><span class="NAME">_value.equals</span><span class="PUNC">(</span><span class="NAME">_value.toUpperCase</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>489</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>490</span> 				</span><span class="NAME">_lower</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>491</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>492</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>493</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>494</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_lower</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>495</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>496</span> 
<span class='linenumber'>497</span> 	</span><span class="COMM">/**
<span class='linenumber'>498</span> 	* Returns whether the string is blank. Space, tab, new line, carriage return are consider empty.
<span class='linenumber'>499</span> 	* @return {Boolean}
<span class='linenumber'>500</span> 	*/</span><span class="WHIT">
<span class='linenumber'>501</span> 	</span><span class="NAME">String.prototype.isBlank</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>502</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>503</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">this.isEmpty</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>504</span> 
<span class='linenumber'>505</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_blank</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>506</span> 
<span class='linenumber'>507</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>508</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="STRN">""</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>509</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>510</span> 			</span><span class="KEYW">if</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="STRN">" "</span><span class="PUNC">.</span><span class="NAME">equals</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT">
<span class='linenumber'>511</span> 				</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="STRN">"\t"</span><span class="PUNC">.</span><span class="NAME">equals</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT">
<span class='linenumber'>512</span> 				</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="STRN">"\n"</span><span class="PUNC">.</span><span class="NAME">equals</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT">
<span class='linenumber'>513</span> 				</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="STRN">"\r"</span><span class="PUNC">.</span><span class="NAME">equals</span><span class="PUNC">(</span><span class="NAME">_value</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>514</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>515</span> 					</span><span class="NAME">_blank</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>516</span> 					</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>517</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>518</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>519</span> 
<span class='linenumber'>520</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_blank</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>521</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>522</span> 
<span class='linenumber'>523</span> 	</span><span class="COMM">/**
<span class='linenumber'>524</span> 	* Returns whether the string is empty, where this.length == 0.
<span class='linenumber'>525</span> 	* @return {Boolean}
<span class='linenumber'>526</span> 	*/</span><span class="WHIT">
<span class='linenumber'>527</span> 	</span><span class="NAME">String.prototype.isEmpty</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>528</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>529</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.length</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>530</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>531</span> 
<span class='linenumber'>532</span> 
<span class='linenumber'>533</span> </span><span class="NAME">String.prototype.invoke</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.invoke</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>534</span> </span><span class="NAME">String.prototype.map</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.map</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>535</span> </span><span class="NAME">String.prototype.detect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.detect</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>536</span> </span><span class="NAME">String.prototype.echo</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.echo</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>537</span> </span><span class="NAME">String.prototype.zip</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.zip</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>538</span> </span><span class="NAME">String.prototype.max</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.max</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>539</span> </span><span class="NAME">String.prototype.toArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.toArray</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>540</span> </span><span class="NAME">String.prototype.min</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.min</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>541</span> </span><span class="NAME">String.prototype.convertToArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.convertToArray</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>542</span> </span><span class="NAME">String.prototype.$break</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>543</span> </span><span class="NAME">String.prototype.sortBy</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.sortBy</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>544</span> </span><span class="NAME">String.prototype.select</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.select</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>545</span> </span><span class="NAME">String.prototype.inject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.inject</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>546</span> </span><span class="NAME">String.prototype.find</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.find</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>547</span> </span><span class="NAME">String.prototype.collect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.collect</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>548</span> </span><span class="NAME">String.prototype.any</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.any</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>549</span> </span><span class="NAME">String.prototype.entries</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.entries</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>550</span> </span><span class="NAME">String.prototype.findAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.findAll</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>551</span> </span><span class="NAME">String.prototype.grep</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.grep</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>552</span> </span><span class="NAME">String.prototype.pluck</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.pluck</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>553</span> </span><span class="NAME">String.prototype.$continue</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>554</span> </span><span class="NAME">String.prototype.partition</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.partition</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>555</span> </span><span class="NAME">String.prototype.reject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.reject</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>556</span> </span><span class="NAME">String.prototype.all</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.all</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>557</span> </span><span class="NAME">String.prototype.member</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.member</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>558</span> </span><span class="NAME">String.prototype.include</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.include</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>559</span> 
<span class='linenumber'>560</span> </span><span class="NAME">String.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>561</span> </span><span class="NAME">String.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"String"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>562</span> </span><span class="NAME">String.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>563</span> </span><span class="NAME">String.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.collections.Enumerable"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>564</span> </span><span class="NAME">String.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>565</span> </span><span class="NAME">String.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="STRN">"jsx.collections.Enumerable"</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>566</span> </span><span class="NAME">String.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">String.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>567</span> </span><span class="NAME">String.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">String.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>568</span> </span><span class="NAME">String.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">String.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>569</span> </span><span class="NAME">String.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>570</span> </span></pre></body></html>