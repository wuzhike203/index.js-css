<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"> <style>
	.KEYW {color: #933;}
	.COMM {color: #bbb; font-style: italic;}
	.NUMB {color: #393;}
	.STRN {color: #393;}
	.REGX {color: #339;}
	.linenumber {border-right: 1px dotted #666; color: #666; font-style: normal;}
	</style></head><body><pre><span class='linenumber'>  1</span> <span class="WHIT">
<span class='linenumber'>  2</span> 	</span><span class="COMM">/**
<span class='linenumber'>  3</span> 	* @fileOverview &lt;code>jsx.collections.Enumerable&lt;/code> is a Mixin class. It provides a set of helper methods for any class that implements the each method.
<span class='linenumber'>  4</span> 	* @example
<span class='linenumber'>  5</span> 	&lt;pre>
<span class='linenumber'>  6</span> 		class MyEnumerable mixin Enumerable
<span class='linenumber'>  7</span> 	&lt;/pre>
<span class='linenumber'>  8</span> 	*/</span><span class="WHIT">
<span class='linenumber'>  9</span> 	</span><span class="COMM">/**
<span class='linenumber'> 10</span> 	* @class Enumerable
<span class='linenumber'> 11</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 12</span> 	</span><span class="NAME">jsx.collections.Enumerable</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="NAME">this.initialize.apply</span><span class="PUNC">(</span><span class="KEYW">this</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 13</span> 
<span class='linenumber'> 14</span> 	</span><span class="COMM">/** @ignore */</span><span class="WHIT">
<span class='linenumber'> 15</span> 	</span><span class="NAME">jsx.collections.Enumerable.prototype.initialize</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 16</span> 
<span class='linenumber'> 17</span> 	</span><span class="COMM">/**
<span class='linenumber'> 18</span> 	* Use to break out of a loop within closure.
<span class='linenumber'> 19</span> 	* @example
<span class='linenumber'> 20</span> 	&lt;div>var result = 0;&lt;/div>
<span class='linenumber'> 21</span> 	&lt;div>var array = [1, 2, 3, 4, 5];&lt;/div>
<span class='linenumber'> 22</span> 	&lt;div>array.each(function(_value)&lt;/div>
<span class='linenumber'> 23</span> 	&lt;div>{&lt;/div>
<span class='linenumber'> 24</span> 	&lt;div>	if(_value == 4)&lt;/div>
<span class='linenumber'> 25</span> 	&lt;div>	{&lt;/div>
<span class='linenumber'> 26</span> 	&lt;div>		array.$break();&lt;/div>
<span class='linenumber'> 27</span> 	&lt;div>	}&lt;/div>
<span class='linenumber'> 28</span> 	&lt;div>	result = _value;&lt;/div>
<span class='linenumber'> 29</span> 	&lt;div>});&lt;/div>
<span class='linenumber'> 30</span> 	&lt;div>this.assertEquals(3, result);&lt;/div>
<span class='linenumber'> 31</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 32</span> 	</span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$break</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 33</span> 	</span><span class="COMM">/**
<span class='linenumber'> 34</span> 	* Use to continue a loop within closure.
<span class='linenumber'> 35</span> 	* @example
<span class='linenumber'> 36</span> 	&lt;div>var result = 0;&lt;/div>
<span class='linenumber'> 37</span> 	&lt;div>var array = [1, 2, 3, 4, 5];&lt;/div>
<span class='linenumber'> 38</span> 	&lt;div>array.each(function(_value)&lt;/div>
<span class='linenumber'> 39</span> 	&lt;div>{&lt;/div>
<span class='linenumber'> 40</span> 	&lt;div>	if(_value != 4)&lt;/div>
<span class='linenumber'> 41</span> 	&lt;div>	{&lt;/div>
<span class='linenumber'> 42</span> 	&lt;div>		array.$continue();&lt;/div>
<span class='linenumber'> 43</span> 	&lt;div>	}&lt;/div>
<span class='linenumber'> 44</span> 	&lt;div>	result = _value;&lt;/div>
<span class='linenumber'> 45</span> 	&lt;div>});&lt;/div>
<span class='linenumber'> 46</span> 	&lt;div>this.assertEquals(4, result);&lt;/div>
<span class='linenumber'> 47</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 48</span> 	</span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">throw</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.$continue</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 49</span> 
<span class='linenumber'> 50</span> 	</span><span class="COMM">/**
<span class='linenumber'> 51</span> 	* Returns the same object as the specified object.
<span class='linenumber'> 52</span> 	* @param {Object} _object
<span class='linenumber'> 53</span> 	* @return {Object}
<span class='linenumber'> 54</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 55</span> 	</span><span class="NAME">jsx.collections.Enumerable.echo</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 56</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 57</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_object</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 58</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 59</span> 
<span class='linenumber'> 60</span> 	</span><span class="COMM">/**
<span class='linenumber'> 61</span> 	* Returns an array of items from the specified iterable.
<span class='linenumber'> 62</span> 	* @param {Object} _iterable If _iterable is null or undefined an empty array is returned. If _iterable.toArray exists, it will be used
<span class='linenumber'> 63</span> 	*  to convert. If _iterable.length exists, it is used to convert.
<span class='linenumber'> 64</span> 	* @return {Array}
<span class='linenumber'> 65</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 66</span> 	</span><span class="NAME">jsx.collections.Enumerable.convertToArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_iterable</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 67</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 68</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_iterable</span><span class="PUNC">)</span><span class="WHIT"> </span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 69</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_iterable.toArray</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 70</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 71</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_iterable.toArray</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 72</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 73</span> 		</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'> 74</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 75</span> 			</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 76</span> 			</span><span class="KEYW">for</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">i</span><span class="PUNC">=</span><span class="NUMB">0</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">&lt;</span><span class="NAME">_iterable.length</span><span class="PUNC">;</span><span class="NAME">i</span><span class="PUNC">++</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 77</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 78</span> 				</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_iterable</span><span class="PUNC">[</span><span class="NAME">i</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 79</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 80</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 81</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 82</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'> 83</span> 
<span class='linenumber'> 84</span> 	</span><span class="COMM">/**
<span class='linenumber'> 85</span> 	* Passes each element of a enumeration to the specifed block. Returns true if the block nevers returns false.
<span class='linenumber'> 86</span> 	* @example
<span class='linenumber'> 87</span> 	&lt;div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 3}); -> true&lt;/div>
<span class='linenumber'> 88</span> 	&lt;div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 4}); -> false&lt;/div>
<span class='linenumber'> 89</span> 	&lt;div>[null, Object.NOT_DEF,,"", 99].all(); -> false&lt;/div>
<span class='linenumber'> 90</span> 	* @param {Function} _block If the given block is null, Enumerable#echo is used.
<span class='linenumber'> 91</span> 	* @return {Boolean}
<span class='linenumber'> 92</span> 	*/</span><span class="WHIT">
<span class='linenumber'> 93</span> 	</span><span class="NAME">jsx.collections.Enumerable.all</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 94</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 95</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 96</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'> 97</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'> 98</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'> 99</span> 			</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT"> </span><span class="PUNC">!</span><span class="PUNC">!</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>100</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">result</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>101</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>102</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>103</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>104</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>105</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>106</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>107</span> 
<span class='linenumber'>108</span> 	</span><span class="COMM">/**
<span class='linenumber'>109</span> 	* Passes each element of a enumeration to the specifed block. Returns true if the block returns at least one true.
<span class='linenumber'>110</span> 	* @example
<span class='linenumber'>111</span> 	&lt;div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 3}); -> true&lt;/div>
<span class='linenumber'>112</span> 	&lt;div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 4}); -> true&lt;/div>
<span class='linenumber'>113</span> 	&lt;div>[null, Object.NOT_DEF,,"", 99].any(); -> true&lt;/div>
<span class='linenumber'>114</span> 	* @param {Function} _block If the given block is null, Enumerable#echo is used.
<span class='linenumber'>115</span> 	* @return {Boolean}
<span class='linenumber'>116</span> 	*/</span><span class="WHIT">
<span class='linenumber'>117</span> 	</span><span class="NAME">jsx.collections.Enumerable.any</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>118</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>119</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>120</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>121</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>122</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>123</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">!</span><span class="PUNC">!</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>124</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>125</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>126</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>127</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>128</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>129</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>130</span> 
<span class='linenumber'>131</span> 	</span><span class="COMM">/**
<span class='linenumber'>132</span> 	* Returns a new array of results from the specifed block.
<span class='linenumber'>133</span> 	* @example
<span class='linenumber'>134</span> 	&lt;div>[1, 2, 3, 4].collect(function(_value){return _value*_value}); -> [1, 4, 9, 16]&lt;/div>
<span class='linenumber'>135</span> 	&lt;div>[1, 2, 3, 4].collect(function(_value){return "cat"}); -> ["cat", "cat", "cat", "cat"]&lt;/div>
<span class='linenumber'>136</span> 	* @param {Function} _block
<span class='linenumber'>137</span> 	* @return {Array}
<span class='linenumber'>138</span> 	*/</span><span class="WHIT">
<span class='linenumber'>139</span> 	</span><span class="NAME">jsx.collections.Enumerable.collect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>140</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>141</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>142</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>143</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>144</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>145</span> 			</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT">	</span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>146</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>147</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>148</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>149</span> 
<span class='linenumber'>150</span> 	</span><span class="COMM">/**
<span class='linenumber'>151</span> 	* Passes each element in the enumeration to the specified block. Returns the first for which block is not false.
<span class='linenumber'>152</span> 	* @example
<span class='linenumber'>153</span> 	&lt;div>Number(1).toArray(10).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> undefined&lt;/div>
<span class='linenumber'>154</span> 	&lt;div>Number(1).toArray(100).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> 35&lt;/div>
<span class='linenumber'>155</span> 	* @param {Function} _block
<span class='linenumber'>156</span> 	* @return {Object}
<span class='linenumber'>157</span> 	*/</span><span class="WHIT">
<span class='linenumber'>158</span> 	</span><span class="NAME">jsx.collections.Enumerable.detect</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>159</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>160</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>161</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>162</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>163</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>164</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>165</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>166</span> 				</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>167</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>168</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>169</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>170</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>171</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>172</span> 
<span class='linenumber'>173</span> 	</span><span class="COMM">/**
<span class='linenumber'>174</span> 	* Passes each element in the enumeration to the specified block. Returns a new array of elements where the block returns true.
<span class='linenumber'>175</span> 	* @example
<span class='linenumber'>176</span> 	Number(1).toArray(10).findAll(function(_value){return _value % 3 == 0}); -> [3, 6, 9]
<span class='linenumber'>177</span> 	* @param {Function} _block
<span class='linenumber'>178</span> 	* @return {Array}
<span class='linenumber'>179</span> 	*/</span><span class="WHIT">
<span class='linenumber'>180</span> 	</span><span class="NAME">jsx.collections.Enumerable.findAll</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>181</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>182</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>183</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>184</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>185</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>186</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>187</span> 				</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>188</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>189</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>190</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>191</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>192</span> 
<span class='linenumber'>193</span> 	</span><span class="COMM">/**
<span class='linenumber'>194</span> 	* Passes each element in the enumeration to the specified block. The specified regexp pattern is used to test against the first object's &lt;code>toString&lt;/code>.
<span class='linenumber'>195</span> 	*  If the test is true, the specified block is called with parameters from the &lt;code>each&lt;/code> method, and the results from the block
<span class='linenumber'>196</span> 	*  are added to the array.
<span class='linenumber'>197</span> 	* @example
<span class='linenumber'>198</span> 	&lt;div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Mat/); -> ["Matthew", "Mathew", "Matt", "Mat"]&lt;/div>
<span class='linenumber'>199</span> 	&lt;div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Matt/); -> ["Matthew", "Matt"]&lt;/div>
<span class='linenumber'>200</span> 	&lt;div>[1, 2, 3, 4, 5].grep(/3|4/); -> [3, 4]&lt;/div>
<span class='linenumber'>201</span> 	* @param {RegExp} _pattern
<span class='linenumber'>202</span> 	* @param {Function} _block
<span class='linenumber'>203</span> 	* @return {Array}
<span class='linenumber'>204</span> 	*/</span><span class="WHIT">
<span class='linenumber'>205</span> 	</span><span class="NAME">jsx.collections.Enumerable.grep</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_pattern</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>206</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>207</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>208</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>209</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>210</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>211</span> 			</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">stringValue</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1.toString</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>212</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">stringValue.match</span><span class="PUNC">(</span><span class="NAME">_pattern</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>213</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>214</span> 				</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>215</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>216</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>217</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>218</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>219</span> 
<span class='linenumber'>220</span> 	</span><span class="COMM">/**
<span class='linenumber'>221</span> 	* Returns whether the specified object exists in the enumerable.
<span class='linenumber'>222</span> 	* @example
<span class='linenumber'>223</span> 	&lt;div>["Matthew", "Mathew", "Matt", "Mat"].include("Mat"); -> true&lt;/div>
<span class='linenumber'>224</span> 	&lt;div>["Matthew", "Mathew", "Matt", "Mat"].include("Matt"); -> true&lt;/div>
<span class='linenumber'>225</span> 	&lt;div>["Matthew", "Mathew", "Matt", "Mat"].include("Sam"); -> false&lt;/div>
<span class='linenumber'>226</span> 	&lt;div>[1, 2, 3, 4, 5].include(3); -> true&lt;/div>
<span class='linenumber'>227</span> 	* @param {Object} _object
<span class='linenumber'>228</span> 	* @return {Boolean}
<span class='linenumber'>229</span> 	*/</span><span class="WHIT">
<span class='linenumber'>230</span> 	</span><span class="NAME">jsx.collections.Enumerable.include</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>231</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>232</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>233</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">found</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">false</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>234</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>235</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>236</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="WHIT"> </span><span class="PUNC">!=</span><span class="WHIT"> </span><span class="KEYW">null</span><span class="WHIT"> </span><span class="PUNC">&&</span><span class="WHIT"> </span><span class="NAME">_object1.equals</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>237</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>238</span> 				</span><span class="NAME">found</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">true</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>239</span> 				</span><span class="NAME">me.$break</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>240</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>241</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>242</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">found</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>243</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>244</span> 
<span class='linenumber'>245</span> 	</span><span class="COMM">/**
<span class='linenumber'>246</span> 	* Combines the elements of enumeration by applying the block to an accumulator value (memo) and each element in turn.
<span class='linenumber'>247</span> 	*  At each step, memo is set to the value returned by the block.
<span class='linenumber'>248</span> 	* @example
<span class='linenumber'>249</span> 	&lt;div>[5, 6, 7, 8, 9, 10].inject(0, function(_memo, _value){return _memo + _value}); -> 45&lt;/div>
<span class='linenumber'>250</span> 	&lt;div>[5, 6, 7, 8, 9, 10].inject(1, function(_memo, _value){return _memo * _value}); -> 151200&lt;/div>
<span class='linenumber'>251</span> 	&lt;div>["cat", "sheep", "bear"].inject("", function(_memo, _value){return _memo.length > _value.length ? _memo : _value}); -> "sheep"&lt;/div>
<span class='linenumber'>252</span> 	&lt;div>["cat", "sheep", "bear"].inject(0, function(_memo, _value){return _memo >= _value.length ? _memo : _value.length}); -> 5&lt;/div>
<span class='linenumber'>253</span> 	* @param {Object} _memo
<span class='linenumber'>254</span> 	* @param {Function} _block
<span class='linenumber'>255</span> 	* @return {Object}
<span class='linenumber'>256</span> 	*/</span><span class="WHIT">
<span class='linenumber'>257</span> 	</span><span class="NAME">jsx.collections.Enumerable.inject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_memo</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>258</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>259</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>260</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>261</span> 			</span><span class="NAME">_memo</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_memo</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>262</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>263</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_memo</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>264</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>265</span> 
<span class='linenumber'>266</span> 	</span><span class="COMM">/**
<span class='linenumber'>267</span> 	* Invokes the specified method for each element in the enumeration. Returns an array of results from the invocation of the specified method.
<span class='linenumber'>268</span> 	* @example
<span class='linenumber'>269</span> 	[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]].invoke("join", "-"); -> ["1", "1-2", "1-2-3", "1-2-3-4", "1-2-3-4-5"]
<span class='linenumber'>270</span> 	* @param {String} _method The name of the method to call on the object. Any parameter after the method name will act as parameters to the method call.
<span class='linenumber'>271</span> 	* @return {Array}
<span class='linenumber'>272</span> 	*/</span><span class="WHIT">
<span class='linenumber'>273</span> 	</span><span class="NAME">jsx.collections.Enumerable.invoke</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_method</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>274</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>275</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">args</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.convertToArray</span><span class="PUNC">(</span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">slice</span><span class="PUNC">(</span><span class="NUMB">1</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>276</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.collect</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>277</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>278</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">[</span><span class="NAME">_method</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">apply</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">args</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>279</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>280</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>281</span> 
<span class='linenumber'>282</span> 	</span><span class="COMM">/**
<span class='linenumber'>283</span> 	* Returns the max element in the enumeration using the specifed block to return a comparable value -1, 0, 1.
<span class='linenumber'>284</span> 	* @example
<span class='linenumber'>285</span> 	&lt;div>["albatross", "dog", "horse"].max(); -> "horse"&lt;/div>
<span class='linenumber'>286</span> 	&lt;div>["albatross", "dog", "horse"].max(function(a, _index, b){return a.length&lt;b.length?-1:a.length>b.length?1:0}); -> "albatross"&lt;/div>
<span class='linenumber'>287</span> 	* @param {Function} _block
<span class='linenumber'>288</span> 	* @return {Object}
<span class='linenumber'>289</span> 	*/</span><span class="WHIT">
<span class='linenumber'>290</span> 	</span><span class="NAME">jsx.collections.Enumerable.max</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>291</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>292</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>293</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>294</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>295</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>296</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">result</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>297</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>298</span> 				</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>299</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>300</span> 			</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>301</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>302</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>303</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>304</span> 					</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="WHIT"> </span><span class="PUNC">>=</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>305</span> 					</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>306</span> 						</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>307</span> 					</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>308</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>309</span> 				</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>310</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>311</span> 					</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">comp</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>312</span> 					</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">comp</span><span class="WHIT"> </span><span class="PUNC">>=</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>313</span> 					</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>314</span> 						</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>315</span> 					</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>316</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>317</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>318</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>319</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>320</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>321</span> 
<span class='linenumber'>322</span> 	</span><span class="COMM">/**
<span class='linenumber'>323</span> 	* Returns the min element in the enumeration using the specifed block to return a comparable value -1, 0, 1.
<span class='linenumber'>324</span> 	* @example
<span class='linenumber'>325</span> 	&lt;div>["albatross", "dog", "horse"].max(); -> "albatross"&lt;/div>
<span class='linenumber'>326</span> 	&lt;div>["albatross", "dog", "horse"].min(function(a, _index, b){return a.length&lt;b.length?-1:a.length>b.length?1:0}); -> "dog"&lt;/div>
<span class='linenumber'>327</span> 	* @param {Function} _block
<span class='linenumber'>328</span> 	* @return {Object}
<span class='linenumber'>329</span> 	*/</span><span class="WHIT">
<span class='linenumber'>330</span> 	</span><span class="NAME">jsx.collections.Enumerable.min</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>331</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>332</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>333</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>334</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>335</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>336</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">result</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>337</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>338</span> 				</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>339</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>340</span> 			</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>341</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>342</span> 				</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>343</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>344</span> 					</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>345</span> 					</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>346</span> 						</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>347</span> 					</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>348</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>349</span> 				</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>350</span> 				</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>351</span> 					</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">comp</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>352</span> 					</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="NAME">comp</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>353</span> 					</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>354</span> 						</span><span class="NAME">result</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>355</span> 					</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>356</span> 				</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>357</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>358</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>359</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">result</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>360</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>361</span> 
<span class='linenumber'>362</span> 	</span><span class="COMM">/**
<span class='linenumber'>363</span> 	* Uses the specified block to result in true or false and split the results.
<span class='linenumber'>364</span> 	* @example
<span class='linenumber'>365</span> 	[1, 2, 3, 4, 5, 6].partition(function(_value){ return (_value%2 == 0) }); -> [[2,4,6],[1,3,5]]
<span class='linenumber'>366</span> 	* @param {Function} _block
<span class='linenumber'>367</span> 	* @return {Array} [0] = true objects, [1] = false objects
<span class='linenumber'>368</span> 	*/</span><span class="WHIT">
<span class='linenumber'>369</span> 	</span><span class="NAME">jsx.collections.Enumerable.partition</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>370</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>371</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>372</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">trues</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>373</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">falses</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>374</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>375</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>376</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>377</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>378</span> 				</span><span class="NAME">trues</span><span class="PUNC">[</span><span class="NAME">trues.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>379</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>380</span> 			</span><span class="KEYW">else</span><span class="WHIT">
<span class='linenumber'>381</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>382</span> 				</span><span class="NAME">falses</span><span class="PUNC">[</span><span class="NAME">falses.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>383</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>384</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>385</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="NAME">trues</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">falses</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>386</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>387</span> 
<span class='linenumber'>388</span> 	</span><span class="COMM">/**
<span class='linenumber'>389</span> 	* Passes the specified property to each element in the enumeration and using the first object to evaluate the property. Returns a new
<span class='linenumber'>390</span> 	*  array element containing the value of object[property].
<span class='linenumber'>391</span> 	* @example
<span class='linenumber'>392</span> 	[[1], [1,2], [1,2,3], [1,2,3,4]].pluck("length"); -> [1,2,3,4]
<span class='linenumber'>393</span> 	* @param {String} _property
<span class='linenumber'>394</span> 	* @return {Array}
<span class='linenumber'>395</span> 	*/</span><span class="WHIT">
<span class='linenumber'>396</span> 	</span><span class="NAME">jsx.collections.Enumerable.pluck</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_property</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>397</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>398</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>399</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>400</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>401</span> 			</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">[</span><span class="NAME">_property</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>402</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>403</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>404</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>405</span> 
<span class='linenumber'>406</span> 	</span><span class="COMM">/**
<span class='linenumber'>407</span> 	* Returns a new array where the specifed block results in false.
<span class='linenumber'>408</span> 	* @example
<span class='linenumber'>409</span> 	Number(1).toArray(10).reject(function(_value){return (_value%3==0)}); -> [1, 2, 4, 5, 7, 8, 10]
<span class='linenumber'>410</span> 	* @param {Function} _block
<span class='linenumber'>411</span> 	* @return {Array}
<span class='linenumber'>412</span> 	*/</span><span class="WHIT">
<span class='linenumber'>413</span> 	</span><span class="NAME">jsx.collections.Enumerable.reject</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>414</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>415</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">results</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>416</span> 		</span><span class="NAME">this.each</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>417</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>418</span> 			</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="PUNC">!</span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>419</span> 			</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>420</span> 				</span><span class="NAME">results</span><span class="PUNC">[</span><span class="NAME">results.length</span><span class="PUNC">]</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">_object1</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>421</span> 			</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>422</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>423</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">results</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>424</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>425</span> 
<span class='linenumber'>426</span> 	</span><span class="COMM">/**
<span class='linenumber'>427</span> 	* Returns a new array using the specified block to return a comparable value.
<span class='linenumber'>428</span> 	* @example
<span class='linenumber'>429</span> 	&lt;div>["rhea", "kea", "flea"].sortBy(); -> ["flea", "kea", "rhea"]&lt;/div>
<span class='linenumber'>430</span> 	&lt;div>Number(1).toArray(10).sortBy(function(_value, _index){return -1 * _value}); -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]&lt;/div>
<span class='linenumber'>431</span> 	&lt;div>["apple", "pear", "fig"].sortBy(function(_value, _index){return _value.length}); -> ["fig", "pear", "apple"]&lt;/div>
<span class='linenumber'>432</span> 	* @param {Function} _block
<span class='linenumber'>433</span> 	* @return {Array}
<span class='linenumber'>434</span> 	*/</span><span class="WHIT">
<span class='linenumber'>435</span> 	</span><span class="NAME">jsx.collections.Enumerable.sortBy</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>436</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>437</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">me</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">this</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>438</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">items</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.collect</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>439</span> 					</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>440</span> 						</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="PUNC">{</span><span class="NAME">value</span><span class="PUNC">:</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">criteria</span><span class="PUNC">:</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">||</span><span class="WHIT"> </span><span class="NAME">me.echo</span><span class="PUNC">)</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">}</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>441</span> 					</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>442</span> 
<span class='linenumber'>443</span> 		</span><span class="NAME">items.sort</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">left</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">right</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>444</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>445</span> 			</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">a</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">left.criteria</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>446</span> 			</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">b</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">right.criteria</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>447</span> 			</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">a</span><span class="WHIT"> </span><span class="PUNC">&lt;</span><span class="WHIT"> </span><span class="NAME">b</span><span class="WHIT"> </span><span class="PUNC">?</span><span class="WHIT"> </span><span class="PUNC">-</span><span class="NUMB">1</span><span class="WHIT"> </span><span class="PUNC">:</span><span class="WHIT"> </span><span class="NAME">a</span><span class="WHIT"> </span><span class="PUNC">></span><span class="WHIT"> </span><span class="NAME">b</span><span class="WHIT"> </span><span class="PUNC">?</span><span class="WHIT"> </span><span class="NUMB">1</span><span class="WHIT"> </span><span class="PUNC">:</span><span class="WHIT"> </span><span class="NUMB">0</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>448</span> 		</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>449</span> 
<span class='linenumber'>450</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">items.pluck</span><span class="PUNC">(</span><span class="STRN">"value"</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>451</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>452</span> 
<span class='linenumber'>453</span> 	</span><span class="COMM">/**
<span class='linenumber'>454</span> 	* Converts any arguments to arrays, then merges elements of enum with corresponding elements from each argument.
<span class='linenumber'>455</span> 	*  This generates a sequence of enum#size n-element arrays, where n is one more that the count of arguments.
<span class='linenumber'>456</span> 	*  If the size of any argument is less than enum#size, nil values are supplied. If a block given, it is invoked for
<span class='linenumber'>457</span> 	*  each output array, otherwise an array of arrays is returned.
<span class='linenumber'>458</span> 	* @example
<span class='linenumber'>459</span> 	&lt;div>[1, 2, 3].zip([4, 5, 6], [7, 8, 9]); -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]&lt;/div>
<span class='linenumber'>460</span> 	&lt;div>["cat", "dog"].zip([1]); -> [["cat", 1], ["dog", null]]&lt;/div>
<span class='linenumber'>461</span> 	&lt;div>[1, 2, 3].zip(); -> [[1], [2], [3]]&lt;/div>
<span class='linenumber'>462</span> 	* @param {Function} _block
<span class='linenumber'>463</span> 	* @return {Array}
<span class='linenumber'>464</span> 	*/</span><span class="WHIT">
<span class='linenumber'>465</span> 	</span><span class="NAME">jsx.collections.Enumerable.zip</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>466</span> 	</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>467</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.echo</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>468</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">args</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">this.convertToArray</span><span class="PUNC">(</span><span class="NAME">arguments</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>469</span> 
<span class='linenumber'>470</span> 		</span><span class="COMM">// see if we have a transform block</span><span class="WHIT">
<span class='linenumber'>471</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">last</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">args</span><span class="PUNC">[</span><span class="NAME">args.length</span><span class="PUNC">-</span><span class="NUMB">1</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>472</span> 		</span><span class="KEYW">if</span><span class="PUNC">(</span><span class="KEYW">typeof</span><span class="WHIT"> </span><span class="NAME">last</span><span class="WHIT"> </span><span class="PUNC">==</span><span class="WHIT"> </span><span class="STRN">"function"</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>473</span> 		</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>474</span> 			</span><span class="NAME">_block</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="NAME">args.pop</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>475</span> 		</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>476</span> 
<span class='linenumber'>477</span> 		</span><span class="KEYW">var</span><span class="WHIT"> </span><span class="NAME">collections</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="KEYW">this</span><span class="PUNC">]</span><span class="PUNC">.</span><span class="NAME">concat</span><span class="PUNC">(</span><span class="NAME">args</span><span class="PUNC">)</span><span class="PUNC">.</span><span class="NAME">map</span><span class="PUNC">(</span><span class="NAME">this.convertToArray</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>478</span> 
<span class='linenumber'>479</span> 		</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.map</span><span class="PUNC">(</span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object1</span><span class="PUNC">,</span><span class="WHIT"> </span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="WHIT">
<span class='linenumber'>480</span> 						</span><span class="PUNC">{</span><span class="WHIT">
<span class='linenumber'>481</span> 							</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">_block</span><span class="PUNC">(</span><span class="NAME">collections.pluck</span><span class="PUNC">(</span><span class="NAME">_object2</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>482</span> 						</span><span class="PUNC">}</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>483</span> 	</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>484</span> 
<span class='linenumber'>485</span> 	</span><span class="COMM">/**
<span class='linenumber'>486</span> 	* Calls jsx.collections.Enumerable.collect.
<span class='linenumber'>487</span> 	*/</span><span class="WHIT">
<span class='linenumber'>488</span> 	</span><span class="NAME">jsx.collections.Enumerable.toArray</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.collect</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>489</span> 	</span><span class="COMM">/**
<span class='linenumber'>490</span> 	* Calls jsx.collections.Enumerable.collect.
<span class='linenumber'>491</span> 	*/</span><span class="WHIT">
<span class='linenumber'>492</span> 	</span><span class="NAME">jsx.collections.Enumerable.entries</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.collect</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>493</span> 	</span><span class="COMM">/**
<span class='linenumber'>494</span> 	* Calls jsx.collections.Enumerable.collect.
<span class='linenumber'>495</span> 	*/</span><span class="WHIT">
<span class='linenumber'>496</span> 	</span><span class="NAME">jsx.collections.Enumerable.map</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.collect</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>497</span> 	</span><span class="COMM">/**
<span class='linenumber'>498</span> 	* Calls jsx.collections.Enumerable.detect.
<span class='linenumber'>499</span> 	*/</span><span class="WHIT">
<span class='linenumber'>500</span> 	</span><span class="NAME">jsx.collections.Enumerable.find</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.detect</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>501</span> 	</span><span class="COMM">/**
<span class='linenumber'>502</span> 	* Calls jsx.collections.Enumerable.include.
<span class='linenumber'>503</span> 	*/</span><span class="WHIT">
<span class='linenumber'>504</span> 	</span><span class="NAME">jsx.collections.Enumerable.member</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.include</span><span class="PUNC">(</span><span class="NAME">_object</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>505</span> 	</span><span class="COMM">/**
<span class='linenumber'>506</span> 	* Calls jsx.collections.Enumerable.findAll.
<span class='linenumber'>507</span> 	*/</span><span class="WHIT">
<span class='linenumber'>508</span> 	</span><span class="NAME">jsx.collections.Enumerable.select</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">this.findAll</span><span class="PUNC">(</span><span class="NAME">_block</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>509</span> 
<span class='linenumber'>510</span> 
<span class='linenumber'>511</span> </span><span class="NAME">jsx.collections.Enumerable.PACKAGE</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>512</span> </span><span class="NAME">jsx.collections.Enumerable.CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">"jsx.collections.Enumerable"</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>513</span> </span><span class="NAME">jsx.collections.Enumerable.SUPER_CLASS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="STRN">""</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>514</span> </span><span class="NAME">jsx.collections.Enumerable.IMPORTS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>515</span> </span><span class="NAME">jsx.collections.Enumerable.INTERFACES</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>516</span> </span><span class="NAME">jsx.collections.Enumerable.MIXINS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>517</span> </span><span class="NAME">jsx.collections.Enumerable.getName</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.CLASS</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>518</span> </span><span class="NAME">jsx.collections.Enumerable.klass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">new</span><span class="WHIT"> </span><span class="NAME">jsx.lang.Class</span><span class="PUNC">(</span><span class="NAME">jsx.collections.Enumerable.getName</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">)</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>519</span> </span><span class="NAME">jsx.collections.Enumerable.prototype.getClass</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="KEYW">function</span><span class="PUNC">(</span><span class="PUNC">)</span><span class="PUNC">{</span><span class="KEYW">return</span><span class="WHIT"> </span><span class="NAME">jsx.collections.Enumerable.klass</span><span class="PUNC">;</span><span class="PUNC">}</span><span class="WHIT">
<span class='linenumber'>520</span> </span><span class="NAME">jsx.collections.Enumerable.WARNINGS</span><span class="WHIT"> </span><span class="PUNC">=</span><span class="WHIT"> </span><span class="PUNC">[</span><span class="PUNC">]</span><span class="PUNC">;</span><span class="WHIT">
<span class='linenumber'>521</span> </span></pre></body></html>