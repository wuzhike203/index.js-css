<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><meta name="generator" content="JsDoc Toolkit 1.0"><title>JsDoc: </title><link rel=stylesheet href="css/default.css" type="text/css" media=screen></head><body><div class="content"><div class="docs"><div class="jump">JUMP: [<a href="#const_summary">CONSTRUCTORS</a> ] [ <a href="#functions_summary">FUNCTIONS</a> ] [ <a href="#objects_summary">PROPERTIES</a> ]</div><hr><div class="libHead">Library: Enumerable.js			</div><div class="section overview"><div class="itemTitle">					Overview				</div><div><div class="desc"><code>jsx.collections.Enumerable</code> is a Mixin class. It provides a set of helper methods for any class that implements the each method.</div><div class="itemTags"><ul><li>source: <a href="src_08.htm">Enumerable.js</a></li><li>example: <pre>		class MyEnumerable mixin Enumerable	</pre></li></ul></div></div></div><div class="sectionHead">Constructors</div><a name="const_summary"></a><div class="section constructor"><div class="itemTitle"><a name="jsx.collections.Enumerable"></a>																				jsx.collections.Enumerable(<span class="signature"></span>)														</div><div class="desc"></div><div class="detailHead">methods</div><ul class="details"><li><a href="#jsx.collections.Enumerable.getClass" style="font-weight:bold;">getClass</a><b>()</b></li></ul></div><div class="sectionHead">Namespaces</div><a name="const_summary"></a><div class="sectionHead">Functions</div><a name="functions_summary"></a><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.$break"></a>																				jsx.collections.Enumerable.$break(<span class="signature"></span>)														</div><div class="desc">Use to break out of a loop within closure.</div><pre class="code"><div>var result = 0;</div><div>var array = [1, 2, 3, 4, 5];</div><div>array.each(function(_value)</div><div>{</div><div>	if(_value == 4)</div><div>	{</div><div>		array.$break();</div><div>	}</div><div>	result = _value;</div><div>});</div><div>this.assertEquals(3, result);</div></pre></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.$continue"></a>																				jsx.collections.Enumerable.$continue(<span class="signature"></span>)														</div><div class="desc">Use to continue a loop within closure.</div><pre class="code"><div>var result = 0;</div><div>var array = [1, 2, 3, 4, 5];</div><div>array.each(function(_value)</div><div>{</div><div>	if(_value != 4)</div><div>	{</div><div>		array.$continue();</div><div>	}</div><div>	result = _value;</div><div>});</div><div>this.assertEquals(4, result);</div></pre></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.echo"></a>																				jsx.collections.Enumerable.echo(<span class="signature">_object</span>)														</div><div class="desc">Returns the same object as the specified object.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Object						</td><td>							_object						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.convertToArray"></a>																				jsx.collections.Enumerable.convertToArray(<span class="signature">_iterable</span>)														</div><div class="desc">Returns an array of items from the specified iterable.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Object						</td><td>							_iterable						</td><td>							If _iterable is null or undefined an empty array is returned. If _iterable.toArray exists, it will be used to convert. If _iterable.length exists, it is used to convert.						</td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.all"></a>																				jsx.collections.Enumerable.all(<span class="signature">_block</span>)														</div><div class="desc">Passes each element of a enumeration to the specifed block. Returns true if the block nevers returns false.</div><pre class="code"><div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 3}); -> true</div><div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 4}); -> false</div><div>[null, Object.NOT_DEF,,"", 99].all(); -> false</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td>							If the given block is null, Enumerable#echo is used.						</td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Boolean						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.any"></a>																				jsx.collections.Enumerable.any(<span class="signature">_block</span>)														</div><div class="desc">Passes each element of a enumeration to the specifed block. Returns true if the block returns at least one true.</div><pre class="code"><div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 3}); -> true</div><div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 4}); -> true</div><div>[null, Object.NOT_DEF,,"", 99].any(); -> true</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td>							If the given block is null, Enumerable#echo is used.						</td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Boolean						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.collect"></a>																				jsx.collections.Enumerable.collect(<span class="signature">_block</span>)														</div><div class="desc">Returns a new array of results from the specifed block.</div><pre class="code"><div>[1, 2, 3, 4].collect(function(_value){return _value*_value}); -> [1, 4, 9, 16]</div><div>[1, 2, 3, 4].collect(function(_value){return "cat"}); -> ["cat", "cat", "cat", "cat"]</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.detect"></a>																				jsx.collections.Enumerable.detect(<span class="signature">_block</span>)														</div><div class="desc">Passes each element in the enumeration to the specified block. Returns the first for which block is not false.</div><pre class="code"><div>Number(1).toArray(10).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> undefined</div><div>Number(1).toArray(100).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> 35</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.findAll"></a>																				jsx.collections.Enumerable.findAll(<span class="signature">_block</span>)														</div><div class="desc">Passes each element in the enumeration to the specified block. Returns a new array of elements where the block returns true.</div><pre class="code">Number(1).toArray(10).findAll(function(_value){return _value % 3 == 0}); -> [3, 6, 9]</pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.grep"></a>																				jsx.collections.Enumerable.grep(<span class="signature">_pattern, _block</span>)														</div><div class="desc">Passes each element in the enumeration to the specified block. The specified regexp pattern is used to test against the first object's <code>toString</code>. If the test is true, the specified block is called with parameters from the <code>each</code> method, and the results from the block are added to the array.</div><pre class="code"><div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Mat/); -> ["Matthew", "Mathew", "Matt", "Mat"]</div><div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Matt/); -> ["Matthew", "Matt"]</div><div>[1, 2, 3, 4, 5].grep(/3|4/); -> [3, 4]</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							RegExp						</td><td>							_pattern						</td><td></td></tr><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.include"></a>																				jsx.collections.Enumerable.include(<span class="signature">_object</span>)														</div><div class="desc">Returns whether the specified object exists in the enumerable.</div><pre class="code"><div>["Matthew", "Mathew", "Matt", "Mat"].include("Mat"); -> true</div><div>["Matthew", "Mathew", "Matt", "Mat"].include("Matt"); -> true</div><div>["Matthew", "Mathew", "Matt", "Mat"].include("Sam"); -> false</div><div>[1, 2, 3, 4, 5].include(3); -> true</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Object						</td><td>							_object						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Boolean						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.inject"></a>																				jsx.collections.Enumerable.inject(<span class="signature">_memo, _block</span>)														</div><div class="desc">Combines the elements of enumeration by applying the block to an accumulator value (memo) and each element in turn. At each step, memo is set to the value returned by the block.</div><pre class="code"><div>[5, 6, 7, 8, 9, 10].inject(0, function(_memo, _value){return _memo + _value}); -> 45</div><div>[5, 6, 7, 8, 9, 10].inject(1, function(_memo, _value){return _memo * _value}); -> 151200</div><div>["cat", "sheep", "bear"].inject("", function(_memo, _value){return _memo.length > _value.length ? _memo : _value}); -> "sheep"</div><div>["cat", "sheep", "bear"].inject(0, function(_memo, _value){return _memo >= _value.length ? _memo : _value.length}); -> 5</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Object						</td><td>							_memo						</td><td></td></tr><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.invoke"></a>																				jsx.collections.Enumerable.invoke(<span class="signature">_method</span>)														</div><div class="desc">Invokes the specified method for each element in the enumeration. Returns an array of results from the invocation of the specified method.</div><pre class="code">[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]].invoke("join", "-"); -> ["1", "1-2", "1-2-3", "1-2-3-4", "1-2-3-4-5"]</pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							String						</td><td>							_method						</td><td>							The name of the method to call on the object. Any parameter after the method name will act as parameters to the method call.						</td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.max"></a>																				jsx.collections.Enumerable.max(<span class="signature">_block</span>)														</div><div class="desc">Returns the max element in the enumeration using the specifed block to return a comparable value -1, 0, 1.</div><pre class="code"><div>["albatross", "dog", "horse"].max(); -> "horse"</div><div>["albatross", "dog", "horse"].max(function(a, _index, b){return a.length<b.length?-1:a.length>b.length?1:0}); -> "albatross"</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.min"></a>																				jsx.collections.Enumerable.min(<span class="signature">_block</span>)														</div><div class="desc">Returns the min element in the enumeration using the specifed block to return a comparable value -1, 0, 1.</div><pre class="code"><div>["albatross", "dog", "horse"].max(); -> "albatross"</div><div>["albatross", "dog", "horse"].min(function(a, _index, b){return a.length<b.length?-1:a.length>b.length?1:0}); -> "dog"</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.partition"></a>																				jsx.collections.Enumerable.partition(<span class="signature">_block</span>)														</div><div class="desc">Uses the specified block to result in true or false and split the results.</div><pre class="code">[1, 2, 3, 4, 5, 6].partition(function(_value){ return (_value%2 == 0) }); -> [[2,4,6],[1,3,5]]</pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td>							[0] = true objects, [1] = false objects						</td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.pluck"></a>																				jsx.collections.Enumerable.pluck(<span class="signature">_property</span>)														</div><div class="desc">Passes the specified property to each element in the enumeration and using the first object to evaluate the property. Returns a new array element containing the value of object[property].</div><pre class="code">[[1], [1,2], [1,2,3], [1,2,3,4]].pluck("length"); -> [1,2,3,4]</pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							String						</td><td>							_property						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.reject"></a>																				jsx.collections.Enumerable.reject(<span class="signature">_block</span>)														</div><div class="desc">Returns a new array where the specifed block results in false.</div><pre class="code">Number(1).toArray(10).reject(function(_value){return (_value%3==0)}); -> [1, 2, 4, 5, 7, 8, 10]</pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.sortBy"></a>																				jsx.collections.Enumerable.sortBy(<span class="signature">_block</span>)														</div><div class="desc">Returns a new array using the specified block to return a comparable value.</div><pre class="code"><div>["rhea", "kea", "flea"].sortBy(); -> ["flea", "kea", "rhea"]</div><div>Number(1).toArray(10).sortBy(function(_value, _index){return -1 * _value}); -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</div><div>["apple", "pear", "fig"].sortBy(function(_value, _index){return _value.length}); -> ["fig", "pear", "apple"]</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.zip"></a>																				jsx.collections.Enumerable.zip(<span class="signature">_block</span>)														</div><div class="desc">Converts any arguments to arrays, then merges elements of enum with corresponding elements from each argument. This generates a sequence of enum#size n-element arrays, where n is one more that the count of arguments. If the size of any argument is less than enum#size, nil values are supplied. If a block given, it is invoked for each output array, otherwise an array of arrays is returned.</div><pre class="code"><div>[1, 2, 3].zip([4, 5, 6], [7, 8, 9]); -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</div><div>["cat", "dog"].zip([1]); -> [["cat", 1], ["dog", null]]</div><div>[1, 2, 3].zip(); -> [[1], [2], [3]]</div></pre><div class="detailHead">parameters</div><table class="params"><tr><td class="type">							Function						</td><td>							_block						</td><td></td></tr></table><div class="detailHead">returns</div><table class="params"><tr><td class="type">							Array						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.toArray"></a>																				jsx.collections.Enumerable.toArray(<span class="signature"></span>)														</div><div class="desc">Calls jsx.collections.Enumerable.collect.</div></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.entries"></a>																				jsx.collections.Enumerable.entries(<span class="signature"></span>)														</div><div class="desc">Calls jsx.collections.Enumerable.collect.</div></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.map"></a>																				jsx.collections.Enumerable.map(<span class="signature">_block</span>)														</div><div class="desc">Calls jsx.collections.Enumerable.collect.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type"></td><td>							_block						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.find"></a>																				jsx.collections.Enumerable.find(<span class="signature">_block</span>)														</div><div class="desc">Calls jsx.collections.Enumerable.detect.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type"></td><td>							_block						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.member"></a>																				jsx.collections.Enumerable.member(<span class="signature">_object</span>)														</div><div class="desc">Calls jsx.collections.Enumerable.include.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type"></td><td>							_object						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.select"></a>																				jsx.collections.Enumerable.select(<span class="signature">_block</span>)														</div><div class="desc">Calls jsx.collections.Enumerable.findAll.</div><div class="detailHead">parameters</div><table class="params"><tr><td class="type"></td><td>							_block						</td><td></td></tr></table></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.getName"></a>																				jsx.collections.Enumerable.getName(<span class="signature"></span>)														</div></div><div class="section function"><div class="itemTitle"><a name="jsx.collections.Enumerable.getClass"></a><i></i>getClass(<span class="signature"></span>)																			</div></div><div class="sectionHead">Properties</div><a name="objects_summary"></a></div></div><div class="finePrint">	Generated by <a href="http://jsdoctoolkit.org/" target="_blank">JsDoc Toolkit</a> with 1.4.1 and  Spicey Template 1.0.3 on Mon, 28 Jul 2008 00:56:45 GMT	</div></body></html>