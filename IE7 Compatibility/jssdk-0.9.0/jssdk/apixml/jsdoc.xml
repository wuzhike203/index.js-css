<jsdoc>
	
	<file path="../jssdk/output/jsx/collections/AbstractCollection.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.AbstractCollection</code> is an abstract class used as a base implementation for <code>jsx.collections.Collection</code> classes.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.AbstractCollection</name>
				<alias>jsx.collections.AbstractCollection</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>iterator</name>
						<alias>jsx.collections.AbstractCollection.iterator</alias>
					</method>
				
					<method>
						<name>add</name>
						<alias>jsx.collections.AbstractCollection.add</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.AbstractCollection.remove</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.AbstractCollection.size</alias>
					</method>
				
					<method>
						<name>each</name>
						<alias>jsx.collections.AbstractCollection.each</alias>
					</method>
				
					<method>
						<name>addAll</name>
						<alias>jsx.collections.AbstractCollection.addAll</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.AbstractCollection.clear</alias>
					</method>
				
					<method>
						<name>contains</name>
						<alias>jsx.collections.AbstractCollection.contains</alias>
					</method>
				
					<method>
						<name>containsAll</name>
						<alias>jsx.collections.AbstractCollection.containsAll</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.AbstractCollection.isEmpty</alias>
					</method>
				
					<method>
						<name>removeAll</name>
						<alias>jsx.collections.AbstractCollection.removeAll</alias>
					</method>
				
					<method>
						<name>retainAll</name>
						<alias>jsx.collections.AbstractCollection.retainAll</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.collections.AbstractCollection.toString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.AbstractCollection.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>AbstractCollection</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>jsx.collections.AbstractCollection.iterator</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Iterate over the collection of elements.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>The function to execute for every element in the collection during iteration.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>add</name>
				<alias>jsx.collections.AbstractCollection.add</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Add an element to the end of collection. Returns whether the element was added to the collection.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>The element added to the collection</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.AbstractCollection.remove</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Removes the specified object from the collection. Return whether the object was removed.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.AbstractCollection.size</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Returns the size of the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>each</name>
				<alias>jsx.collections.AbstractCollection.each</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Required by the jsx.collections.Enumerable mixin. Calls <subclass>#iterator(_block) passing a {Object}value and {Number}index to the block.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block.</name>
						<desc>Parameters passed to the _block are <value>Object and <index>Number.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAll</name>
				<alias>jsx.collections.AbstractCollection.addAll</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Adds all the elements in the specified collecion to the end of the collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.AbstractCollection.clear</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Removes all elements in the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>contains</name>
				<alias>jsx.collections.AbstractCollection.contains</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Returns whether the specified object is contained in the collection.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>Parameter could be null. If there is a null element in the collection, true will be returned.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsAll</name>
				<alias>jsx.collections.AbstractCollection.containsAll</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Returns whether the elements in the specified collection exist in the collection.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.AbstractCollection.isEmpty</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Returns whether the collection is empty.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAll</name>
				<alias>jsx.collections.AbstractCollection.removeAll</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Removes all the elements in the specified collection from the current collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>retainAll</name>
				<alias>jsx.collections.AbstractCollection.retainAll</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Removes all elements in the current collection if they are not in the specified collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.collections.AbstractCollection.toString</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>Returns a String representation of a jsx.collections.Collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Stirng</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.AbstractCollection.getName</name>
				<alias>jsx.collections.AbstractCollection.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.AbstractCollection.getClass</alias>
				<memberof>jsx.collections.AbstractCollection</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/AbstractList.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.AbstractList</code> is an abstract class used as a base implementation for <code>jsx.collections.List</code> classes.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.AbstractList</name>
				<alias>jsx.collections.AbstractList</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.AbstractList.entryList</alias>
					</method>
				
					<method>
						<name>addAt</name>
						<alias>jsx.collections.AbstractList.addAt</alias>
					</method>
				
					<method>
						<name>get</name>
						<alias>jsx.collections.AbstractList.get</alias>
					</method>
				
					<method>
						<name>removeAt</name>
						<alias>jsx.collections.AbstractList.removeAt</alias>
					</method>
				
					<method>
						<name>set</name>
						<alias>jsx.collections.AbstractList.set</alias>
					</method>
				
					<method>
						<name>subList</name>
						<alias>jsx.collections.AbstractList.subList</alias>
					</method>
				
					<method>
						<name>iterator</name>
						<alias>jsx.collections.AbstractList.iterator</alias>
					</method>
				
					<method>
						<name>add</name>
						<alias>jsx.collections.AbstractList.add</alias>
					</method>
				
					<method>
						<name>addAllAt</name>
						<alias>jsx.collections.AbstractList.addAllAt</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.AbstractList.remove</alias>
					</method>
				
					<method>
						<name>indexOf</name>
						<alias>jsx.collections.AbstractList.indexOf</alias>
					</method>
				
					<method>
						<name>lastIndexOf</name>
						<alias>jsx.collections.AbstractList.lastIndexOf</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.collections.AbstractList.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.AbstractList.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>AbstractList</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.AbstractList.entryList</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns a list view of the entries.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAt</name>
				<alias>jsx.collections.AbstractList.addAt</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Inserts the specified element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>get</name>
				<alias>jsx.collections.AbstractList.get</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns the element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAt</name>
				<alias>jsx.collections.AbstractList.removeAt</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Removes and returns the element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>set</name>
				<alias>jsx.collections.AbstractList.set</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Replaces the element at the specified position in this list with the specified element. Returns the element previously at the specified position.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>subList</name>
				<alias>jsx.collections.AbstractList.subList</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_fromIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_toIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="reutrn">
						<type>jsx.collections.List</type>
						<desc></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>jsx.collections.AbstractList.iterator</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Iterate over the list of elements.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>The function to execute for every element in the list.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>add</name>
				<alias>jsx.collections.AbstractList.add</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Appends the specified element to the end of this list. Returns whether the element was added to the list.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAllAt</name>
				<alias>jsx.collections.AbstractList.addAllAt</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Inserts all of the elements in the specified collection into this list at the specified position.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>jsx.collections.Collections</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.AbstractList.remove</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Removes the specified object from the collection. Return whether the object was removed.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>indexOf</name>
				<alias>jsx.collections.AbstractList.indexOf</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns the index in this list of the first occurence of the specified element, or -1 if the list does not contain this element.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>lastIndexOf</name>
				<alias>jsx.collections.AbstractList.lastIndexOf</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns the index in this list of the last occurence of the specified element, or -1 if the list does not contain this element.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.collections.AbstractList.equals</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>Returns whether this List is equal to the specified jsx.collections.List.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.AbstractList.getName</name>
				<alias>jsx.collections.AbstractList.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.AbstractList.getClass</alias>
				<memberof>jsx.collections.AbstractList</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/AbstractMap.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.AbstractMap</code> is an abstract class used as a base implementation for <code>jsx.collections.Map</code> classes.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.AbstractMap</name>
				<alias>jsx.collections.AbstractMap</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.AbstractMap.entryList</alias>
					</method>
				
					<method>
						<name>put</name>
						<alias>jsx.collections.AbstractMap.put</alias>
					</method>
				
					<method>
						<name>each</name>
						<alias>jsx.collections.AbstractMap.each</alias>
					</method>
				
					<method>
						<name>iterator</name>
						<alias>jsx.collections.AbstractMap.iterator</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.AbstractMap.remove</alias>
					</method>
				
					<method>
						<name>putAll</name>
						<alias>jsx.collections.AbstractMap.putAll</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.AbstractMap.clear</alias>
					</method>
				
					<method>
						<name>get</name>
						<alias>jsx.collections.AbstractMap.get</alias>
					</method>
				
					<method>
						<name>keys</name>
						<alias>jsx.collections.AbstractMap.keys</alias>
					</method>
				
					<method>
						<name>values</name>
						<alias>jsx.collections.AbstractMap.values</alias>
					</method>
				
					<method>
						<name>containsKey</name>
						<alias>jsx.collections.AbstractMap.containsKey</alias>
					</method>
				
					<method>
						<name>containsValue</name>
						<alias>jsx.collections.AbstractMap.containsValue</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.AbstractMap.isEmpty</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.AbstractMap.size</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.collections.AbstractMap.toString</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.collections.AbstractMap.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.AbstractMap.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>AbstractMap</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.AbstractMap.entryList</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns a list view of the mappings contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>put</name>
				<alias>jsx.collections.AbstractMap.put</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Associates the specified value with the specified key in this map. Returns previous value associated with specified key, or null  if there was no mapping for key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>each</name>
				<alias>jsx.collections.AbstractMap.each</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Required by the jsx.collections.Enumerable mixin. Calls AbstractMap#iterator(_block) passing a {Object}value and {Object}key to the block.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block.</name>
						<desc>Parameters passed to the _block are <value>Object, <key>Object.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>jsx.collections.AbstractMap.iterator</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Iterate over the map of entries.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>The function to execute for every key-value mapping in the map.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.AbstractMap.remove</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Removes and returns the mapping for this key from this map if it is present.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>putAll</name>
				<alias>jsx.collections.AbstractMap.putAll</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Copies all of the mappings from the specified map to this map.</desc>
				<params>
					<param>
						<type>jsx.collections.Map</type>
						<name>_map</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.AbstractMap.clear</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Removes all mappings from this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>get</name>
				<alias>jsx.collections.AbstractMap.get</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns the value to which this map maps the specified key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>keys</name>
				<alias>jsx.collections.AbstractMap.keys</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns a List view of the keys contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collections.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>values</name>
				<alias>jsx.collections.AbstractMap.values</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns a List view of the values contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collections.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsKey</name>
				<alias>jsx.collections.AbstractMap.containsKey</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns true if this map contains a mapping for the specified key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type></type>
						<desc>{Boolean]</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsValue</name>
				<alias>jsx.collections.AbstractMap.containsValue</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns true if this map maps one or more keys to this value.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type></type>
						<desc>{Boolean]</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.AbstractMap.isEmpty</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns true if this map contains no key-value mappings.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.AbstractMap.size</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns the number of key-value mappings in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.collections.AbstractMap.toString</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns a String representation of a jsx.collections.Map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Stirng</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.collections.AbstractMap.equals</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>Returns whether this Map is equal to the Map List.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.AbstractMap.getName</name>
				<alias>jsx.collections.AbstractMap.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.AbstractMap.getClass</alias>
				<memberof>jsx.collections.AbstractMap</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/AbstractSet.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.AbstractSet</code> is an abstract class used as a base implementation for <code>jsx.collections.Set</code> classes.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.AbstractSet</name>
				<alias>jsx.collections.AbstractSet</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.AbstractSet.entryList</alias>
					</method>
				
					<method>
						<name>iterator</name>
						<alias>jsx.collections.AbstractSet.iterator</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.collections.AbstractSet.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.AbstractSet.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>AbstractSet</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.AbstractSet.entryList</alias>
				<memberof>jsx.collections.AbstractSet</memberof>
				<type></type>
				<desc>Returns a list view of the entries.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>jsx.collections.AbstractSet.iterator</alias>
				<memberof>jsx.collections.AbstractSet</memberof>
				<type></type>
				<desc>Iterate over the set of elements.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>The function to execute for every element in the set.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.collections.AbstractSet.equals</alias>
				<memberof>jsx.collections.AbstractSet</memberof>
				<type></type>
				<desc>Returns whether this Set is equal to the specified jsx.collections.Set.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.AbstractSet.getName</name>
				<alias>jsx.collections.AbstractSet.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.AbstractSet.getClass</alias>
				<memberof>jsx.collections.AbstractSet</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/ArrayList.js">
		<overview>
			<name></name>
			<desc>Resizable-array implementation of the jsx.collections.List interface.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.ArrayList</name>
				<alias>jsx.collections.ArrayList</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.ArrayList.entryList</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.ArrayList.size</alias>
					</method>
				
					<method>
						<name>addAt</name>
						<alias>jsx.collections.ArrayList.addAt</alias>
					</method>
				
					<method>
						<name>removeAt</name>
						<alias>jsx.collections.ArrayList.removeAt</alias>
					</method>
				
					<method>
						<name>get</name>
						<alias>jsx.collections.ArrayList.get</alias>
					</method>
				
					<method>
						<name>set</name>
						<alias>jsx.collections.ArrayList.set</alias>
					</method>
				
					<method>
						<name>subList</name>
						<alias>jsx.collections.ArrayList.subList</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.ArrayList.clear</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.ArrayList.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>ArrayList</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.ArrayList.entryList</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Returns a list view of the entries.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.ArrayList.size</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Returns the size of the list.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAt</name>
				<alias>jsx.collections.ArrayList.addAt</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Inserts the specified element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAt</name>
				<alias>jsx.collections.ArrayList.removeAt</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Removes and returns the element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>get</name>
				<alias>jsx.collections.ArrayList.get</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Returns the element at the specified position in this list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>set</name>
				<alias>jsx.collections.ArrayList.set</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Replaces the element at the specified position in this list with the specified element. Returns the element previously at the specified position.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>subList</name>
				<alias>jsx.collections.ArrayList.subList</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_fromIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_toIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="reutrn">
						<type>jsx.collections.List</type>
						<desc></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.ArrayList.clear</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>Removes all elements in the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.ArrayList.getName</name>
				<alias>jsx.collections.ArrayList.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.ArrayList.getClass</alias>
				<memberof>jsx.collections.ArrayList</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/ArrayStack.js">
		<overview>
			<name></name>
			<desc>An implementation of the Stack api that is based on an jsx.collections.ArrayList,</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.ArrayStack</name>
				<alias>jsx.collections.ArrayStack</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>empty</name>
						<alias>jsx.collections.ArrayStack.empty</alias>
					</method>
				
					<method>
						<name>peek</name>
						<alias>jsx.collections.ArrayStack.peek</alias>
					</method>
				
					<method>
						<name>pop</name>
						<alias>jsx.collections.ArrayStack.pop</alias>
					</method>
				
					<method>
						<name>push</name>
						<alias>jsx.collections.ArrayStack.push</alias>
					</method>
				
					<method>
						<name>search</name>
						<alias>jsx.collections.ArrayStack.search</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.ArrayStack.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>ArrayStack</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>empty</name>
				<alias>jsx.collections.ArrayStack.empty</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>Return true if this stack is currently empty..</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>peek</name>
				<alias>jsx.collections.ArrayStack.peek</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>Returns the top item off of this stack without removing it.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pop</name>
				<alias>jsx.collections.ArrayStack.pop</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>Pops the top item off of this stack and return it.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>push</name>
				<alias>jsx.collections.ArrayStack.push</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>Pushes a new item onto the top of this stack.</desc>
				<params>
					<param>
						<type>Object</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>search</name>
				<alias>jsx.collections.ArrayStack.search</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>Returns the one-based position of the distance from the top that the specified object exists on this stack, where the top-most element is considered to be at distance 1.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.ArrayStack.getName</name>
				<alias>jsx.collections.ArrayStack.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.ArrayStack.getClass</alias>
				<memberof>jsx.collections.ArrayStack</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/Collection.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.Collection</code> is an Interface class. Defines the methods for base collections.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.Collection</name>
				<alias>jsx.collections.Collection</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>add</name>
						<alias>jsx.collections.Collection.add</alias>
					</method>
				
					<method>
						<name>addAll</name>
						<alias>jsx.collections.Collection.addAll</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.Collection.clear</alias>
					</method>
				
					<method>
						<name>contains</name>
						<alias>jsx.collections.Collection.contains</alias>
					</method>
				
					<method>
						<name>containsAll</name>
						<alias>jsx.collections.Collection.containsAll</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.Collection.isEmpty</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.Collection.remove</alias>
					</method>
				
					<method>
						<name>removeAll</name>
						<alias>jsx.collections.Collection.removeAll</alias>
					</method>
				
					<method>
						<name>retainAll</name>
						<alias>jsx.collections.Collection.retainAll</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.Collection.size</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.Collection.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Collection</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>add</name>
				<alias>jsx.collections.Collection.add</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Add an element to the end of collection. Returns whether the element was added to the collection.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>The element added to the collection</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAll</name>
				<alias>jsx.collections.Collection.addAll</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Adds all the elements in the specified collecion to the end of the collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.Collection.clear</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Removes all elements in the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>contains</name>
				<alias>jsx.collections.Collection.contains</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Returns whether the specified object is contained in the collection.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>Parameter could be null. If there is a null element in the collection, true will be returned.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsAll</name>
				<alias>jsx.collections.Collection.containsAll</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Returns whether the elements in the specified collection exist in the collection.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.Collection.isEmpty</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Returns whether the collection is empty.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.Collection.remove</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Removes the specified object from the collection. Return whether the object was removed.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAll</name>
				<alias>jsx.collections.Collection.removeAll</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Removes all the elements in the specified collection from the current collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>retainAll</name>
				<alias>jsx.collections.Collection.retainAll</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Removes all elements in the current collection if they are not in the specified collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.Collection.size</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>Returns the size of the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Collection.getName</name>
				<alias>jsx.collections.Collection.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.Collection.getClass</alias>
				<memberof>jsx.collections.Collection</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/Enumerable.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.Enumerable</code> is a Mixin class. It provides a set of helper methods for any class that implements the each method.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.Enumerable</name>
				<alias>jsx.collections.Enumerable</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.Enumerable.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Enumerable</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.$break</name>
				<alias>jsx.collections.Enumerable.$break</alias>
				<memberof></memberof>
				<type></type>
				<desc>Use to break out of a loop within closure.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>var result = 0;</div>
	<div>var array = [1, 2, 3, 4, 5];</div>
	<div>array.each(function(_value)</div>
	<div>{</div>
	<div>	if(_value == 4)</div>
	<div>	{</div>
	<div>		array.$break();</div>
	<div>	}</div>
	<div>	result = _value;</div>
	<div>});</div>
	<div>this.assertEquals(3, result);</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.$continue</name>
				<alias>jsx.collections.Enumerable.$continue</alias>
				<memberof></memberof>
				<type></type>
				<desc>Use to continue a loop within closure.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>var result = 0;</div>
	<div>var array = [1, 2, 3, 4, 5];</div>
	<div>array.each(function(_value)</div>
	<div>{</div>
	<div>	if(_value != 4)</div>
	<div>	{</div>
	<div>		array.$continue();</div>
	<div>	}</div>
	<div>	result = _value;</div>
	<div>});</div>
	<div>this.assertEquals(4, result);</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.echo</name>
				<alias>jsx.collections.Enumerable.echo</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the same object as the specified object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.convertToArray</name>
				<alias>jsx.collections.Enumerable.convertToArray</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns an array of items from the specified iterable.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_iterable</name>
						<desc>If _iterable is null or undefined an empty array is returned. If _iterable.toArray exists, it will be used
 to convert. If _iterable.length exists, it is used to convert.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.all</name>
				<alias>jsx.collections.Enumerable.all</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes each element of a enumeration to the specifed block. Returns true if the block nevers returns false.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>If the given block is null, Enumerable#echo is used.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 3}); -> true</div>
	<div>["ant", "bear", "cat"].all(function(_value){return _value.length >= 4}); -> false</div>
	<div>[null, Object.NOT_DEF,,"", 99].all(); -> false</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.any</name>
				<alias>jsx.collections.Enumerable.any</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes each element of a enumeration to the specifed block. Returns true if the block returns at least one true.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>If the given block is null, Enumerable#echo is used.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 3}); -> true</div>
	<div>["ant", "bear", "cat"].any(function(_value){return _value.length >= 4}); -> true</div>
	<div>[null, Object.NOT_DEF,,"", 99].any(); -> true</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.collect</name>
				<alias>jsx.collections.Enumerable.collect</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns a new array of results from the specifed block.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>[1, 2, 3, 4].collect(function(_value){return _value*_value}); -> [1, 4, 9, 16]</div>
	<div>[1, 2, 3, 4].collect(function(_value){return "cat"}); -> ["cat", "cat", "cat", "cat"]</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.detect</name>
				<alias>jsx.collections.Enumerable.detect</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes each element in the enumeration to the specified block. Returns the first for which block is not false.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>Number(1).toArray(10).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> undefined</div>
	<div>Number(1).toArray(100).detect(function(_value){return _value % 5 == 0 && _value % 7 == 0}); -> 35</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.findAll</name>
				<alias>jsx.collections.Enumerable.findAll</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes each element in the enumeration to the specified block. Returns a new array of elements where the block returns true.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>Number(1).toArray(10).findAll(function(_value){return _value % 3 == 0}); -> [3, 6, 9]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.grep</name>
				<alias>jsx.collections.Enumerable.grep</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes each element in the enumeration to the specified block. The specified regexp pattern is used to test against the first object's <code>toString</code>.
 If the test is true, the specified block is called with parameters from the <code>each</code> method, and the results from the block
 are added to the array.</desc>
				<params>
					<param>
						<type>RegExp</type>
						<name>_pattern</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Mat/); -> ["Matthew", "Mathew", "Matt", "Mat"]</div>
	<div>["Matthew", "Mathew", "Matt", "Mat"].grep(/Matt/); -> ["Matthew", "Matt"]</div>
	<div>[1, 2, 3, 4, 5].grep(/3|4/); -> [3, 4]</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.include</name>
				<alias>jsx.collections.Enumerable.include</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns whether the specified object exists in the enumerable.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["Matthew", "Mathew", "Matt", "Mat"].include("Mat"); -> true</div>
	<div>["Matthew", "Mathew", "Matt", "Mat"].include("Matt"); -> true</div>
	<div>["Matthew", "Mathew", "Matt", "Mat"].include("Sam"); -> false</div>
	<div>[1, 2, 3, 4, 5].include(3); -> true</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.inject</name>
				<alias>jsx.collections.Enumerable.inject</alias>
				<memberof></memberof>
				<type></type>
				<desc>Combines the elements of enumeration by applying the block to an accumulator value (memo) and each element in turn.
 At each step, memo is set to the value returned by the block.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_memo</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>[5, 6, 7, 8, 9, 10].inject(0, function(_memo, _value){return _memo + _value}); -> 45</div>
	<div>[5, 6, 7, 8, 9, 10].inject(1, function(_memo, _value){return _memo * _value}); -> 151200</div>
	<div>["cat", "sheep", "bear"].inject("", function(_memo, _value){return _memo.length > _value.length ? _memo : _value}); -> "sheep"</div>
	<div>["cat", "sheep", "bear"].inject(0, function(_memo, _value){return _memo >= _value.length ? _memo : _value.length}); -> 5</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.invoke</name>
				<alias>jsx.collections.Enumerable.invoke</alias>
				<memberof></memberof>
				<type></type>
				<desc>Invokes the specified method for each element in the enumeration. Returns an array of results from the invocation of the specified method.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_method</name>
						<desc>The name of the method to call on the object. Any parameter after the method name will act as parameters to the method call.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]].invoke("join", "-"); -> ["1", "1-2", "1-2-3", "1-2-3-4", "1-2-3-4-5"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.max</name>
				<alias>jsx.collections.Enumerable.max</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the max element in the enumeration using the specifed block to return a comparable value -1, 0, 1.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["albatross", "dog", "horse"].max(); -> "horse"</div>
	<div>["albatross", "dog", "horse"].max(function(a, _index, b){return a.length<b.length?-1:a.length>b.length?1:0}); -> "albatross"</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.min</name>
				<alias>jsx.collections.Enumerable.min</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the min element in the enumeration using the specifed block to return a comparable value -1, 0, 1.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["albatross", "dog", "horse"].max(); -> "albatross"</div>
	<div>["albatross", "dog", "horse"].min(function(a, _index, b){return a.length<b.length?-1:a.length>b.length?1:0}); -> "dog"</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.partition</name>
				<alias>jsx.collections.Enumerable.partition</alias>
				<memberof></memberof>
				<type></type>
				<desc>Uses the specified block to result in true or false and split the results.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc>[0] = true objects, [1] = false objects</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>[1, 2, 3, 4, 5, 6].partition(function(_value){ return (_value%2 == 0) }); -> [[2,4,6],[1,3,5]]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.pluck</name>
				<alias>jsx.collections.Enumerable.pluck</alias>
				<memberof></memberof>
				<type></type>
				<desc>Passes the specified property to each element in the enumeration and using the first object to evaluate the property. Returns a new
 array element containing the value of object[property].</desc>
				<params>
					<param>
						<type>String</type>
						<name>_property</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>[[1], [1,2], [1,2,3], [1,2,3,4]].pluck("length"); -> [1,2,3,4]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.reject</name>
				<alias>jsx.collections.Enumerable.reject</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns a new array where the specifed block results in false.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>Number(1).toArray(10).reject(function(_value){return (_value%3==0)}); -> [1, 2, 4, 5, 7, 8, 10]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.sortBy</name>
				<alias>jsx.collections.Enumerable.sortBy</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns a new array using the specified block to return a comparable value.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["rhea", "kea", "flea"].sortBy(); -> ["flea", "kea", "rhea"]</div>
	<div>Number(1).toArray(10).sortBy(function(_value, _index){return -1 * _value}); -> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</div>
	<div>["apple", "pear", "fig"].sortBy(function(_value, _index){return _value.length}); -> ["fig", "pear", "apple"]</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.zip</name>
				<alias>jsx.collections.Enumerable.zip</alias>
				<memberof></memberof>
				<type></type>
				<desc>Converts any arguments to arrays, then merges elements of enum with corresponding elements from each argument.
 This generates a sequence of enum#size n-element arrays, where n is one more that the count of arguments.
 If the size of any argument is less than enum#size, nil values are supplied. If a block given, it is invoked for
 each output array, otherwise an array of arrays is returned.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>[1, 2, 3].zip([4, 5, 6], [7, 8, 9]); -> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</div>
	<div>["cat", "dog"].zip([1]); -> [["cat", 1], ["dog", null]]</div>
	<div>[1, 2, 3].zip(); -> [[1], [2], [3]]</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.toArray</name>
				<alias>jsx.collections.Enumerable.toArray</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.collect.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.entries</name>
				<alias>jsx.collections.Enumerable.entries</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.collect.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.map</name>
				<alias>jsx.collections.Enumerable.map</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.collect.</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.find</name>
				<alias>jsx.collections.Enumerable.find</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.detect.</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.member</name>
				<alias>jsx.collections.Enumerable.member</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.include.</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.select</name>
				<alias>jsx.collections.Enumerable.select</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls jsx.collections.Enumerable.findAll.</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Enumerable.getName</name>
				<alias>jsx.collections.Enumerable.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.Enumerable.getClass</alias>
				<memberof>jsx.collections.Enumerable</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/HashMap.js">
		<overview>
			<name></name>
			<desc>Implementation of the Map interface.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.HashMap</name>
				<alias>jsx.collections.HashMap</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.HashMap.entryList</alias>
					</method>
				
					<method>
						<name>put</name>
						<alias>jsx.collections.HashMap.put</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.HashMap.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>HashMap</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.HashMap.entryList</alias>
				<memberof>jsx.collections.HashMap</memberof>
				<type></type>
				<desc>Returns a list view of the entries.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>put</name>
				<alias>jsx.collections.HashMap.put</alias>
				<memberof>jsx.collections.HashMap</memberof>
				<type></type>
				<desc>Associates the specified value with the specified key in this map.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.HashMap.getName</name>
				<alias>jsx.collections.HashMap.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.HashMap.getClass</alias>
				<memberof>jsx.collections.HashMap</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/HashSet.js">
		<overview>
			<name></name>
			<desc>This class implements the Set interface, backed by a jsx.collections.HashMap instance.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.HashSet</name>
				<alias>jsx.collections.HashSet</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>entryList</name>
						<alias>jsx.collections.HashSet.entryList</alias>
					</method>
				
					<method>
						<name>add</name>
						<alias>jsx.collections.HashSet.add</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.HashSet.clear</alias>
					</method>
				
					<method>
						<name>contains</name>
						<alias>jsx.collections.HashSet.contains</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.HashSet.isEmpty</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.HashSet.remove</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.HashSet.size</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.HashSet.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>HashSet</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entryList</name>
				<alias>jsx.collections.HashSet.entryList</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Returns a list view of the entries.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.List</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>add</name>
				<alias>jsx.collections.HashSet.add</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Adds the specified element to this set if it is not already present.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.HashSet.clear</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Removes all of the elements from this set.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>contains</name>
				<alias>jsx.collections.HashSet.contains</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Returns true if this set contains the specified element.</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.HashSet.isEmpty</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Returns true if this set contains no elements.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.HashSet.remove</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Removes the specified element from this set if it is present.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Bolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.HashSet.size</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>Returns the number of elements in this set.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.HashSet.getName</name>
				<alias>jsx.collections.HashSet.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.HashSet.getClass</alias>
				<memberof>jsx.collections.HashSet</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/Iterable.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.Iterable</code> is an Interface class. Defines the method used to iterate over the collection.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.Iterable</name>
				<alias>jsx.collections.Iterable</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>iterator</name>
						<alias>jsx.collections.Iterable.iterator</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.Iterable.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Iterable</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>jsx.collections.Iterable.iterator</alias>
				<memberof>jsx.collections.Iterable</memberof>
				<type></type>
				<desc>Iterate over the collection of elements.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>The function to execute for every element in the collection.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Iterable.getName</name>
				<alias>jsx.collections.Iterable.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.Iterable.getClass</alias>
				<memberof>jsx.collections.Iterable</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/List.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.List</code> is an Interface class. Defines the methods for base lists.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.List</name>
				<alias>jsx.collections.List</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>addAt</name>
						<alias>jsx.collections.List.addAt</alias>
					</method>
				
					<method>
						<name>addAllAt</name>
						<alias>jsx.collections.List.addAllAt</alias>
					</method>
				
					<method>
						<name>get</name>
						<alias>jsx.collections.List.get</alias>
					</method>
				
					<method>
						<name>indexOf</name>
						<alias>jsx.collections.List.indexOf</alias>
					</method>
				
					<method>
						<name>lastIndexOf</name>
						<alias>jsx.collections.List.lastIndexOf</alias>
					</method>
				
					<method>
						<name>removeAt</name>
						<alias>jsx.collections.List.removeAt</alias>
					</method>
				
					<method>
						<name>set</name>
						<alias>jsx.collections.List.set</alias>
					</method>
				
					<method>
						<name>subList</name>
						<alias>jsx.collections.List.subList</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.List.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>List</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAt</name>
				<alias>jsx.collections.List.addAt</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Add an element to the list at a specified index. Returns whether the element was added into the list.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc>Number must be >= 0 and < size</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAllAt</name>
				<alias>jsx.collections.List.addAllAt</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Add all the elements in the specified collection starting at the specified index. Returns whether the current list was modified.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc>Number must be >= 0 and < the size.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>get</name>
				<alias>jsx.collections.List.get</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Returns an element from the list at the specifed index.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>indexOf</name>
				<alias>jsx.collections.List.indexOf</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Returns the index of the first occurance of the specified object. If the specified object does not exist in the collection, -1 will be returned.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type></type>
						<desc>{Number] -1 if the object was not found, otherwise the number will be >= 0 and < the size.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>lastIndexOf</name>
				<alias>jsx.collections.List.lastIndexOf</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Returns the index of the last occurance of the specified object. If the specified object does not exist in the collection, -1 will be returned.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type></type>
						<desc>{Number] -1 if the object was not found, otherwise the number will be >= 0 and < the size.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAt</name>
				<alias>jsx.collections.List.removeAt</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Removes and returns the element from the collection at the specifed index.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>set</name>
				<alias>jsx.collections.List.set</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Assigns the specified object to the collection at the specified index. If an object is already living at the index, it is replaced.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>subList</name>
				<alias>jsx.collections.List.subList</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_fromIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_toIndex</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.List.getName</name>
				<alias>jsx.collections.List.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.List.getClass</alias>
				<memberof>jsx.collections.List</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/Map.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.Map</code> is an Interface class. Defines the methods for base map. A map is an object that maps keys to values.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.Map</name>
				<alias>jsx.collections.Map</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>clear</name>
						<alias>jsx.collections.Map.clear</alias>
					</method>
				
					<method>
						<name>containsKey</name>
						<alias>jsx.collections.Map.containsKey</alias>
					</method>
				
					<method>
						<name>containsValue</name>
						<alias>jsx.collections.Map.containsValue</alias>
					</method>
				
					<method>
						<name>entrySet</name>
						<alias>jsx.collections.Map.entrySet</alias>
					</method>
				
					<method>
						<name>get</name>
						<alias>jsx.collections.Map.get</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.Map.isEmpty</alias>
					</method>
				
					<method>
						<name>keySet</name>
						<alias>jsx.collections.Map.keySet</alias>
					</method>
				
					<method>
						<name>put</name>
						<alias>jsx.collections.Map.put</alias>
					</method>
				
					<method>
						<name>putAll</name>
						<alias>jsx.collections.Map.putAll</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.Map.remove</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.Map.size</alias>
					</method>
				
					<method>
						<name>values</name>
						<alias>jsx.collections.Map.values</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.Map.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Map</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.Map.clear</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Clears all the keys and values in the map</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsKey</name>
				<alias>jsx.collections.Map.containsKey</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns whether the map contains the specified key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsValue</name>
				<alias>jsx.collections.Map.containsValue</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns whether the map contains the specified value.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>entrySet</name>
				<alias>jsx.collections.Map.entrySet</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns a set view of the mappings contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.Set</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>get</name>
				<alias>jsx.collections.Map.get</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns the value to which this map maps the specified key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.Map.isEmpty</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns whether if this map contains no key-value mappings.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>keySet</name>
				<alias>jsx.collections.Map.keySet</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns a set view of the keys contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.Set</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>put</name>
				<alias>jsx.collections.Map.put</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Associates the specified value with the specified key in this map. Returns previous value associated with specified key, or null  if there was no mapping for key.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>putAll</name>
				<alias>jsx.collections.Map.putAll</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Copies all of the mappings from the specified map to this map.</desc>
				<params>
					<param>
						<type>jsx.collections.Map</type>
						<name>_map</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.Map.remove</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Removes and returns the mapping for this key from this map if it is present.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_key</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.Map.size</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns the number of key-value mappings in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>values</name>
				<alias>jsx.collections.Map.values</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>Returns a collection view of the values contained in this map.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.collection.Collection</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Map.getName</name>
				<alias>jsx.collections.Map.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.Map.getClass</alias>
				<memberof>jsx.collections.Map</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/Set.js">
		<overview>
			<name></name>
			<desc><code>jsx.collections.Set</code> is an Interface class. Defines the methods for base set. A set is a collection that contains no duplicate elements.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.Set</name>
				<alias>jsx.collections.Set</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>add</name>
						<alias>jsx.collections.Set.add</alias>
					</method>
				
					<method>
						<name>addAll</name>
						<alias>jsx.collections.Set.addAll</alias>
					</method>
				
					<method>
						<name>clear</name>
						<alias>jsx.collections.Set.clear</alias>
					</method>
				
					<method>
						<name>contains</name>
						<alias>jsx.collections.Set.contains</alias>
					</method>
				
					<method>
						<name>containsAll</name>
						<alias>jsx.collections.Set.containsAll</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>jsx.collections.Set.isEmpty</alias>
					</method>
				
					<method>
						<name>remove</name>
						<alias>jsx.collections.Set.remove</alias>
					</method>
				
					<method>
						<name>removeAll</name>
						<alias>jsx.collections.Set.removeAll</alias>
					</method>
				
					<method>
						<name>retainAll</name>
						<alias>jsx.collections.Set.retainAll</alias>
					</method>
				
					<method>
						<name>size</name>
						<alias>jsx.collections.Set.size</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.Set.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Set</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>add</name>
				<alias>jsx.collections.Set.add</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Adds the specified element to this set if it is not already present. Returns true if the element was not present before adding.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAll</name>
				<alias>jsx.collections.Set.addAll</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Adds all of the elements in the specified collection to this set if they're not already present. Returns whether the this set was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>clear</name>
				<alias>jsx.collections.Set.clear</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Removes all elements in the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>contains</name>
				<alias>jsx.collections.Set.contains</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Returns whether the specified object is contained in the collection.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>Parameter could be null. If there is a null element in the collection, true will be returned.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>containsAll</name>
				<alias>jsx.collections.Set.containsAll</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Returns whether the elements in the specified collection exist in the collection.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>jsx.collections.Set.isEmpty</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Returns whether the collection is empty.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>remove</name>
				<alias>jsx.collections.Set.remove</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Removes the specified object from the collection. Return whether the object was removed.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAll</name>
				<alias>jsx.collections.Set.removeAll</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Removes all the elements in the specified collection from the current collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>jsx.collections.Collection</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>retainAll</name>
				<alias>jsx.collections.Set.retainAll</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Removes all elements in the current collection if they are not in the specified collection. Returns whether the current collection was modified.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_collection</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>size</name>
				<alias>jsx.collections.Set.size</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>Returns the size of the collection.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.Set.getName</name>
				<alias>jsx.collections.Set.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.Set.getClass</alias>
				<memberof>jsx.collections.Set</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/ComparatorUtil.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.ComparatorUtil</name>
				<alias>jsx.collections.comparators.ComparatorUtil</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.ComparatorUtil.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>ComparatorUtil</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.ComparatorUtil.compare</name>
				<alias>jsx.collections.comparators.ComparatorUtil.compare</alias>
				<memberof></memberof>
				<type></type>
				<desc>Used as a base compare method to compare two objects.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.ComparatorUtil.getName</name>
				<alias>jsx.collections.comparators.ComparatorUtil.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.ComparatorUtil.getClass</alias>
				<memberof>jsx.collections.comparators.ComparatorUtil</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/CurrencyComparator.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.CurrencyComparator</name>
				<alias>jsx.collections.comparators.CurrencyComparator</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>compare</name>
						<alias>jsx.collections.comparators.CurrencyComparator.compare</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.CurrencyComparator.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>CurrencyComparator</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compare</name>
				<alias>jsx.collections.comparators.CurrencyComparator.compare</alias>
				<memberof>jsx.collections.comparators.CurrencyComparator</memberof>
				<type></type>
				<desc>Comparator function used to compare currency values.</desc>
				<params>
					<param>
						<type></type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.CurrencyComparator.getName</name>
				<alias>jsx.collections.comparators.CurrencyComparator.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.CurrencyComparator.getClass</alias>
				<memberof>jsx.collections.comparators.CurrencyComparator</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/CurrencyComparatorUtil.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.CurrencyComparatorUtil</name>
				<alias>jsx.collections.comparators.CurrencyComparatorUtil</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.CurrencyComparatorUtil.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>CurrencyComparatorUtil</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.CurrencyComparatorUtil.compare</name>
				<alias>jsx.collections.comparators.CurrencyComparatorUtil.compare</alias>
				<memberof></memberof>
				<type></type>
				<desc>Used by the jsx.collections.comparators.CurrencyComparator to compare currency values.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.CurrencyComparatorUtil.getName</name>
				<alias>jsx.collections.comparators.CurrencyComparatorUtil.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.CurrencyComparatorUtil.getClass</alias>
				<memberof>jsx.collections.comparators.CurrencyComparatorUtil</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/DateComparator.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.DateComparator</name>
				<alias>jsx.collections.comparators.DateComparator</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>compare</name>
						<alias>jsx.collections.comparators.DateComparator.compare</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.DateComparator.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DateComparator</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compare</name>
				<alias>jsx.collections.comparators.DateComparator.compare</alias>
				<memberof>jsx.collections.comparators.DateComparator</memberof>
				<type></type>
				<desc>Comparator function used to compare date values.</desc>
				<params>
					<param>
						<type></type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.DateComparator.getName</name>
				<alias>jsx.collections.comparators.DateComparator.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.DateComparator.getClass</alias>
				<memberof>jsx.collections.comparators.DateComparator</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/DateComparatorUtil.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.DateComparatorUtil</name>
				<alias>jsx.collections.comparators.DateComparatorUtil</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.DateComparatorUtil.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DateComparatorUtil</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.DateComparatorUtil.compare</name>
				<alias>jsx.collections.comparators.DateComparatorUtil.compare</alias>
				<memberof></memberof>
				<type></type>
				<desc>Used by the jsx.collections.comparators.DateComparator to compare date values.</desc>
				<params>
					<param>
						<type>Date</type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Date</type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.DateComparatorUtil.getName</name>
				<alias>jsx.collections.comparators.DateComparatorUtil.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.DateComparatorUtil.getClass</alias>
				<memberof>jsx.collections.comparators.DateComparatorUtil</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/NumericComparator.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.NumericComparator</name>
				<alias>jsx.collections.comparators.NumericComparator</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>compare</name>
						<alias>jsx.collections.comparators.NumericComparator.compare</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.NumericComparator.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>NumericComparator</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compare</name>
				<alias>jsx.collections.comparators.NumericComparator.compare</alias>
				<memberof>jsx.collections.comparators.NumericComparator</memberof>
				<type></type>
				<desc>Comparator function used to compare number values.</desc>
				<params>
					<param>
						<type></type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.NumericComparator.getName</name>
				<alias>jsx.collections.comparators.NumericComparator.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.NumericComparator.getClass</alias>
				<memberof>jsx.collections.comparators.NumericComparator</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/NumericComparatorUtil.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.NumericComparatorUtil</name>
				<alias>jsx.collections.comparators.NumericComparatorUtil</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.NumericComparatorUtil.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>NumericComparatorUtil</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.NumericComparatorUtil.compare</name>
				<alias>jsx.collections.comparators.NumericComparatorUtil.compare</alias>
				<memberof></memberof>
				<type></type>
				<desc>Used by the jsx.collections.comparators.NumberComparator to compare number values.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.NumericComparatorUtil.getName</name>
				<alias>jsx.collections.comparators.NumericComparatorUtil.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.NumericComparatorUtil.getClass</alias>
				<memberof>jsx.collections.comparators.NumericComparatorUtil</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/StringComparator.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.StringComparator</name>
				<alias>jsx.collections.comparators.StringComparator</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_insensitiveComparator</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>compare</name>
						<alias>jsx.collections.comparators.StringComparator.compare</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.StringComparator.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>StringComparator</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compare</name>
				<alias>jsx.collections.comparators.StringComparator.compare</alias>
				<memberof>jsx.collections.comparators.StringComparator</memberof>
				<type></type>
				<desc>Comparator function used to compare string values.</desc>
				<params>
					<param>
						<type></type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.StringComparator.getName</name>
				<alias>jsx.collections.comparators.StringComparator.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.StringComparator.getClass</alias>
				<memberof>jsx.collections.comparators.StringComparator</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/collections/comparators/StringComparatorUtil.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.collections.comparators.StringComparatorUtil</name>
				<alias>jsx.collections.comparators.StringComparatorUtil</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.collections.comparators.StringComparatorUtil.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>StringComparatorUtil</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.StringComparatorUtil.compare</name>
				<alias>jsx.collections.comparators.StringComparatorUtil.compare</alias>
				<memberof></memberof>
				<type></type>
				<desc>Used by the jsx.collections.comparators.StringComparator to compare string values.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_objectA</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_objectB</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_reversal</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_insensitiveComparator</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.collections.comparators.StringComparatorUtil.getName</name>
				<alias>jsx.collections.comparators.StringComparatorUtil.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.collections.comparators.StringComparatorUtil.getClass</alias>
				<memberof>jsx.collections.comparators.StringComparatorUtil</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/Element.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.Element</name>
				<alias>jsx.dom.Element</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.dom.Element.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Element</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getElement</name>
				<alias>jsx.dom.Element.getElement</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_elementId</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_ownerDocument</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getInnerText</name>
				<alias>jsx.dom.Element.getInnerText</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_element</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getParent</name>
				<alias>jsx.dom.Element.getParent</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_element</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_parentTagName</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_pattern</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getChild</name>
				<alias>jsx.dom.Element.getChild</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_element</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_childTagName</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_pattern</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getPosition</name>
				<alias>jsx.dom.Element.getPosition</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_element</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Element.getName</name>
				<alias>jsx.dom.Element.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.Element.getClass</alias>
				<memberof>jsx.dom.Element</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/Node.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.Node</name>
				<alias>jsx.dom.Node</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.dom.Node.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Node</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.Node.getName</name>
				<alias>jsx.dom.Node.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.Node.getClass</alias>
				<memberof>jsx.dom.Node</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/dockable/DockContainerDefault.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.dockable.DockContainerDefault</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>mousedown</name>
						<alias>jsx.dom.behavior.dockable.DockContainerDefault.mousedown</alias>
					</method>
				
					<method>
						<name>mousemove</name>
						<alias>jsx.dom.behavior.dockable.DockContainerDefault.mousemove</alias>
					</method>
				
					<method>
						<name>mouseup</name>
						<alias>jsx.dom.behavior.dockable.DockContainerDefault.mouseup</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.dockable.DockContainerDefault.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DockContainerDefault</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousedown</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault.mousedown</alias>
				<memberof>jsx.dom.behavior.dockable.DockContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousemove</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault.mousemove</alias>
				<memberof>jsx.dom.behavior.dockable.DockContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mouseup</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault.mouseup</alias>
				<memberof>jsx.dom.behavior.dockable.DockContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockContainerDefault.getName</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.dockable.DockContainerDefault.getClass</alias>
				<memberof>jsx.dom.behavior.dockable.DockContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/dockable/DockTableDefault.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.dockable.DockTableDefault</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>mousedown</name>
						<alias>jsx.dom.behavior.dockable.DockTableDefault.mousedown</alias>
					</method>
				
					<method>
						<name>mousemove</name>
						<alias>jsx.dom.behavior.dockable.DockTableDefault.mousemove</alias>
					</method>
				
					<method>
						<name>mouseup</name>
						<alias>jsx.dom.behavior.dockable.DockTableDefault.mouseup</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.dockable.DockTableDefault.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DockTableDefault</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousedown</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault.mousedown</alias>
				<memberof>jsx.dom.behavior.dockable.DockTableDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousemove</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault.mousemove</alias>
				<memberof>jsx.dom.behavior.dockable.DockTableDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mouseup</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault.mouseup</alias>
				<memberof>jsx.dom.behavior.dockable.DockTableDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockTableDefault.getName</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.dockable.DockTableDefault.getClass</alias>
				<memberof>jsx.dom.behavior.dockable.DockTableDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/dockable/DockableContainer.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.dockable.DockableContainer</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.dockable.DockableContainer.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Dockable</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.initDockable</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.initDockable</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.setBoxes</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.setBoxes</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.mousedown_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.mousedown_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_box</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.mousemove_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.mousemove_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.mouseup_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.mouseup_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.moveBox</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.moveBox</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_clientX</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_clientY</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_box</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableContainer.getName</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.dockable.DockableContainer.getClass</alias>
				<memberof>jsx.dom.behavior.dockable.DockableContainer</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/dockable/DockableTable.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.dockable.DockableTable</name>
				<alias>jsx.dom.behavior.dockable.DockableTable</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.dockable.DockableTable.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DockableTable</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.initDockable</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.initDockable</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.setColumnsAndBoxes</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.setColumnsAndBoxes</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.mousedown_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.mousedown_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_box</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.mousemove_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.mousemove_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.mouseup_mixin</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.mouseup_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.moveBox</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.moveBox</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_clientX</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_clientY</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_box</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.dockable.DockableTable.getName</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.dockable.DockableTable.getClass</alias>
				<memberof>jsx.dom.behavior.dockable.DockableTable</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/draggable/DragContainerDefault.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.draggable.DragContainerDefault</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>mousedown</name>
						<alias>jsx.dom.behavior.draggable.DragContainerDefault.mousedown</alias>
					</method>
				
					<method>
						<name>mousemove</name>
						<alias>jsx.dom.behavior.draggable.DragContainerDefault.mousemove</alias>
					</method>
				
					<method>
						<name>mouseup</name>
						<alias>jsx.dom.behavior.draggable.DragContainerDefault.mouseup</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.draggable.DragContainerDefault.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DragContainerDefault</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousedown</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault.mousedown</alias>
				<memberof>jsx.dom.behavior.draggable.DragContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousemove</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault.mousemove</alias>
				<memberof>jsx.dom.behavior.draggable.DragContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mouseup</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault.mouseup</alias>
				<memberof>jsx.dom.behavior.draggable.DragContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.DragContainerDefault.getName</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.draggable.DragContainerDefault.getClass</alias>
				<memberof>jsx.dom.behavior.draggable.DragContainerDefault</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/dom/behavior/draggable/Draggable.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.dom.behavior.draggable.Draggable</name>
				<alias>jsx.dom.behavior.draggable.Draggable</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.dom.behavior.draggable.Draggable.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Draggable</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.Draggable.initDraggable</name>
				<alias>jsx.dom.behavior.draggable.Draggable.initDraggable</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.Draggable.mousedown_mixin</name>
				<alias>jsx.dom.behavior.draggable.Draggable.mousedown_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.Draggable.mousemove_mixin</name>
				<alias>jsx.dom.behavior.draggable.Draggable.mousemove_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.Draggable.mouseup_mixin</name>
				<alias>jsx.dom.behavior.draggable.Draggable.mouseup_mixin</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_nativeEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.dom.behavior.draggable.Draggable.getName</name>
				<alias>jsx.dom.behavior.draggable.Draggable.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.dom.behavior.draggable.Draggable.getClass</alias>
				<memberof>jsx.dom.behavior.draggable.Draggable</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/event/Event.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.event.Event</name>
				<alias>jsx.event.Event</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Event</type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>getEvent</name>
						<alias>jsx.event.Event.getEvent</alias>
					</method>
				
					<method>
						<name>getType</name>
						<alias>jsx.event.Event.getType</alias>
					</method>
				
					<method>
						<name>getObject</name>
						<alias>jsx.event.Event.getObject</alias>
					</method>
				
					<method>
						<name>isControlKeyDown</name>
						<alias>jsx.event.Event.isControlKeyDown</alias>
					</method>
				
					<method>
						<name>isLeftClick</name>
						<alias>jsx.event.Event.isLeftClick</alias>
					</method>
				
					<method>
						<name>getPointerX</name>
						<alias>jsx.event.Event.getPointerX</alias>
					</method>
				
					<method>
						<name>getPointerY</name>
						<alias>jsx.event.Event.getPointerY</alias>
					</method>
				
					<method>
						<name>stopEvent</name>
						<alias>jsx.event.Event.stopEvent</alias>
					</method>
				
					<method>
						<name>stopDefault</name>
						<alias>jsx.event.Event.stopDefault</alias>
					</method>
				
					<method>
						<name>stopSelecting</name>
						<alias>jsx.event.Event.stopSelecting</alias>
					</method>
				
					<method>
						<name>startSelecting</name>
						<alias>jsx.event.Event.startSelecting</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.event.Event.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Event</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getEvent</name>
				<alias>jsx.event.Event.getEvent</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getType</name>
				<alias>jsx.event.Event.getType</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getObject</name>
				<alias>jsx.event.Event.getObject</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isControlKeyDown</name>
				<alias>jsx.event.Event.isControlKeyDown</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isLeftClick</name>
				<alias>jsx.event.Event.isLeftClick</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getPointerX</name>
				<alias>jsx.event.Event.getPointerX</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getPointerY</name>
				<alias>jsx.event.Event.getPointerY</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stopEvent</name>
				<alias>jsx.event.Event.stopEvent</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stopDefault</name>
				<alias>jsx.event.Event.stopDefault</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stopSelecting</name>
				<alias>jsx.event.Event.stopSelecting</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startSelecting</name>
				<alias>jsx.event.Event.startSelecting</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.event.Event.getName</name>
				<alias>jsx.event.Event.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.event.Event.getClass</alias>
				<memberof>jsx.event.Event</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/event/EventDispatcher.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.event.EventDispatcher</name>
				<alias>jsx.event.EventDispatcher</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_method</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Boolean</type>
						<name>_useDomEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>addListener</name>
						<alias>jsx.event.EventDispatcher.addListener</alias>
					</method>
				
					<method>
						<name>removeListener</name>
						<alias>jsx.event.EventDispatcher.removeListener</alias>
					</method>
				
					<method>
						<name>removeListeners</name>
						<alias>jsx.event.EventDispatcher.removeListeners</alias>
					</method>
				
					<method>
						<name>notify</name>
						<alias>jsx.event.EventDispatcher.notify</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.event.EventDispatcher.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>EventDispatcher</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addListener</name>
				<alias>jsx.event.EventDispatcher.addListener</alias>
				<memberof>jsx.event.EventDispatcher</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_capture</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeListener</name>
				<alias>jsx.event.EventDispatcher.removeListener</alias>
				<memberof>jsx.event.EventDispatcher</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_capture</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeListeners</name>
				<alias>jsx.event.EventDispatcher.removeListeners</alias>
				<memberof>jsx.event.EventDispatcher</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>notify</name>
				<alias>jsx.event.EventDispatcher.notify</alias>
				<memberof>jsx.event.EventDispatcher</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.event.EventDispatcher.dispatch</name>
				<alias>jsx.event.EventDispatcher.dispatch</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.event.EventDispatcher.clearListeners</name>
				<alias>jsx.event.EventDispatcher.clearListeners</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.event.EventDispatcher.getName</name>
				<alias>jsx.event.EventDispatcher.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.event.EventDispatcher.getClass</alias>
				<memberof>jsx.event.EventDispatcher</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/io/http/DefaultRequest.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.io.http.DefaultRequest</name>
				<alias>jsx.io.http.DefaultRequest</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.io.http.DefaultRequest.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DefaultRequest</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.DefaultRequest.getName</name>
				<alias>jsx.io.http.DefaultRequest.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.io.http.DefaultRequest.getClass</alias>
				<memberof>jsx.io.http.DefaultRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/io/http/DefaultResponse.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.io.http.DefaultResponse</name>
				<alias>jsx.io.http.DefaultResponse</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.io.http.DefaultResponse.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>DefaultResponse</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.DefaultResponse.getName</name>
				<alias>jsx.io.http.DefaultResponse.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.io.http.DefaultResponse.getClass</alias>
				<memberof>jsx.io.http.DefaultResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/io/http/HttpRequest.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.io.http.HttpRequest</name>
				<alias>jsx.io.http.HttpRequest</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>setUrl</name>
						<alias>jsx.io.http.HttpRequest.setUrl</alias>
					</method>
				
					<method>
						<name>setMethod</name>
						<alias>jsx.io.http.HttpRequest.setMethod</alias>
					</method>
				
					<method>
						<name>setAsynchronous</name>
						<alias>jsx.io.http.HttpRequest.setAsynchronous</alias>
					</method>
				
					<method>
						<name>setContentType</name>
						<alias>jsx.io.http.HttpRequest.setContentType</alias>
					</method>
				
					<method>
						<name>setEncoding</name>
						<alias>jsx.io.http.HttpRequest.setEncoding</alias>
					</method>
				
					<method>
						<name>addParameter</name>
						<alias>jsx.io.http.HttpRequest.addParameter</alias>
					</method>
				
					<method>
						<name>setPostBody</name>
						<alias>jsx.io.http.HttpRequest.setPostBody</alias>
					</method>
				
					<method>
						<name>setPostDoc</name>
						<alias>jsx.io.http.HttpRequest.setPostDoc</alias>
					</method>
				
					<method>
						<name>setUser</name>
						<alias>jsx.io.http.HttpRequest.setUser</alias>
					</method>
				
					<method>
						<name>setPassword</name>
						<alias>jsx.io.http.HttpRequest.setPassword</alias>
					</method>
				
					<method>
						<name>setAbort</name>
						<alias>jsx.io.http.HttpRequest.setAbort</alias>
					</method>
				
					<method>
						<name>addCreateListener</name>
						<alias>jsx.io.http.HttpRequest.addCreateListener</alias>
					</method>
				
					<method>
						<name>addOpenListener</name>
						<alias>jsx.io.http.HttpRequest.addOpenListener</alias>
					</method>
				
					<method>
						<name>addSentListener</name>
						<alias>jsx.io.http.HttpRequest.addSentListener</alias>
					</method>
				
					<method>
						<name>addReceivingListener</name>
						<alias>jsx.io.http.HttpRequest.addReceivingListener</alias>
					</method>
				
					<method>
						<name>addReceivedListener</name>
						<alias>jsx.io.http.HttpRequest.addReceivedListener</alias>
					</method>
				
					<method>
						<name>addCompleteListener</name>
						<alias>jsx.io.http.HttpRequest.addCompleteListener</alias>
					</method>
				
					<method>
						<name>addSuccessListener</name>
						<alias>jsx.io.http.HttpRequest.addSuccessListener</alias>
					</method>
				
					<method>
						<name>addFailureListener</name>
						<alias>jsx.io.http.HttpRequest.addFailureListener</alias>
					</method>
				
					<method>
						<name>addCancelListener</name>
						<alias>jsx.io.http.HttpRequest.addCancelListener</alias>
					</method>
				
					<method>
						<name>addExceptionListener</name>
						<alias>jsx.io.http.HttpRequest.addExceptionListener</alias>
					</method>
				
					<method>
						<name>addRequestHeader</name>
						<alias>jsx.io.http.HttpRequest.addRequestHeader</alias>
					</method>
				
					<method>
						<name>getResponse</name>
						<alias>jsx.io.http.HttpRequest.getResponse</alias>
					</method>
				
					<method>
						<name>getException</name>
						<alias>jsx.io.http.HttpRequest.getException</alias>
					</method>
				
					<method>
						<name>setRequestHeaders</name>
						<alias>jsx.io.http.HttpRequest.setRequestHeaders</alias>
					</method>
				
					<method>
						<name>request</name>
						<alias>jsx.io.http.HttpRequest.request</alias>
					</method>
				
					<method>
						<name>onStateChange</name>
						<alias>jsx.io.http.HttpRequest.onStateChange</alias>
					</method>
				
					<method>
						<name>handleStateChange</name>
						<alias>jsx.io.http.HttpRequest.handleStateChange</alias>
					</method>
				
					<method>
						<name>transport.onreadystatechange</name>
						<alias>jsx.io.http.HttpRequest.transport.onreadystatechange</alias>
					</method>
				
					<method>
						<name>cancel</name>
						<alias>jsx.io.http.HttpRequest.cancel</alias>
					</method>
				
					<method>
						<name>handleException</name>
						<alias>jsx.io.http.HttpRequest.handleException</alias>
					</method>
				
					<method>
						<name>oncreate</name>
						<alias>jsx.io.http.HttpRequest.oncreate</alias>
					</method>
				
					<method>
						<name>onopen</name>
						<alias>jsx.io.http.HttpRequest.onopen</alias>
					</method>
				
					<method>
						<name>onsent</name>
						<alias>jsx.io.http.HttpRequest.onsent</alias>
					</method>
				
					<method>
						<name>onreceiving</name>
						<alias>jsx.io.http.HttpRequest.onreceiving</alias>
					</method>
				
					<method>
						<name>onreceived</name>
						<alias>jsx.io.http.HttpRequest.onreceived</alias>
					</method>
				
					<method>
						<name>oncomplete</name>
						<alias>jsx.io.http.HttpRequest.oncomplete</alias>
					</method>
				
					<method>
						<name>onsuccess</name>
						<alias>jsx.io.http.HttpRequest.onsuccess</alias>
					</method>
				
					<method>
						<name>onfailure</name>
						<alias>jsx.io.http.HttpRequest.onfailure</alias>
					</method>
				
					<method>
						<name>oncancel</name>
						<alias>jsx.io.http.HttpRequest.oncancel</alias>
					</method>
				
					<method>
						<name>onexception</name>
						<alias>jsx.io.http.HttpRequest.onexception</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.io.http.HttpRequest.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>HttpRequest</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUrl</name>
				<alias>jsx.io.http.HttpRequest.setUrl</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_url</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setMethod</name>
				<alias>jsx.io.http.HttpRequest.setMethod</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_method</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setAsynchronous</name>
				<alias>jsx.io.http.HttpRequest.setAsynchronous</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_asynchronous</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setContentType</name>
				<alias>jsx.io.http.HttpRequest.setContentType</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_contentType</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setEncoding</name>
				<alias>jsx.io.http.HttpRequest.setEncoding</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_encoding</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addParameter</name>
				<alias>jsx.io.http.HttpRequest.addParameter</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setPostBody</name>
				<alias>jsx.io.http.HttpRequest.setPostBody</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_postBody</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setPostDoc</name>
				<alias>jsx.io.http.HttpRequest.setPostDoc</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_postDoc</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUser</name>
				<alias>jsx.io.http.HttpRequest.setUser</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_user</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setPassword</name>
				<alias>jsx.io.http.HttpRequest.setPassword</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_password</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setAbort</name>
				<alias>jsx.io.http.HttpRequest.setAbort</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_milliseconds</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addCreateListener</name>
				<alias>jsx.io.http.HttpRequest.addCreateListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addOpenListener</name>
				<alias>jsx.io.http.HttpRequest.addOpenListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSentListener</name>
				<alias>jsx.io.http.HttpRequest.addSentListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addReceivingListener</name>
				<alias>jsx.io.http.HttpRequest.addReceivingListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addReceivedListener</name>
				<alias>jsx.io.http.HttpRequest.addReceivedListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addCompleteListener</name>
				<alias>jsx.io.http.HttpRequest.addCompleteListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSuccessListener</name>
				<alias>jsx.io.http.HttpRequest.addSuccessListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addFailureListener</name>
				<alias>jsx.io.http.HttpRequest.addFailureListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addCancelListener</name>
				<alias>jsx.io.http.HttpRequest.addCancelListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addExceptionListener</name>
				<alias>jsx.io.http.HttpRequest.addExceptionListener</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addRequestHeader</name>
				<alias>jsx.io.http.HttpRequest.addRequestHeader</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getResponse</name>
				<alias>jsx.io.http.HttpRequest.getResponse</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getException</name>
				<alias>jsx.io.http.HttpRequest.getException</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setRequestHeaders</name>
				<alias>jsx.io.http.HttpRequest.setRequestHeaders</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>request</name>
				<alias>jsx.io.http.HttpRequest.request</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onStateChange</name>
				<alias>jsx.io.http.HttpRequest.onStateChange</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>handleStateChange</name>
				<alias>jsx.io.http.HttpRequest.handleStateChange</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_state</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>transport.onreadystatechange</name>
				<alias>jsx.io.http.HttpRequest.transport.onreadystatechange</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>cancel</name>
				<alias>jsx.io.http.HttpRequest.cancel</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>handleException</name>
				<alias>jsx.io.http.HttpRequest.handleException</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>oncreate</name>
				<alias>jsx.io.http.HttpRequest.oncreate</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onopen</name>
				<alias>jsx.io.http.HttpRequest.onopen</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onsent</name>
				<alias>jsx.io.http.HttpRequest.onsent</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onreceiving</name>
				<alias>jsx.io.http.HttpRequest.onreceiving</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onreceived</name>
				<alias>jsx.io.http.HttpRequest.onreceived</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>oncomplete</name>
				<alias>jsx.io.http.HttpRequest.oncomplete</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onsuccess</name>
				<alias>jsx.io.http.HttpRequest.onsuccess</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onfailure</name>
				<alias>jsx.io.http.HttpRequest.onfailure</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>oncancel</name>
				<alias>jsx.io.http.HttpRequest.oncancel</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>onexception</name>
				<alias>jsx.io.http.HttpRequest.onexception</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.HttpRequest.getTransport</name>
				<alias>jsx.io.http.HttpRequest.getTransport</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.HttpRequest.newInstance</name>
				<alias>jsx.io.http.HttpRequest.newInstance</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.HttpRequest.getName</name>
				<alias>jsx.io.http.HttpRequest.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.io.http.HttpRequest.getClass</alias>
				<memberof>jsx.io.http.HttpRequest</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/io/http/HttpResponse.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.io.http.HttpResponse</name>
				<alias>jsx.io.http.HttpResponse</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getXml</name>
						<alias>jsx.io.http.HttpResponse.getXml</alias>
					</method>
				
					<method>
						<name>getText</name>
						<alias>jsx.io.http.HttpResponse.getText</alias>
					</method>
				
					<method>
						<name>getStatusCode</name>
						<alias>jsx.io.http.HttpResponse.getStatusCode</alias>
					</method>
				
					<method>
						<name>getStatusText</name>
						<alias>jsx.io.http.HttpResponse.getStatusText</alias>
					</method>
				
					<method>
						<name>getAllHeaders</name>
						<alias>jsx.io.http.HttpResponse.getAllHeaders</alias>
					</method>
				
					<method>
						<name>getHeader</name>
						<alias>jsx.io.http.HttpResponse.getHeader</alias>
					</method>
				
					<method>
						<name>isSuccess</name>
						<alias>jsx.io.http.HttpResponse.isSuccess</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.io.http.HttpResponse.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>HttpResponse</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getXml</name>
				<alias>jsx.io.http.HttpResponse.getXml</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getText</name>
				<alias>jsx.io.http.HttpResponse.getText</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getStatusCode</name>
				<alias>jsx.io.http.HttpResponse.getStatusCode</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getStatusText</name>
				<alias>jsx.io.http.HttpResponse.getStatusText</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getAllHeaders</name>
				<alias>jsx.io.http.HttpResponse.getAllHeaders</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getHeader</name>
				<alias>jsx.io.http.HttpResponse.getHeader</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isSuccess</name>
				<alias>jsx.io.http.HttpResponse.isSuccess</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.io.http.HttpResponse.getName</name>
				<alias>jsx.io.http.HttpResponse.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.io.http.HttpResponse.getClass</alias>
				<memberof>jsx.io.http.HttpResponse</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Array.js">
		<overview>
			<name></name>
			<desc>Array is one of the core classes to native JavaScript. Array mixes in the jsx.collections.Enumerable class which gives Array a lot more functionalilty. See jsx.collections.Enumerable to see all the additional methods on Array.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>length</name>
				<alias>length</alias>
				<memberof></memberof>
				<type>Number</type>
				<desc>Sets or returns the number of elements in an array.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>Array</name>
				<alias>Array</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>concat</name>
						<alias>Array.concat</alias>
					</method>
				
					<method>
						<name>join</name>
						<alias>Array.join</alias>
					</method>
				
					<method>
						<name>pop</name>
						<alias>Array.pop</alias>
					</method>
				
					<method>
						<name>push</name>
						<alias>Array.push</alias>
					</method>
				
					<method>
						<name>reverse</name>
						<alias>Array.reverse</alias>
					</method>
				
					<method>
						<name>shift</name>
						<alias>Array.shift</alias>
					</method>
				
					<method>
						<name>slice</name>
						<alias>Array.slice</alias>
					</method>
				
					<method>
						<name>sort</name>
						<alias>Array.sort</alias>
					</method>
				
					<method>
						<name>splice</name>
						<alias>Array.splice</alias>
					</method>
				
					<method>
						<name>unshift</name>
						<alias>Array.unshift</alias>
					</method>
				
					<method>
						<name>each</name>
						<alias>Array.each</alias>
					</method>
				
					<method>
						<name>iterator</name>
						<alias>Array.iterator</alias>
					</method>
				
					<method>
						<name>indexOf</name>
						<alias>Array.indexOf</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>Array.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>Array.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>concat</name>
				<alias>Array.concat</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Joins two or more arrays and returns the result.</desc>
				<params>
					<param>
						<type>Array</type>
						<name>_args</name>
						<desc>One or more array objects to be joined to an array. Array#unshift(_args1, _args2,.....,_argsX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].concat(["Matt", "Annie", "Sam"]); -> ["Tom", "Dick", "Harry", "Matt", "Annie", "Sam"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>join</name>
				<alias>Array.join</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Puts all the elements of an array into a string. The elements are separated by a specified delimiter.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_sep</name>
						<desc>Specifies the separator to be used. Comma is the default separator.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].join(" - "); -> "Tom - Dick - Harry"</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pop</name>
				<alias>Array.pop</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Removes and returns the last element of an array.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].pop(); -> "Harry"</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>push</name>
				<alias>Array.push</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Adds one or more elements to the end of an array and returns the new length.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_args</name>
						<desc>One or more items. Array#push(_args1,.....,_argsX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].push("Matt"); -> 4, contents = ["Tom", "Dick", "Harry", "Matt"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>reverse</name>
				<alias>Array.reverse</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Reverses the order of the elements in an array.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].reverse(); -> ["Harry", "Dick", "Tom"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>shift</name>
				<alias>Array.shift</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Removes and returns the first element of an array.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].shift(); -> "Tom", contents = ["Dick", "Harry"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>slice</name>
				<alias>Array.slice</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Returns selected elements from an existing array.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_end</name>
						<desc></desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].slice(1,3); -> ["Dick", "Harry"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>sort</name>
				<alias>Array.sort</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Sorts the elements of an array.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_func</name>
						<desc>The block function of the sort implementation</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].sort(); -> ["Dick", "Harry", "Tom"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>splice</name>
				<alias>Array.splice</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Removes and adds new elements to an array.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc>Specify where to add/remove elements</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_deleteCount</name>
						<desc>Specify how many elements should be removed. Greater then zero.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_args</name>
						<desc>Specify a new element to add to the array. Array#splice(_start, _deleteCount, _args1,.....,_argsX) allowed.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc><div>["Tom", "Dick", "Harry", "Matt", "Annie", "Sam"].splice(2, 0, "Carson"); -> contents = ["Tom", "Dick", "Carson", "Harry", "Matt", "Annie", "Sam"]</div>
	<div>["Tom", "Dick", "Harry", "Matt", "Annie", "Sam"].splice(2, 1, "Carson"); -> contents = ["Tom", "Dick", "Carson", "Matt", "Annie", "Sam"]</div></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>unshift</name>
				<alias>Array.unshift</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Adds one or more elements to the beginning of an array and returns the new length.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_args1</name>
						<desc>The first element to add to the array.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_args2</name>
						<desc>The second element to add to the array. Array#unshift(_args1, _args2,.....,_argsX) allowed.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].unshift("Matt", "Annie", "Sam"); -> 6, contents = ["Tom", "Dick", "Harry", "Matt", "Annie", "Sam"]</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>each</name>
				<alias>Array.each</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Required by the <code>jsx.collections.Enumerable</code> mixin. Calls <code>Array#iterator(_block)</code> passing a value and index to the block.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block.</name>
						<desc>Parameters passed to the _block are Object and the Number.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>Array.iterator</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Iterates through the array, executing the _block and passing a value from Array[index] as its parameter. Used by <code>Array#each(_block)</code>.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block.</name>
						<desc>Parameter passed to the _block is the element object at the index.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>indexOf</name>
				<alias>Array.indexOf</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Returns the index location of the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry", "Matt", "Annie", "Sam"].indexOf("Annie"); -> 4</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>Array.equals</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>["Tom", "Dick", "Harry"].equals(["Tom", "Dick", "Harry"]); -> true;</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Array.getName</name>
				<alias>Array.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Array.getClass</alias>
				<memberof>Array</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Boolean.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>Boolean</name>
				<alias>Boolean</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>equals</name>
						<alias>Boolean.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>Boolean.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>Boolean.equals</alias>
				<memberof>Boolean</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Boolean.getName</name>
				<alias>Boolean.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Boolean.getClass</alias>
				<memberof>Boolean</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Class.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.Class</name>
				<alias>jsx.lang.Class</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>String</type>
						<name>_fqClassName</name>
						<desc>Fully Qualified Class Name</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>getName</name>
						<alias>jsx.lang.Class.getName</alias>
					</method>
				
					<method>
						<name>getSuperclass</name>
						<alias>jsx.lang.Class.getSuperclass</alias>
					</method>
				
					<method>
						<name>getFields</name>
						<alias>jsx.lang.Class.getFields</alias>
					</method>
				
					<method>
						<name>getField</name>
						<alias>jsx.lang.Class.getField</alias>
					</method>
				
					<method>
						<name>showFields</name>
						<alias>jsx.lang.Class.showFields</alias>
					</method>
				
					<method>
						<name>getDeclaredFields</name>
						<alias>jsx.lang.Class.getDeclaredFields</alias>
					</method>
				
					<method>
						<name>getDeclaredField</name>
						<alias>jsx.lang.Class.getDeclaredField</alias>
					</method>
				
					<method>
						<name>showDeclaredFields</name>
						<alias>jsx.lang.Class.showDeclaredFields</alias>
					</method>
				
					<method>
						<name>getMethods</name>
						<alias>jsx.lang.Class.getMethods</alias>
					</method>
				
					<method>
						<name>getMethod</name>
						<alias>jsx.lang.Class.getMethod</alias>
					</method>
				
					<method>
						<name>showMethods</name>
						<alias>jsx.lang.Class.showMethods</alias>
					</method>
				
					<method>
						<name>getDeclaredMethods</name>
						<alias>jsx.lang.Class.getDeclaredMethods</alias>
					</method>
				
					<method>
						<name>getDeclaredMethod</name>
						<alias>jsx.lang.Class.getDeclaredMethod</alias>
					</method>
				
					<method>
						<name>showDeclaredMethods</name>
						<alias>jsx.lang.Class.showDeclaredMethods</alias>
					</method>
				
					<method>
						<name>getConstructor</name>
						<alias>jsx.lang.Class.getConstructor</alias>
					</method>
				
					<method>
						<name>getPackage</name>
						<alias>jsx.lang.Class.getPackage</alias>
					</method>
				
					<method>
						<name>newInstance</name>
						<alias>jsx.lang.Class.newInstance</alias>
					</method>
				
					<method>
						<name>getClasses</name>
						<alias>jsx.lang.Class.getClasses</alias>
					</method>
				
					<method>
						<name>getInterfaces</name>
						<alias>jsx.lang.Class.getInterfaces</alias>
					</method>
				
					<method>
						<name>getMixins</name>
						<alias>jsx.lang.Class.getMixins</alias>
					</method>
				
					<method>
						<name>isChildOf</name>
						<alias>jsx.lang.Class.isChildOf</alias>
					</method>
				
					<method>
						<name>isSuperOf</name>
						<alias>jsx.lang.Class.isSuperOf</alias>
					</method>
				
					<method>
						<name>isInstance</name>
						<alias>jsx.lang.Class.isInstance</alias>
					</method>
				
					<method>
						<name>isImplementing</name>
						<alias>jsx.lang.Class.isImplementing</alias>
					</method>
				
					<method>
						<name>isMixingIn</name>
						<alias>jsx.lang.Class.isMixingIn</alias>
					</method>
				
					<method>
						<name>getWarnings</name>
						<alias>jsx.lang.Class.getWarnings</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.lang.Class.toString</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.lang.Class.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.Class.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Class</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.Class.forName</name>
				<alias>jsx.lang.Class.forName</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the Class object of the _fqclassName parameter.</desc>
				<params>
					<param>
						<type></type>
						<name>_fqclassName</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.lang.Class</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.lang.Class.getName</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns the string name for the class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getSuperclass</name>
				<alias>jsx.lang.Class.getSuperclass</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns the super class of this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.lang.Class</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getFields</name>
				<alias>jsx.lang.Class.getFields</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of Field objects.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getField</name>
				<alias>jsx.lang.Class.getField</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Field object for this class.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>The Field object has the following methods.

	//From any jsx.lang.Class object (String.klass or "test".getClass()) you can get the Field object.
	<code>var _field = String.klass.getField("length");</code>

	//Returns the name of the jsx.lang.Class that the Field belongs to.
	<code>_field.getDeclaringClass();</code>

	//Returns the name of the field.
	<code>_field.getName();</code>

	//Returns whether the field is STATIC.
	<code>_field.isStatic();</code>

	//Returns the value of the field. If a parameter object is passed, this method will return the value for the Instance.
	//If no paramerter object is passed, this method will return the value for the class.
	<code>_field.getValue(_object);</code></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>showFields</name>
				<alias>jsx.lang.Class.showFields</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a string of all the fields.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDeclaredFields</name>
				<alias>jsx.lang.Class.getDeclaredFields</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of Field objects only declared in this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDeclaredField</name>
				<alias>jsx.lang.Class.getDeclaredField</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Field object only declared in this class.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc>See getField(_name) for object details.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>showDeclaredFields</name>
				<alias>jsx.lang.Class.showDeclaredFields</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a string of all the fields only declared in this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMethods</name>
				<alias>jsx.lang.Class.getMethods</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of Method objects.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMethod</name>
				<alias>jsx.lang.Class.getMethod</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Method object for this class.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>The Method object has the following methods.

	//From any jsx.lang.Class object (String.klass or "test".getClass()) you can get the Method object.
	<code>var _method = String.klass.getMethod("match");</code>

	//Returns the name of the jsx.lang.Class that the Method belongs to.
	<code>_method.getDeclaringClass();</code>

	//Returns the name of the method.
	<code>_method.getName();</code>

	//Returns whether the method is STATIC.
	<code>_method.isStatic();</code>

	//Returns an array of parameters for the method.
	<code>_method.getParameters();</code>

	//Returns the code body of the method.
	<code>_method.getBody();</code>

	//Invokes the method. Return object based on the method definition.
	//The _obj parameter is the context object and the _params(Array) parameter is passed to the method.
	//If _obj is null the method is invoked as a class level method.
	<code>_method.invoke(_obj, _params);</code></desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>showMethods</name>
				<alias>jsx.lang.Class.showMethods</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a string of all the methods.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDeclaredMethods</name>
				<alias>jsx.lang.Class.getDeclaredMethods</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of Method objects only declared in this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDeclaredMethod</name>
				<alias>jsx.lang.Class.getDeclaredMethod</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Method object only declared in this class.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc>See getMethod(_name) for object details.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>showDeclaredMethods</name>
				<alias>jsx.lang.Class.showDeclaredMethods</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a string of all the methods only declared in this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getConstructor</name>
				<alias>jsx.lang.Class.getConstructor</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Constructor object for this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>The Constructor object has the following methods.

	//From any jsx.lang.Class object (String.klass or "test".getClass()) you can get the Constructor object.
	var _constructor = String.klass.getConstructor();

	//Returns a jsx.lang.Class object.
	_constructor.getDeclaringClass();

	//Returns a array of parameters for the constructor.
	_constructor.getParameters();

	//Returns the code body of the constructor.
	_constructor.getBody();

	//Returns a new Instance of this class. Pass any number of parameters.
	_constructor.newInstance();</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getPackage</name>
				<alias>jsx.lang.Class.getPackage</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a Package object for this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags>
					<tag title="example">
						<type></type>
						<desc>The Package object has the following methods.

	//From any jsx.lang.Class object (String.klass or "test".getClass()) you can get the Package object.
	var _package = String.klass.getPackage();

	//Returns the name of the package.
	_package.getName();

	//Returns an array of jsx.lang.Class objects that exist in the package.
	_package.getClasses();</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>newInstance</name>
				<alias>jsx.lang.Class.newInstance</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns a new Instance of the class</desc>
				<params>
					<param>
						<type></type>
						<name>parameters</name>
						<desc>Pass any number of parameters. This methods uses the arguments implicit object.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Object</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClasses</name>
				<alias>jsx.lang.Class.getClasses</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of the classes this class has for its imports.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array[jsx.lang.Class]</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getInterfaces</name>
				<alias>jsx.lang.Class.getInterfaces</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of the classes this class is implementating.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array[jsx.lang.Class]</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMixins</name>
				<alias>jsx.lang.Class.getMixins</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns an array of the classes this class is mixing in.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array[jsx.lang.Class]</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isChildOf</name>
				<alias>jsx.lang.Class.isChildOf</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether this class is the child of the _object parameter class.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isSuperOf</name>
				<alias>jsx.lang.Class.isSuperOf</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether this class is the parent of the _object parameter class.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isInstance</name>
				<alias>jsx.lang.Class.isInstance</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether the _object parameter is of this class type.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isImplementing</name>
				<alias>jsx.lang.Class.isImplementing</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether this class is implementing the _class parameter.</desc>
				<params>
					<param>
						<type>jsx.lang.Class</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isMixingIn</name>
				<alias>jsx.lang.Class.isMixingIn</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether this class is mixing in the _class parameter.</desc>
				<params>
					<param>
						<type>jsx.lang.Class</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getWarnings</name>
				<alias>jsx.lang.Class.getWarnings</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns the warnings for this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.lang.Class.toString</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns the name of this class.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.lang.Class.equals</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.Class.getName</name>
				<alias>jsx.lang.Class.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.Class.getClass</alias>
				<memberof>jsx.lang.Class</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Closure.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.Closure</name>
				<alias>jsx.lang.Closure</alias>
				<memberof></memberof>
				<type></type>
				<desc>A Closure is a function that is evaluated in an environment containing one or more bound variables.
 When called, the function can access these variables. In this case the _block parameter in the bind method will have
 access to variable in the same scope as where the closure is defined.</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>bind</name>
						<alias>jsx.lang.Closure.bind</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.Closure.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Closure</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>bind</name>
				<alias>jsx.lang.Closure.bind</alias>
				<memberof>jsx.lang.Closure</memberof>
				<type></type>
				<desc>Returns a Function. The _object parameter is appended to the _args parameter when the _block is excuted. If the
 Closure is bound to an event, the event is appended to the _args parameter when the _block is executed.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>Block to execute</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>Context Object</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Array</type>
						<name>_args</name>
						<desc>Array of parameters to pass into the block</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Function</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.Closure.getName</name>
				<alias>jsx.lang.Closure.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.Closure.getClass</alias>
				<memberof>jsx.lang.Closure</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Date.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>Date.MONTH_NAMES</name>
				<alias>Date.MONTH_NAMES</alias>
				<memberof></memberof>
				<type></type>
				<desc>The long version of the months, ex. January.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>Date.MONTH_NAMES_SHORT</name>
				<alias>Date.MONTH_NAMES_SHORT</alias>
				<memberof></memberof>
				<type></type>
				<desc>The short verions of the months, ex. Jan.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>Date.DAY_NAMES</name>
				<alias>Date.DAY_NAMES</alias>
				<memberof></memberof>
				<type></type>
				<desc>The long verion of the days of the week, ex. Sunday.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>Date.DAY_NAMES_SHORT</name>
				<alias>Date.DAY_NAMES_SHORT</alias>
				<memberof></memberof>
				<type></type>
				<desc>The short version of the days of the week, ex. Sun.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>Date.ONE_DAY_MILLISECONDS</name>
				<alias>Date.ONE_DAY_MILLISECONDS</alias>
				<memberof></memberof>
				<type></type>
				<desc>The number of milliseconds in a day.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>Date.ONE_WEEK_MILLISECONDS</name>
				<alias>Date.ONE_WEEK_MILLISECONDS</alias>
				<memberof></memberof>
				<type></type>
				<desc>The number of milliseconds in a week.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Date.parse</name>
				<alias>Date.parse</alias>
				<memberof></memberof>
				<type></type>
				<desc>Takes a date string and returns the number of milliseconds since midnight of January 1, 1970.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_dateString</name>
						<desc>A string representing a date.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Datea.UTC</name>
				<alias>Datea.UTC</alias>
				<memberof></memberof>
				<type></type>
				<desc>Takes a date and returns the number of milliseconds since midnight of January 1, 1970 according to universal time.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_year</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_month</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_day</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_hours</name>
						<desc></desc>
						<optional>true</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_minutes</name>
						<desc></desc>
						<optional>true</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_seconds</name>
						<desc></desc>
						<optional>true</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_ms</name>
						<desc></desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>Date</name>
				<alias>Date</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getDate</name>
						<alias>Date.getDate</alias>
					</method>
				
					<method>
						<name>setDate</name>
						<alias>Date.setDate</alias>
					</method>
				
					<method>
						<name>getUTCDate</name>
						<alias>Date.getUTCDate</alias>
					</method>
				
					<method>
						<name>setUTCDate</name>
						<alias>Date.setUTCDate</alias>
					</method>
				
					<method>
						<name>getDay</name>
						<alias>Date.getDay</alias>
					</method>
				
					<method>
						<name>getUTCDay</name>
						<alias>Date.getUTCDay</alias>
					</method>
				
					<method>
						<name>getMonth</name>
						<alias>Date.getMonth</alias>
					</method>
				
					<method>
						<name>setMonth</name>
						<alias>Date.setMonth</alias>
					</method>
				
					<method>
						<name>getUTCMonth</name>
						<alias>Date.getUTCMonth</alias>
					</method>
				
					<method>
						<name>setUTCMonth</name>
						<alias>Date.setUTCMonth</alias>
					</method>
				
					<method>
						<name>getFullYear</name>
						<alias>Date.getFullYear</alias>
					</method>
				
					<method>
						<name>setFullYear</name>
						<alias>Date.setFullYear</alias>
					</method>
				
					<method>
						<name>getUTCFullYear</name>
						<alias>Date.getUTCFullYear</alias>
					</method>
				
					<method>
						<name>setUTCFullYear</name>
						<alias>Date.setUTCFullYear</alias>
					</method>
				
					<method>
						<name>getYear</name>
						<alias>Date.getYear</alias>
					</method>
				
					<method>
						<name>setYear</name>
						<alias>Date.setYear</alias>
					</method>
				
					<method>
						<name>getHours</name>
						<alias>Date.getHours</alias>
					</method>
				
					<method>
						<name>setHours</name>
						<alias>Date.setHours</alias>
					</method>
				
					<method>
						<name>getUTCHours</name>
						<alias>Date.getUTCHours</alias>
					</method>
				
					<method>
						<name>setUTCHours</name>
						<alias>Date.setUTCHours</alias>
					</method>
				
					<method>
						<name>getMinutes</name>
						<alias>Date.getMinutes</alias>
					</method>
				
					<method>
						<name>setMinutes</name>
						<alias>Date.setMinutes</alias>
					</method>
				
					<method>
						<name>getUTCMinutes</name>
						<alias>Date.getUTCMinutes</alias>
					</method>
				
					<method>
						<name>setUTCMinutes</name>
						<alias>Date.setUTCMinutes</alias>
					</method>
				
					<method>
						<name>getSeconds</name>
						<alias>Date.getSeconds</alias>
					</method>
				
					<method>
						<name>setSeconds</name>
						<alias>Date.setSeconds</alias>
					</method>
				
					<method>
						<name>getUTCSeconds</name>
						<alias>Date.getUTCSeconds</alias>
					</method>
				
					<method>
						<name>setUTCSeconds</name>
						<alias>Date.setUTCSeconds</alias>
					</method>
				
					<method>
						<name>getMilliseconds</name>
						<alias>Date.getMilliseconds</alias>
					</method>
				
					<method>
						<name>setMilliseconds</name>
						<alias>Date.setMilliseconds</alias>
					</method>
				
					<method>
						<name>getUTCMilliseconds</name>
						<alias>Date.getUTCMilliseconds</alias>
					</method>
				
					<method>
						<name>setUTCMilliseconds</name>
						<alias>Date.setUTCMilliseconds</alias>
					</method>
				
					<method>
						<name>getTime</name>
						<alias>Date.getTime</alias>
					</method>
				
					<method>
						<name>setTime</name>
						<alias>Date.setTime</alias>
					</method>
				
					<method>
						<name>getTimezoneOffset</name>
						<alias>Date.getTimezoneOffset</alias>
					</method>
				
					<method>
						<name>toDateString</name>
						<alias>Date.toDateString</alias>
					</method>
				
					<method>
						<name>toGMTString</name>
						<alias>Date.toGMTString</alias>
					</method>
				
					<method>
						<name>toTimeString</name>
						<alias>Date.toTimeString</alias>
					</method>
				
					<method>
						<name>toUTCString</name>
						<alias>Date.toUTCString</alias>
					</method>
				
					<method>
						<name>getDifference</name>
						<alias>Date.getDifference</alias>
					</method>
				
					<method>
						<name>isBefore</name>
						<alias>Date.isBefore</alias>
					</method>
				
					<method>
						<name>isAfter</name>
						<alias>Date.isAfter</alias>
					</method>
				
					<method>
						<name>getWeekInYear</name>
						<alias>Date.getWeekInYear</alias>
					</method>
				
					<method>
						<name>getWeekInMonth</name>
						<alias>Date.getWeekInMonth</alias>
					</method>
				
					<method>
						<name>getDayInYear</name>
						<alias>Date.getDayInYear</alias>
					</method>
				
					<method>
						<name>getTimeZone</name>
						<alias>Date.getTimeZone</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>Date.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>Date.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDate</name>
				<alias>Date.getDate</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the day of the month from a Date object (from 1-31).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setDate</name>
				<alias>Date.setDate</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the day of the month in a Date object (from 1-31).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_date</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCDate</name>
				<alias>Date.getUTCDate</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the day of the month from a Date object according to universal time (from 1-31).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCDate</name>
				<alias>Date.setUTCDate</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the day of the month in a Date object according to universal time (from 1-31).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_date</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDay</name>
				<alias>Date.getDay</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the day of the week from a Date object (from 0-6).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCDay</name>
				<alias>Date.getUTCDay</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the day of the week from a Date object according to universal time (from 0-6).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMonth</name>
				<alias>Date.getMonth</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the month from a Date object (from 0-11).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setMonth</name>
				<alias>Date.setMonth</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the month in a Date object (from 0-11).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_month</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCMonth</name>
				<alias>Date.getUTCMonth</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the month from a Date object according to universal time (from 0-11).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCMonth</name>
				<alias>Date.setUTCMonth</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the month in a Date object according to universal time (from 0-11).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_month</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getFullYear</name>
				<alias>Date.getFullYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the year, as a four-digit number, from a Date object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setFullYear</name>
				<alias>Date.setFullYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the year in a Date object (four digits).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_fullYear</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCFullYear</name>
				<alias>Date.getUTCFullYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the four-digit year from a Date object according to universal time.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCFullYear</name>
				<alias>Date.setUTCFullYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the year in a Date object according to universal time (four digits).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_fullYear</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getYear</name>
				<alias>Date.getYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the year, as a two-digit or a four-digit number, from a Date object. Use getFullYear() instead!</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setYear</name>
				<alias>Date.setYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>ets the year in the Date object (two or four digits). Use setFullYear() instead!</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_year</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getHours</name>
				<alias>Date.getHours</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the hour of a Date object (from 0-23).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setHours</name>
				<alias>Date.setHours</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the hour in a Date object (from 0-23).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_year</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCHours</name>
				<alias>Date.getUTCHours</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the hour of a Date object according to universal time (from 0-23).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCHours</name>
				<alias>Date.setUTCHours</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the hour in a Date object according to universal time (from 0-23).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_hours</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMinutes</name>
				<alias>Date.getMinutes</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the minutes of a Date object (from 0-59).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setMinutes</name>
				<alias>Date.setMinutes</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Set the minutes in a Date object (from 0-59).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_minutes</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCMinutes</name>
				<alias>Date.getUTCMinutes</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the minutes of a Date object according to universal time (from 0-59).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCMinutes</name>
				<alias>Date.setUTCMinutes</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Set the minutes in a Date object according to universal time (from 0-59).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_minutes</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getSeconds</name>
				<alias>Date.getSeconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the seconds of a Date object (from 0-59).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setSeconds</name>
				<alias>Date.setSeconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the seconds in a Date object (from 0-59).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_seconds</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCSeconds</name>
				<alias>Date.getUTCSeconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the seconds of a Date object according to universal time (from 0-59).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCSeconds</name>
				<alias>Date.setUTCSeconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Set the seconds in a Date object according to universal time (from 0-59).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_seconds</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMilliseconds</name>
				<alias>Date.getMilliseconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the milliseconds of a Date object (from 0-999).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setMilliseconds</name>
				<alias>Date.setMilliseconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the milliseconds in a Date object (from 0-999).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_milliseconds</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getUTCMilliseconds</name>
				<alias>Date.getUTCMilliseconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the milliseconds of a Date object according to universal time (from 0-999).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUTCMilliseconds</name>
				<alias>Date.setUTCMilliseconds</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Sets the milliseconds in a Date object according to universal time (from 0-999).</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_milliseconds</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTime</name>
				<alias>Date.getTime</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the number of milliseconds since midnight Jan 1, 1970.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setTime</name>
				<alias>Date.setTime</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Calculates a date and time by adding or subtracting a specified number of milliseconds to/from midnight January 1, 1970.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_time</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTimezoneOffset</name>
				<alias>Date.getTimezoneOffset</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the difference in minutes between local time and Greenwich Mean Time (GMT).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toDateString</name>
				<alias>Date.toDateString</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns a string representation of the date. Ex... Fri May 09 2008.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toGMTString</name>
				<alias>Date.toGMTString</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Converts a Date object, according to Greenwich time, to a string. Use toUTCString() instead!</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toTimeString</name>
				<alias>Date.toTimeString</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns a string representation of the time. Ex... 21:28:42 GMT-0400 (EDT).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toUTCString</name>
				<alias>Date.toUTCString</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Converts a Date object, according to universal time, to a string.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDifference</name>
				<alias>Date.getDifference</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the difference in milliseconds from this date object to _date parameter.</desc>
				<params>
					<param>
						<type>Date</type>
						<name>_date</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isBefore</name>
				<alias>Date.isBefore</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns whether this date object is before _date parameter.</desc>
				<params>
					<param>
						<type>Date</type>
						<name>_date</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isAfter</name>
				<alias>Date.isAfter</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns whether this date object is after _date parameter.</desc>
				<params>
					<param>
						<type>Date</type>
						<name>_date</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getWeekInYear</name>
				<alias>Date.getWeekInYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the number of week in the year. Ex... 29.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_minimalDaysInFirstWeek</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getWeekInMonth</name>
				<alias>Date.getWeekInMonth</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the number of week in the month. Ex... 4.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_minimalDaysInFirstWeek</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getDayInYear</name>
				<alias>Date.getDayInYear</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns the day in the year. Ex... 360.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTimeZone</name>
				<alias>Date.getTimeZone</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Not Implemented.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>Date.equals</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Date.getName</name>
				<alias>Date.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Date.getClass</alias>
				<memberof>Date</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Function.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>Function.getName</name>
				<alias>Function.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>Function</name>
				<alias>Function</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>Function.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Function.getClass</alias>
				<memberof>Function</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Math.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>E</name>
				<alias>E</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns Euler's constant (approx. 2.718).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>LN10</name>
				<alias>LN10</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the natural logarithm of 10 (approx. 2.302).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>LN2</name>
				<alias>LN2</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the natural logarithm of 2 (approx. 0.693).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>LOG10E</name>
				<alias>LOG10E</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the base-10 logarithm of E (approx. 0.434).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>LOG2E</name>
				<alias>LOG2E</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the base-2 logarithm of E (approx. 1.414).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>PI</name>
				<alias>PI</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns PI (approx. 3.14159).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>SQRT1_2</name>
				<alias>SQRT1_2</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the square root of 1/2 (approx. 0.707).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>SQRT2</name>
				<alias>SQRT2</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the square root of 2 (approx. 1.414).</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.abs</name>
				<alias>Math.abs</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the absolute value of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.acos</name>
				<alias>Math.acos</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the arccosine of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.asin</name>
				<alias>Math.asin</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the arcsine of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.atan</name>
				<alias>Math.atan</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.atan2</name>
				<alias>Math.atan2</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the angle theta of an (x,y) point as a numeric value between -PI and PI radians.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.ceil</name>
				<alias>Math.ceil</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the value of a number rounded upwards to the nearest integer.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.cos</name>
				<alias>Math.cos</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the cosine of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.exp</name>
				<alias>Math.exp</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the value of E^x.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.floor</name>
				<alias>Math.floor</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the value of a number rounded downwards to the nearest integer.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.log</name>
				<alias>Math.log</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the natural logarithm (base E) of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.max</name>
				<alias>Math.max</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the number with the highest value of x and y.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_args</name>
						<desc>Math.max(_num1, _num2, ...._numX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.min</name>
				<alias>Math.min</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the number with the lowest value of x and y.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_args</name>
						<desc>Math.min(_num1, _num2, ...._numX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.pow</name>
				<alias>Math.pow</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the value of x to the power of y.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.randon</name>
				<alias>Math.randon</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns a random number between 0 and 1.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.round</name>
				<alias>Math.round</alias>
				<memberof></memberof>
				<type></type>
				<desc>Rounds a number to the nearest integer.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.sin</name>
				<alias>Math.sin</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the sine of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.sqrt</name>
				<alias>Math.sqrt</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the square root of a number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.tan</name>
				<alias>Math.tan</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns the tangent of an angle.</desc>
				<params>
					<param>
						<type>Number</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Math.getName</name>
				<alias>Math.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Number.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>MAX_VALUE</name>
				<alias>MAX_VALUE</alias>
				<memberof></memberof>
				<type></type>
				<desc>Largest number that is less than infinity.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>MIN_VALUE</name>
				<alias>MIN_VALUE</alias>
				<memberof></memberof>
				<type></type>
				<desc>Smallest number that is greater than negative infinity.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>NaN</name>
				<alias>NaN</alias>
				<memberof></memberof>
				<type></type>
				<desc>Not a number.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>NEGATIVE_INFINITY</name>
				<alias>NEGATIVE_INFINITY</alias>
				<memberof></memberof>
				<type></type>
				<desc>Out of range negative number.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>POSITIVE_INFINITY</name>
				<alias>POSITIVE_INFINITY</alias>
				<memberof></memberof>
				<type></type>
				<desc>Out of range positive number.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>INFINITY</name>
				<alias>INFINITY</alias>
				<memberof></memberof>
				<type></type>
				<desc>Out of range number.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>Number</name>
				<alias>Number</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>toFixed</name>
						<alias>Number.toFixed</alias>
					</method>
				
					<method>
						<name>toExponential</name>
						<alias>Number.toExponential</alias>
					</method>
				
					<method>
						<name>toPrecision</name>
						<alias>Number.toPrecision</alias>
					</method>
				
					<method>
						<name>times</name>
						<alias>Number.times</alias>
					</method>
				
					<method>
						<name>upto</name>
						<alias>Number.upto</alias>
					</method>
				
					<method>
						<name>downto</name>
						<alias>Number.downto</alias>
					</method>
				
					<method>
						<name>towards</name>
						<alias>Number.towards</alias>
					</method>
				
					<method>
						<name>succ</name>
						<alias>Number.succ</alias>
					</method>
				
					<method>
						<name>pred</name>
						<alias>Number.pred</alias>
					</method>
				
					<method>
						<name>toChar</name>
						<alias>Number.toChar</alias>
					</method>
				
					<method>
						<name>compare</name>
						<alias>Number.compare</alias>
					</method>
				
					<method>
						<name>toArray</name>
						<alias>Number.toArray</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>Number.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>Number.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toFixed</name>
				<alias>Number.toFixed</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Round a Number to the specified number of decimals.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toExponential</name>
				<alias>Number.toExponential</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Convert the value of the object into an exponential notation.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toPrecision</name>
				<alias>Number.toPrecision</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Converts the value of the object into an exponential notation if it has more digits than specified.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Number.parseFloat</name>
				<alias>Number.parseFloat</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls parseFloat native on the global object.</desc>
				<params>
					<param>
						<type></type>
						<name>_number</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Number.parseInt</name>
				<alias>Number.parseInt</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls parseInt native on the global object.</desc>
				<params>
					<param>
						<type></type>
						<name>_number</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Number.isFinite</name>
				<alias>Number.isFinite</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls isFinite native on the global object.</desc>
				<params>
					<param>
						<type></type>
						<name>_number</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Number.isNaN</name>
				<alias>Number.isNaN</alias>
				<memberof></memberof>
				<type></type>
				<desc>Calls isNaN native on the global object.</desc>
				<params>
					<param>
						<type></type>
						<name>_number</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>times</name>
				<alias>Number.times</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Executes the block the same number of times the number represents. Parameter to the block is an number.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>upto</name>
				<alias>Number.upto</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Executes the block the number of times upto the other number. Parameter to the block is an number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_other</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>downto</name>
				<alias>Number.downto</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Executes the block the number of times downto the other number. Parameter to the block is an number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_other</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>towards</name>
				<alias>Number.towards</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Executes the block. Step using the other number. Parameter to the block is an number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_other</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>succ</name>
				<alias>Number.succ</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Returns the number incremented by 1.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pred</name>
				<alias>Number.pred</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Returns the number decremented by 1.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toChar</name>
				<alias>Number.toChar</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Returns the character code this number represents.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compare</name>
				<alias>Number.compare</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Compares the number against the other number. Returns -1, 0, 1.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_other</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toArray</name>
				<alias>Number.toArray</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Returns a new array of numbers from the current number to the specified number.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_other</name>
						<desc>Inclusive</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>Number.equals</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Number.getName</name>
				<alias>Number.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Number.getClass</alias>
				<memberof>Number</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Object.js">
		<overview>
			<name></name>
			<desc>Base Object for all Objects</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>Object.NOT_DEF</name>
				<alias>Object.NOT_DEF</alias>
				<memberof></memberof>
				<type></type>
				<desc>Pointer to the 'undefined' value in the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>Object</name>
				<alias>Object</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>respondsTo</name>
						<alias>Object.respondsTo</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>Object.equals</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>Object.toString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>Object.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>respondsTo</name>
				<alias>Object.respondsTo</alias>
				<memberof>Object</memberof>
				<type></type>
				<desc>Returns whether this object can respond to the _methodName parameter.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_methodName</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Object.isUndefined</name>
				<alias>Object.isUndefined</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns whether the _object parameter is 'undefined'.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>Object.equals</alias>
				<memberof>Object</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specifiec _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>Object.toString</alias>
				<memberof>Object</memberof>
				<type></type>
				<desc>Returns the default representation of the object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>Object.getName</name>
				<alias>Object.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>Object.getClass</alias>
				<memberof>Object</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/RegExp.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>RegExp</name>
				<alias>RegExp</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties>
					<property>
						<type></type>
						<name>global</name>
						<alias>RegExp.global</alias>
						<desc>Specifies if the "g" modifier is set.</desc>
					</property>
				
					<property>
						<type></type>
						<name>ignoreCase</name>
						<alias>RegExp.ignoreCase</alias>
						<desc>Specifies if the "i" modifier is set.</desc>
					</property>
				
					<property>
						<type></type>
						<name>multiline</name>
						<alias>RegExp.multiline</alias>
						<desc>Specifies if the "m" modifier is set.</desc>
					</property>
				
					<property>
						<type></type>
						<name>input</name>
						<alias>RegExp.input</alias>
						<desc>The string on which the pattern match is performed.</desc>
					</property>
				
					<property>
						<type></type>
						<name>lastIndex</name>
						<alias>RegExp.lastIndex</alias>
						<desc>An integer specifying the index at which to start the next match.</desc>
					</property>
				
					<property>
						<type></type>
						<name>lastMatch</name>
						<alias>RegExp.lastMatch</alias>
						<desc>The last matched characters.</desc>
					</property>
				
					<property>
						<type></type>
						<name>lastParen</name>
						<alias>RegExp.lastParen</alias>
						<desc>The last matched parenthesized substring.</desc>
					</property>
				
					<property>
						<type></type>
						<name>leftContext</name>
						<alias>RegExp.leftContext</alias>
						<desc>The substring in front of the characters most recently matched.</desc>
					</property>
				
					<property>
						<type></type>
						<name>rightContext</name>
						<alias>RegExp.rightContext</alias>
						<desc>The substring after the characters most recently matched.</desc>
					</property>
				
					<property>
						<type></type>
						<name>source</name>
						<alias>RegExp.source</alias>
						<desc>The text used for pattern matching.</desc>
					</property>
				</properties>
				<methods>
					<method>
						<name>compile</name>
						<alias>RegExp.compile</alias>
					</method>
				
					<method>
						<name>exec</name>
						<alias>RegExp.exec</alias>
					</method>
				
					<method>
						<name>test</name>
						<alias>RegExp.test</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>RegExp.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>RegExp.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>global</name>
				<alias>RegExp.global</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Specifies if the "g" modifier is set.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>ignoreCase</name>
				<alias>RegExp.ignoreCase</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Specifies if the "i" modifier is set.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>multiline</name>
				<alias>RegExp.multiline</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Specifies if the "m" modifier is set.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>input</name>
				<alias>RegExp.input</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The string on which the pattern match is performed.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>lastIndex</name>
				<alias>RegExp.lastIndex</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>An integer specifying the index at which to start the next match.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>lastMatch</name>
				<alias>RegExp.lastMatch</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The last matched characters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>lastParen</name>
				<alias>RegExp.lastParen</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The last matched parenthesized substring.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>leftContext</name>
				<alias>RegExp.leftContext</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The substring in front of the characters most recently matched.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>rightContext</name>
				<alias>RegExp.rightContext</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The substring after the characters most recently matched.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>source</name>
				<alias>RegExp.source</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>The text used for pattern matching.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>compile</name>
				<alias>RegExp.compile</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Change the regular expression (what to search for).</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>exec</name>
				<alias>RegExp.exec</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Search a string for a specified value. Returns the found value and remembers the position.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>test</name>
				<alias>RegExp.test</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Search a string for a specified value. Returns true or false.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>RegExp.equals</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>RegExp.getName</name>
				<alias>RegExp.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>RegExp.getClass</alias>
				<memberof>RegExp</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/String.js">
		<overview>
			<name></name>
			<desc>String is one of the core classes to native JavaScript. Here, String mixes in the jsx.collections.Enumerable class
 which gives String a lot more functionalilty. See jsx.collections.Enumerable to see all the enumerable methods on String</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="OBJECT">
				<name>length</name>
				<alias>length</alias>
				<memberof></memberof>
				<type>Number</type>
				<desc>Returns the number of characters in a string.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>String.fromCharCode</name>
				<alias>String.fromCharCode</alias>
				<memberof></memberof>
				<type></type>
				<desc>Takes the specified Unicode values and returns a string. String.fromCharCode is
 a class method of the String class.</desc>
				<params>
					<param>
						<type></type>
						<name>_numX</name>
						<desc>String.fromCharCode(numX,numX,...,numX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="CONSTRUCTOR">
				<name>String</name>
				<alias>String</alias>
				<memberof></memberof>
				<type></type>
				<desc>[built-in]</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>charAt</name>
						<alias>String.charAt</alias>
					</method>
				
					<method>
						<name>charCodeAt</name>
						<alias>String.charCodeAt</alias>
					</method>
				
					<method>
						<name>concat</name>
						<alias>String.concat</alias>
					</method>
				
					<method>
						<name>indexOf</name>
						<alias>String.indexOf</alias>
					</method>
				
					<method>
						<name>lastIndexOf</name>
						<alias>String.lastIndexOf</alias>
					</method>
				
					<method>
						<name>match</name>
						<alias>String.match</alias>
					</method>
				
					<method>
						<name>replace</name>
						<alias>String.replace</alias>
					</method>
				
					<method>
						<name>search</name>
						<alias>String.search</alias>
					</method>
				
					<method>
						<name>slice</name>
						<alias>String.slice</alias>
					</method>
				
					<method>
						<name>split</name>
						<alias>String.split</alias>
					</method>
				
					<method>
						<name>substr</name>
						<alias>String.substr</alias>
					</method>
				
					<method>
						<name>substring</name>
						<alias>String.substring</alias>
					</method>
				
					<method>
						<name>toLowerCase</name>
						<alias>String.toLowerCase</alias>
					</method>
				
					<method>
						<name>toUpperCase</name>
						<alias>String.toUpperCase</alias>
					</method>
				
					<method>
						<name>encodeURI</name>
						<alias>String.encodeURI</alias>
					</method>
				
					<method>
						<name>encodeURIComponent</name>
						<alias>String.encodeURIComponent</alias>
					</method>
				
					<method>
						<name>decodeURI</name>
						<alias>String.decodeURI</alias>
					</method>
				
					<method>
						<name>decodeURIComponent</name>
						<alias>String.decodeURIComponent</alias>
					</method>
				
					<method>
						<name>escape</name>
						<alias>String.escape</alias>
					</method>
				
					<method>
						<name>unescape</name>
						<alias>String.unescape</alias>
					</method>
				
					<method>
						<name>each</name>
						<alias>String.each</alias>
					</method>
				
					<method>
						<name>iterator</name>
						<alias>String.iterator</alias>
					</method>
				
					<method>
						<name>trim</name>
						<alias>String.trim</alias>
					</method>
				
					<method>
						<name>escapeHTML</name>
						<alias>String.escapeHTML</alias>
					</method>
				
					<method>
						<name>unescapeHTML</name>
						<alias>String.unescapeHTML</alias>
					</method>
				
					<method>
						<name>startsWith</name>
						<alias>String.startsWith</alias>
					</method>
				
					<method>
						<name>endsWith</name>
						<alias>String.endsWith</alias>
					</method>
				
					<method>
						<name>has</name>
						<alias>String.has</alias>
					</method>
				
					<method>
						<name>reverse</name>
						<alias>String.reverse</alias>
					</method>
				
					<method>
						<name>truncate</name>
						<alias>String.truncate</alias>
					</method>
				
					<method>
						<name>capitalize</name>
						<alias>String.capitalize</alias>
					</method>
				
					<method>
						<name>camelCase</name>
						<alias>String.camelCase</alias>
					</method>
				
					<method>
						<name>hyphenCase</name>
						<alias>String.hyphenCase</alias>
					</method>
				
					<method>
						<name>snakeCase</name>
						<alias>String.snakeCase</alias>
					</method>
				
					<method>
						<name>isUpperCase</name>
						<alias>String.isUpperCase</alias>
					</method>
				
					<method>
						<name>isLowerCase</name>
						<alias>String.isLowerCase</alias>
					</method>
				
					<method>
						<name>isBlank</name>
						<alias>String.isBlank</alias>
					</method>
				
					<method>
						<name>isEmpty</name>
						<alias>String.isEmpty</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>String.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>charAt</name>
				<alias>String.charAt</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns the character at a specified position.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>charCodeAt</name>
				<alias>String.charCodeAt</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns the Unicode of the character at a specified position.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>concat</name>
				<alias>String.concat</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Joins two or more strings.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string.</name>
						<desc>String#concat(stringX,stringX,...,stringX) allowed.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>indexOf</name>
				<alias>String.indexOf</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns the position of the first occurrence of a specified string value in a string.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc>Specifies a string value to search for.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc>Specifies where to start the search.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc>This method returns -1 if the string value to search for never occurs.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>lastIndexOf</name>
				<alias>String.lastIndexOf</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns the position of the last occurrence of a specified string value, searching backwards from the specified position in a string.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc>Specifies a string value to search for.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc>Specifies where to start the search.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc>This method returns -1 if the string value to search for never occurs.</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>match</name>
				<alias>String.match</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Searches for a specified value in a string.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_regexp</name>
						<desc>Could be /'string'/ or new RegExp("string").</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>replace</name>
				<alias>String.replace</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Replaces some characters with some other characters in a string.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_regexp</name>
						<desc>Could be /'string'/ or new RegExp("string").</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_replacement</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>search</name>
				<alias>String.search</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Searches a string for a specified value. Returns the position of the specified value in the string. If no match was found it returns -1.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_regexp</name>
						<desc>Could be /'string'/ or new RegExp("string").</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>slice</name>
				<alias>String.slice</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Extracts a part of a string and returns the extracted part in a new string.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc>Specify where to start the selection.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_end</name>
						<desc>Specify where to end the selection.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>split</name>
				<alias>String.split</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Splits a string into an array of strings.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_delimiter</name>
						<desc>Specifies the character, regular expression, or substring that is used to determine where to split the string.
 Could be /'string'/ or new RegExp("string").</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_limit</name>
						<desc>Specify how many times split should occur. Must be a numeric value.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Array</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>substr</name>
				<alias>String.substr</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Extracts a specified number of characters in a string, from a start index.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_start</name>
						<desc>Where to start the extraction.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_length</name>
						<desc>How many characters to extract.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>substring</name>
				<alias>String.substring</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Extracts the characters in a string between two specified indices.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_from</name>
						<desc>Where to start the extraction.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_to</name>
						<desc>Where to end the extraction.</desc>
						<optional>true</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toLowerCase</name>
				<alias>String.toLowerCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Displays a string in lowercase letters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toUpperCase</name>
				<alias>String.toUpperCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Displays a string in uppercase letters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>String.DIGIT</name>
				<alias>String.DIGIT</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns 0123456789.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>String.ALPHA_UPPER_CASE</name>
				<alias>String.ALPHA_UPPER_CASE</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns ABCDEFGHIJKLMNOPQRSTUVWXYZ.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>String.ALPHA_LOWER_CASE</name>
				<alias>String.ALPHA_LOWER_CASE</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns abcdefghijklmnopqrstuvwxyz.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>String.ALPHA</name>
				<alias>String.ALPHA</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="OBJECT">
				<name>String.ALPHA_NUMERIC</name>
				<alias>String.ALPHA_NUMERIC</alias>
				<memberof></memberof>
				<type></type>
				<desc>Returns 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>encodeURI</name>
				<alias>String.encodeURI</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls encodeURI native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>encodeURIComponent</name>
				<alias>String.encodeURIComponent</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls encodeURIComponent native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>decodeURI</name>
				<alias>String.decodeURI</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls decodeURI native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>decodeURIComponent</name>
				<alias>String.decodeURIComponent</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls decodeURIComponent native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>escape</name>
				<alias>String.escape</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls escape native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>unescape</name>
				<alias>String.unescape</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Calls unescape native on the global object.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>each</name>
				<alias>String.each</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Required by the jsx.collections.Enumerable mixin. Calls String#iterator(_delimiter, _block) passing a
 {Object}value and {Number}index to the block.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_delimiter</name>
						<desc>Specifies the character, regular expression, or substring that is used to determine where to split the string.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block.</name>
						<desc>Parameters passed to the _block are {Object}array[index] and the {Number}index.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>iterator</name>
				<alias>String.iterator</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Iterates through the String array created by String#split, executing the _block and passing a value from String.array[index] as its parameter. Used by String#each(_block).</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_delimiter</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>trim</name>
				<alias>String.trim</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string without spaces on either side.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>escapeHTML</name>
				<alias>String.escapeHTML</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string escaping HTML reserved characters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>unescapeHTML</name>
				<alias>String.unescapeHTML</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string unescaping HTML reserved characters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startsWith</name>
				<alias>String.startsWith</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string starts with the specified string paramerter.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>endsWith</name>
				<alias>String.endsWith</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string ends with the specified string paramerter.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>has</name>
				<alias>String.has</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string has the specified string paramerter within it's contents.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_string</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>reverse</name>
				<alias>String.reverse</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string but in reverse order from the original string.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>truncate</name>
				<alias>String.truncate</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Truncates the string to the specified length. Returns a new string.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_length</name>
						<desc>The length to truncate the string to.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>capitalize</name>
				<alias>String.capitalize</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string capitalizing the original string.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>camelCase</name>
				<alias>String.camelCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string camel casing the original hyphen or snake case string. Ex. background-image or background_image -> backgroundImage.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>hyphenCase</name>
				<alias>String.hyphenCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string hyphen casing the original camel case string. Ex. backgroundImage -> background-image.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>snakeCase</name>
				<alias>String.snakeCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns a new string snake casing the original camel case string. Ex. backgroundImage -> background_image.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isUpperCase</name>
				<alias>String.isUpperCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string has all up cased characters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isLowerCase</name>
				<alias>String.isLowerCase</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string has all lower cased characters.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isBlank</name>
				<alias>String.isBlank</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string is blank. Space, tab, new line, carriage return are consider empty.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isEmpty</name>
				<alias>String.isEmpty</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>Returns whether the string is empty, where this.length == 0.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>String.getName</name>
				<alias>String.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>String.getClass</alias>
				<memberof>String</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/StringBuffer.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.StringBuffer</name>
				<alias>jsx.lang.StringBuffer</alias>
				<memberof></memberof>
				<type></type>
				<desc>A cleaner way to concatenate strings.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_initString</name>
						<desc>Initialize the buffer.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>append</name>
						<alias>jsx.lang.StringBuffer.append</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.lang.StringBuffer.equals</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.lang.StringBuffer.toString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.StringBuffer.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>StringBuffer</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.lang.StringBuffer.append</alias>
				<memberof>jsx.lang.StringBuffer</memberof>
				<type></type>
				<desc>Appends the _appendString String to the current buffer.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_appendString</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type></type>
						<desc>StringBuffer</desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.lang.StringBuffer.equals</alias>
				<memberof>jsx.lang.StringBuffer</memberof>
				<type></type>
				<desc>Returns whether this object is equal to the specified _object.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.lang.StringBuffer.toString</alias>
				<memberof>jsx.lang.StringBuffer</memberof>
				<type></type>
				<desc>Returns a String representation of a jsx.lang.StringBuffer.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.StringBuffer.getName</name>
				<alias>jsx.lang.StringBuffer.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.StringBuffer.getClass</alias>
				<memberof>jsx.lang.StringBuffer</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/Thread.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.Thread</name>
				<alias>jsx.lang.Thread</alias>
				<memberof></memberof>
				<type></type>
				<desc>This is not a true thread. This is just a cleaner API wrapping the global objects setTimeout and setInterval methods.</desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc>Block to execute.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc>Context object.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Array</type>
						<name>_args</name>
						<desc>Array of parameters to pass into the block.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_milliseconds</name>
						<desc>Specify in milliseconds when to execute. If the thread is a daemon thread, the milliseconds will indicate
 the intervals the block will execute. If the thread is not a daemon thread, the milliseconds will indicate the delay until the
 block will execute.</desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_name</name>
						<desc>Name of the Thread.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>start</name>
						<alias>jsx.lang.Thread.start</alias>
					</method>
				
					<method>
						<name>stop</name>
						<alias>jsx.lang.Thread.stop</alias>
					</method>
				
					<method>
						<name>sleep</name>
						<alias>jsx.lang.Thread.sleep</alias>
					</method>
				
					<method>
						<name>getID</name>
						<alias>jsx.lang.Thread.getID</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.lang.Thread.getName</alias>
					</method>
				
					<method>
						<name>setName</name>
						<alias>jsx.lang.Thread.setName</alias>
					</method>
				
					<method>
						<name>isDaemon</name>
						<alias>jsx.lang.Thread.isDaemon</alias>
					</method>
				
					<method>
						<name>setDaemon</name>
						<alias>jsx.lang.Thread.setDaemon</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.lang.Thread.toString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.Thread.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Thread</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>start</name>
				<alias>jsx.lang.Thread.start</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Starts the jsx.lang.Thread.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stop</name>
				<alias>jsx.lang.Thread.stop</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Stops the jsx.lang.Thread.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>sleep</name>
				<alias>jsx.lang.Thread.sleep</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Makes the Thread sleep for a number of milliseconds.</desc>
				<params>
					<param>
						<type>Number</type>
						<name>_milliseconds</name>
						<desc>How long to sleep for.</desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getID</name>
				<alias>jsx.lang.Thread.getID</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Returns the Thread ID.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Number</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.lang.Thread.getName</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Returns the Thread Name.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setName</name>
				<alias>jsx.lang.Thread.setName</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Set the Thread Name.</desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Thread</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isDaemon</name>
				<alias>jsx.lang.Thread.isDaemon</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Returns whether the Thread is a Daemon jsx.lang.Thread.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setDaemon</name>
				<alias>jsx.lang.Thread.setDaemon</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Set whether the Thread should be a Daemon jsx.lang.Thread.</desc>
				<params>
					<param>
						<type>Boolean</type>
						<name>_isDaemon</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Thread</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.lang.Thread.toString</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>Returns the String representation of the jsx.lang.Thread.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.Thread.getName</name>
				<alias>jsx.lang.Thread.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.Thread.getClass</alias>
				<memberof>jsx.lang.Thread</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/util/EqualsBuilder.js">
		<overview>
			<name></name>
			<desc>Utility to test equality among various objects. Mostly used in individual <Class>#equals method to one object against another.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.util.EqualsBuilder</name>
				<alias>jsx.lang.util.EqualsBuilder</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>append</name>
						<alias>jsx.lang.util.EqualsBuilder.append</alias>
					</method>
				
					<method>
						<name>getEquals</name>
						<alias>jsx.lang.util.EqualsBuilder.getEquals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.util.EqualsBuilder.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>EqualsBuilder</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.lang.util.EqualsBuilder.append</alias>
				<memberof>jsx.lang.util.EqualsBuilder</memberof>
				<type></type>
				<desc>Test two objects for equality.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object1</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object2</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.lang.util.EqualsBuilder</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getEquals</name>
				<alias>jsx.lang.util.EqualsBuilder.getEquals</alias>
				<memberof>jsx.lang.util.EqualsBuilder</memberof>
				<type></type>
				<desc>Returns the derived equals boolean.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>Boolean</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.util.EqualsBuilder.getName</name>
				<alias>jsx.lang.util.EqualsBuilder.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.util.EqualsBuilder.getClass</alias>
				<memberof>jsx.lang.util.EqualsBuilder</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/util/SimpleDateFormat.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.util.SimpleDateFormat</name>
				<alias>jsx.lang.util.SimpleDateFormat</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>String</type>
						<name>_formatString</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>setMinimalDaysInFirstWeek</name>
						<alias>jsx.lang.util.SimpleDateFormat.setMinimalDaysInFirstWeek</alias>
					</method>
				
					<method>
						<name>getMinimalDaysInFirstWeek</name>
						<alias>jsx.lang.util.SimpleDateFormat.getMinimalDaysInFirstWeek</alias>
					</method>
				
					<method>
						<name>format</name>
						<alias>jsx.lang.util.SimpleDateFormat.format</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.util.SimpleDateFormat.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>SimpleDateFormat</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setMinimalDaysInFirstWeek</name>
				<alias>jsx.lang.util.SimpleDateFormat.setMinimalDaysInFirstWeek</alias>
				<memberof>jsx.lang.util.SimpleDateFormat</memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type></type>
						<name>_minimalDaysInFirstWeek</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMinimalDaysInFirstWeek</name>
				<alias>jsx.lang.util.SimpleDateFormat.getMinimalDaysInFirstWeek</alias>
				<memberof>jsx.lang.util.SimpleDateFormat</memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>format</name>
				<alias>jsx.lang.util.SimpleDateFormat.format</alias>
				<memberof>jsx.lang.util.SimpleDateFormat</memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Date</type>
						<name></name>
						<desc></desc>
						<optional>undefined</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.util.SimpleDateFormat.getName</name>
				<alias>jsx.lang.util.SimpleDateFormat.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.util.SimpleDateFormat.getClass</alias>
				<memberof>jsx.lang.util.SimpleDateFormat</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/lang/util/ToStringBuilder.js">
		<overview>
			<name></name>
			<desc>Utility to build a string. Mostly used in individual <Class>#toString method to build a string displaying the state of an object.</desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.lang.util.ToStringBuilder</name>
				<alias>jsx.lang.util.ToStringBuilder</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>String</type>
						<name>_prefix</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>append</name>
						<alias>jsx.lang.util.ToStringBuilder.append</alias>
					</method>
				
					<method>
						<name>getString</name>
						<alias>jsx.lang.util.ToStringBuilder.getString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.lang.util.ToStringBuilder.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>ToStringBuilder</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.lang.util.ToStringBuilder.append</alias>
				<memberof>jsx.lang.util.ToStringBuilder</memberof>
				<type></type>
				<desc>Append the specified object's toString keyed by the specified name.</desc>
				<params>
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>jsx.lang.util.ToStringBuilder</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getString</name>
				<alias>jsx.lang.util.ToStringBuilder.getString</alias>
				<memberof>jsx.lang.util.ToStringBuilder</memberof>
				<type></type>
				<desc>Returns the derived string.</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns>
					<return>
						<type>String</type>
						<desc></desc>
					</return>
				</returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.lang.util.ToStringBuilder.getName</name>
				<alias>jsx.lang.util.ToStringBuilder.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.lang.util.ToStringBuilder.getClass</alias>
				<memberof>jsx.lang.util.ToStringBuilder</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/Appender.js">
		<overview>
			<name>Appender.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Appender</name>
				<alias>jsx.logging.Appender</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>doAppend</name>
						<alias>jsx.logging.Appender.doAppend</alias>
					</method>
				
					<method>
						<name>getLayout</name>
						<alias>jsx.logging.Appender.getLayout</alias>
					</method>
				
					<method>
						<name>setLayout</name>
						<alias>jsx.logging.Appender.setLayout</alias>
					</method>
				
					<method>
						<name>getThreshold</name>
						<alias>jsx.logging.Appender.getThreshold</alias>
					</method>
				
					<method>
						<name>setThreshold</name>
						<alias>jsx.logging.Appender.setThreshold</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.Appender.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>doAppend</name>
				<alias>jsx.logging.Appender.doAppend</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getLayout</name>
				<alias>jsx.logging.Appender.getLayout</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setLayout</name>
				<alias>jsx.logging.Appender.setLayout</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_layout</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getThreshold</name>
				<alias>jsx.logging.Appender.getThreshold</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setThreshold</name>
				<alias>jsx.logging.Appender.setThreshold</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_threshold</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Appender.getName</name>
				<alias>jsx.logging.Appender.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.Appender.getClass</alias>
				<memberof>jsx.logging.Appender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/ConsoleAppender.js">
		<overview>
			<name>ConsoleAppender.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.ConsoleAppender</name>
				<alias>jsx.logging.ConsoleAppender</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>mousedown</name>
						<alias>jsx.logging.ConsoleAppender.mousedown</alias>
					</method>
				
					<method>
						<name>mousemove</name>
						<alias>jsx.logging.ConsoleAppender.mousemove</alias>
					</method>
				
					<method>
						<name>mouseup</name>
						<alias>jsx.logging.ConsoleAppender.mouseup</alias>
					</method>
				
					<method>
						<name>getConsole</name>
						<alias>jsx.logging.ConsoleAppender.getConsole</alias>
					</method>
				
					<method>
						<name>append</name>
						<alias>jsx.logging.ConsoleAppender.append</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.ConsoleAppender.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousedown</name>
				<alias>jsx.logging.ConsoleAppender.mousedown</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mousemove</name>
				<alias>jsx.logging.ConsoleAppender.mousemove</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>mouseup</name>
				<alias>jsx.logging.ConsoleAppender.mouseup</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_event</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getConsole</name>
				<alias>jsx.logging.ConsoleAppender.getConsole</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.logging.ConsoleAppender.append</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.ConsoleAppender.getName</name>
				<alias>jsx.logging.ConsoleAppender.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.ConsoleAppender.getClass</alias>
				<memberof>jsx.logging.ConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/DefaultAppender.js">
		<overview>
			<name>DefaultAppender.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.DefaultAppender</name>
				<alias>jsx.logging.DefaultAppender</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>doAppend</name>
						<alias>jsx.logging.DefaultAppender.doAppend</alias>
					</method>
				
					<method>
						<name>append</name>
						<alias>jsx.logging.DefaultAppender.append</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.logging.DefaultAppender.getName</alias>
					</method>
				
					<method>
						<name>getLayout</name>
						<alias>jsx.logging.DefaultAppender.getLayout</alias>
					</method>
				
					<method>
						<name>setLayout</name>
						<alias>jsx.logging.DefaultAppender.setLayout</alias>
					</method>
				
					<method>
						<name>getThreshold</name>
						<alias>jsx.logging.DefaultAppender.getThreshold</alias>
					</method>
				
					<method>
						<name>setThreshold</name>
						<alias>jsx.logging.DefaultAppender.setThreshold</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.DefaultAppender.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>doAppend</name>
				<alias>jsx.logging.DefaultAppender.doAppend</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.logging.DefaultAppender.append</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.logging.DefaultAppender.getName</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getLayout</name>
				<alias>jsx.logging.DefaultAppender.getLayout</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setLayout</name>
				<alias>jsx.logging.DefaultAppender.setLayout</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_layout</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getThreshold</name>
				<alias>jsx.logging.DefaultAppender.getThreshold</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setThreshold</name>
				<alias>jsx.logging.DefaultAppender.setThreshold</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_threshold</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.DefaultAppender.getName</name>
				<alias>jsx.logging.DefaultAppender.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.DefaultAppender.getClass</alias>
				<memberof>jsx.logging.DefaultAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/DefaultLayout.js">
		<overview>
			<name>DefaultLayout.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.DefaultLayout</name>
				<alias>jsx.logging.DefaultLayout</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>format</name>
						<alias>jsx.logging.DefaultLayout.format</alias>
					</method>
				
					<method>
						<name>getContentType</name>
						<alias>jsx.logging.DefaultLayout.getContentType</alias>
					</method>
				
					<method>
						<name>getHeader</name>
						<alias>jsx.logging.DefaultLayout.getHeader</alias>
					</method>
				
					<method>
						<name>getFooter</name>
						<alias>jsx.logging.DefaultLayout.getFooter</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.DefaultLayout.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>format</name>
				<alias>jsx.logging.DefaultLayout.format</alias>
				<memberof>jsx.logging.DefaultLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getContentType</name>
				<alias>jsx.logging.DefaultLayout.getContentType</alias>
				<memberof>jsx.logging.DefaultLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getHeader</name>
				<alias>jsx.logging.DefaultLayout.getHeader</alias>
				<memberof>jsx.logging.DefaultLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getFooter</name>
				<alias>jsx.logging.DefaultLayout.getFooter</alias>
				<memberof>jsx.logging.DefaultLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.DefaultLayout.getName</name>
				<alias>jsx.logging.DefaultLayout.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.DefaultLayout.getClass</alias>
				<memberof>jsx.logging.DefaultLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/Layout.js">
		<overview>
			<name>Layout.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Layout</name>
				<alias>jsx.logging.Layout</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>format</name>
						<alias>jsx.logging.Layout.format</alias>
					</method>
				
					<method>
						<name>getContentType</name>
						<alias>jsx.logging.Layout.getContentType</alias>
					</method>
				
					<method>
						<name>getHeader</name>
						<alias>jsx.logging.Layout.getHeader</alias>
					</method>
				
					<method>
						<name>getFooter</name>
						<alias>jsx.logging.Layout.getFooter</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.Layout.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>format</name>
				<alias>jsx.logging.Layout.format</alias>
				<memberof>jsx.logging.Layout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getContentType</name>
				<alias>jsx.logging.Layout.getContentType</alias>
				<memberof>jsx.logging.Layout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getHeader</name>
				<alias>jsx.logging.Layout.getHeader</alias>
				<memberof>jsx.logging.Layout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getFooter</name>
				<alias>jsx.logging.Layout.getFooter</alias>
				<memberof>jsx.logging.Layout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Layout.getName</name>
				<alias>jsx.logging.Layout.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.Layout.getClass</alias>
				<memberof>jsx.logging.Layout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/Level.js">
		<overview>
			<name>Level.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Level</name>
				<alias>jsx.logging.Level</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getNumber</name>
						<alias>jsx.logging.Level.getNumber</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.logging.Level.getName</alias>
					</method>
				
					<method>
						<name>isGreaterOrEqual</name>
						<alias>jsx.logging.Level.isGreaterOrEqual</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.logging.Level.toString</alias>
					</method>
				
					<method>
						<name>equals</name>
						<alias>jsx.logging.Level.equals</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.Level.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getNumber</name>
				<alias>jsx.logging.Level.getNumber</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.logging.Level.getName</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isGreaterOrEqual</name>
				<alias>jsx.logging.Level.isGreaterOrEqual</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_level</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.logging.Level.toString</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>equals</name>
				<alias>jsx.logging.Level.equals</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Level.toLevel</name>
				<alias>jsx.logging.Level.toLevel</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Level.getName</name>
				<alias>jsx.logging.Level.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.Level.getClass</alias>
				<memberof>jsx.logging.Level</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/LogConfiguration.js">
		<overview>
			<name>LogConfiguration.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogConfiguration</name>
				<alias>jsx.logging.LogConfiguration</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getConfiguration</name>
						<alias>jsx.logging.LogConfiguration.getConfiguration</alias>
					</method>
				
					<method>
						<name>configure</name>
						<alias>jsx.logging.LogConfiguration.configure</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.LogConfiguration.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getConfiguration</name>
				<alias>jsx.logging.LogConfiguration.getConfiguration</alias>
				<memberof>jsx.logging.LogConfiguration</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>configure</name>
				<alias>jsx.logging.LogConfiguration.configure</alias>
				<memberof>jsx.logging.LogConfiguration</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogConfiguration.getName</name>
				<alias>jsx.logging.LogConfiguration.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.LogConfiguration.getClass</alias>
				<memberof>jsx.logging.LogConfiguration</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/LogEvent.js">
		<overview>
			<name>LogEvent.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogEvent</name>
				<alias>jsx.logging.LogEvent</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getLogger</name>
						<alias>jsx.logging.LogEvent.getLogger</alias>
					</method>
				
					<method>
						<name>getTimeStamp</name>
						<alias>jsx.logging.LogEvent.getTimeStamp</alias>
					</method>
				
					<method>
						<name>getTimeStampInSeconds</name>
						<alias>jsx.logging.LogEvent.getTimeStampInSeconds</alias>
					</method>
				
					<method>
						<name>getLevel</name>
						<alias>jsx.logging.LogEvent.getLevel</alias>
					</method>
				
					<method>
						<name>getMessage</name>
						<alias>jsx.logging.LogEvent.getMessage</alias>
					</method>
				
					<method>
						<name>getException</name>
						<alias>jsx.logging.LogEvent.getException</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.LogEvent.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getLogger</name>
				<alias>jsx.logging.LogEvent.getLogger</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTimeStamp</name>
				<alias>jsx.logging.LogEvent.getTimeStamp</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTimeStampInSeconds</name>
				<alias>jsx.logging.LogEvent.getTimeStampInSeconds</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getLevel</name>
				<alias>jsx.logging.LogEvent.getLevel</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getMessage</name>
				<alias>jsx.logging.LogEvent.getMessage</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getException</name>
				<alias>jsx.logging.LogEvent.getException</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogEvent.getName</name>
				<alias>jsx.logging.LogEvent.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.LogEvent.getClass</alias>
				<memberof>jsx.logging.LogEvent</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/LogManager.js">
		<overview>
			<name>LogManager.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogManager</name>
				<alias>jsx.logging.LogManager</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.logging.LogManager.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogManager.getLogger</name>
				<alias>jsx.logging.LogManager.getLogger</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_loggerName</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.LogManager.getName</name>
				<alias>jsx.logging.LogManager.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.LogManager.getClass</alias>
				<memberof>jsx.logging.LogManager</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/Logger.js">
		<overview>
			<name>Logger.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Logger</name>
				<alias>jsx.logging.Logger</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>log</name>
						<alias>jsx.logging.Logger.log</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.logging.Logger.getName</alias>
					</method>
				
					<method>
						<name>addAppender</name>
						<alias>jsx.logging.Logger.addAppender</alias>
					</method>
				
					<method>
						<name>removeAppender</name>
						<alias>jsx.logging.Logger.removeAppender</alias>
					</method>
				
					<method>
						<name>removeAllAppenders</name>
						<alias>jsx.logging.Logger.removeAllAppenders</alias>
					</method>
				
					<method>
						<name>getEffectiveLevel</name>
						<alias>jsx.logging.Logger.getEffectiveLevel</alias>
					</method>
				
					<method>
						<name>setEffectiveLevel</name>
						<alias>jsx.logging.Logger.setEffectiveLevel</alias>
					</method>
				
					<method>
						<name>trace</name>
						<alias>jsx.logging.Logger.trace</alias>
					</method>
				
					<method>
						<name>debug</name>
						<alias>jsx.logging.Logger.debug</alias>
					</method>
				
					<method>
						<name>info</name>
						<alias>jsx.logging.Logger.info</alias>
					</method>
				
					<method>
						<name>warn</name>
						<alias>jsx.logging.Logger.warn</alias>
					</method>
				
					<method>
						<name>error</name>
						<alias>jsx.logging.Logger.error</alias>
					</method>
				
					<method>
						<name>fatal</name>
						<alias>jsx.logging.Logger.fatal</alias>
					</method>
				
					<method>
						<name>isTraceEnabled</name>
						<alias>jsx.logging.Logger.isTraceEnabled</alias>
					</method>
				
					<method>
						<name>isDebugEnabled</name>
						<alias>jsx.logging.Logger.isDebugEnabled</alias>
					</method>
				
					<method>
						<name>isInfoEnabled</name>
						<alias>jsx.logging.Logger.isInfoEnabled</alias>
					</method>
				
					<method>
						<name>isWarnEnabled</name>
						<alias>jsx.logging.Logger.isWarnEnabled</alias>
					</method>
				
					<method>
						<name>isErrorEnabled</name>
						<alias>jsx.logging.Logger.isErrorEnabled</alias>
					</method>
				
					<method>
						<name>isFatalEnabled</name>
						<alias>jsx.logging.Logger.isFatalEnabled</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.Logger.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>log</name>
				<alias>jsx.logging.Logger.log</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_level</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.logging.Logger.getName</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addAppender</name>
				<alias>jsx.logging.Logger.addAppender</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_appender</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAppender</name>
				<alias>jsx.logging.Logger.removeAppender</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_appender</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAllAppenders</name>
				<alias>jsx.logging.Logger.removeAllAppenders</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getEffectiveLevel</name>
				<alias>jsx.logging.Logger.getEffectiveLevel</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setEffectiveLevel</name>
				<alias>jsx.logging.Logger.setEffectiveLevel</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_level</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>trace</name>
				<alias>jsx.logging.Logger.trace</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>debug</name>
				<alias>jsx.logging.Logger.debug</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>info</name>
				<alias>jsx.logging.Logger.info</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>warn</name>
				<alias>jsx.logging.Logger.warn</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>error</name>
				<alias>jsx.logging.Logger.error</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>fatal</name>
				<alias>jsx.logging.Logger.fatal</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isTraceEnabled</name>
				<alias>jsx.logging.Logger.isTraceEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isDebugEnabled</name>
				<alias>jsx.logging.Logger.isDebugEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isInfoEnabled</name>
				<alias>jsx.logging.Logger.isInfoEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isWarnEnabled</name>
				<alias>jsx.logging.Logger.isWarnEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isErrorEnabled</name>
				<alias>jsx.logging.Logger.isErrorEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isFatalEnabled</name>
				<alias>jsx.logging.Logger.isFatalEnabled</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.Logger.getName</name>
				<alias>jsx.logging.Logger.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.Logger.getClass</alias>
				<memberof>jsx.logging.Logger</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/PatternLayout.js">
		<overview>
			<name>PatternLayout.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.PatternLayout</name>
				<alias>jsx.logging.PatternLayout</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>format</name>
						<alias>jsx.logging.PatternLayout.format</alias>
					</method>
				
					<method>
						<name>setConversionPattern</name>
						<alias>jsx.logging.PatternLayout.setConversionPattern</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.PatternLayout.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>format</name>
				<alias>jsx.logging.PatternLayout.format</alias>
				<memberof>jsx.logging.PatternLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setConversionPattern</name>
				<alias>jsx.logging.PatternLayout.setConversionPattern</alias>
				<memberof>jsx.logging.PatternLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_pattern</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.PatternLayout.getName</name>
				<alias>jsx.logging.PatternLayout.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.PatternLayout.getClass</alias>
				<memberof>jsx.logging.PatternLayout</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/logging/WindowConsoleAppender.js">
		<overview>
			<name>WindowConsoleAppender.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.WindowConsoleAppender</name>
				<alias>jsx.logging.WindowConsoleAppender</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>append</name>
						<alias>jsx.logging.WindowConsoleAppender.append</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.logging.WindowConsoleAppender.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>append</name>
				<alias>jsx.logging.WindowConsoleAppender.append</alias>
				<memberof>jsx.logging.WindowConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_logEvent</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.logging.WindowConsoleAppender.getName</name>
				<alias>jsx.logging.WindowConsoleAppender.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.logging.WindowConsoleAppender.getClass</alias>
				<memberof>jsx.logging.WindowConsoleAppender</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/Assert.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.Assert</name>
				<alias>jsx.tunit.framework.Assert</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.Assert.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Assert</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertTrue</name>
				<alias>jsx.tunit.framework.Assert.assertTrue</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_condition</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertFalse</name>
				<alias>jsx.tunit.framework.Assert.assertFalse</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_condition</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertEquals</name>
				<alias>jsx.tunit.framework.Assert.assertEquals</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_expected</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_actual</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertNull</name>
				<alias>jsx.tunit.framework.Assert.assertNull</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertNotNull</name>
				<alias>jsx.tunit.framework.Assert.assertNotNull</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertSame</name>
				<alias>jsx.tunit.framework.Assert.assertSame</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_expected</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_actual</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.assertNotSame</name>
				<alias>jsx.tunit.framework.Assert.assertNotSame</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_expected</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_actual</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.fail</name>
				<alias>jsx.tunit.framework.Assert.fail</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.failTrue</name>
				<alias>jsx.tunit.framework.Assert.failTrue</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.failNotEquals</name>
				<alias>jsx.tunit.framework.Assert.failNotEquals</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_expected</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_actual</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.failSame</name>
				<alias>jsx.tunit.framework.Assert.failSame</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.failNotSame</name>
				<alias>jsx.tunit.framework.Assert.failNotSame</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_expected</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_actual</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Assert.getName</name>
				<alias>jsx.tunit.framework.Assert.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.Assert.getClass</alias>
				<memberof>jsx.tunit.framework.Assert</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/AssertionFailedError.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.AssertionFailedError</name>
				<alias>jsx.tunit.framework.AssertionFailedError</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>String</type>
						<name>_message</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.AssertionFailedError.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>AssertionFailedError</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.AssertionFailedError.getName</name>
				<alias>jsx.tunit.framework.AssertionFailedError.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.AssertionFailedError.getClass</alias>
				<memberof>jsx.tunit.framework.AssertionFailedError</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/Test.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.Test</name>
				<alias>jsx.tunit.framework.Test</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getName</name>
						<alias>jsx.tunit.framework.Test.getName</alias>
					</method>
				
					<method>
						<name>countTestCases</name>
						<alias>jsx.tunit.framework.Test.countTestCases</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.framework.Test.run</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.Test.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Test</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.tunit.framework.Test.getName</alias>
				<memberof>jsx.tunit.framework.Test</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>countTestCases</name>
				<alias>jsx.tunit.framework.Test.countTestCases</alias>
				<memberof>jsx.tunit.framework.Test</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.framework.Test.run</alias>
				<memberof>jsx.tunit.framework.Test</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.Test.getName</name>
				<alias>jsx.tunit.framework.Test.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.Test.getClass</alias>
				<memberof>jsx.tunit.framework.Test</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/TestCase.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.TestCase</name>
				<alias>jsx.tunit.framework.TestCase</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>setUp</name>
						<alias>jsx.tunit.framework.TestCase.setUp</alias>
					</method>
				
					<method>
						<name>tearDown</name>
						<alias>jsx.tunit.framework.TestCase.tearDown</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.tunit.framework.TestCase.getName</alias>
					</method>
				
					<method>
						<name>setName</name>
						<alias>jsx.tunit.framework.TestCase.setName</alias>
					</method>
				
					<method>
						<name>countTestCases</name>
						<alias>jsx.tunit.framework.TestCase.countTestCases</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.framework.TestCase.run</alias>
					</method>
				
					<method>
						<name>runBare</name>
						<alias>jsx.tunit.framework.TestCase.runBare</alias>
					</method>
				
					<method>
						<name>runTest</name>
						<alias>jsx.tunit.framework.TestCase.runTest</alias>
					</method>
				
					<method>
						<name>toString</name>
						<alias>jsx.tunit.framework.TestCase.toString</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.TestCase.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>TestCase</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setUp</name>
				<alias>jsx.tunit.framework.TestCase.setUp</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>tearDown</name>
				<alias>jsx.tunit.framework.TestCase.tearDown</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.tunit.framework.TestCase.getName</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setName</name>
				<alias>jsx.tunit.framework.TestCase.setName</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>countTestCases</name>
				<alias>jsx.tunit.framework.TestCase.countTestCases</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.framework.TestCase.run</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runBare</name>
				<alias>jsx.tunit.framework.TestCase.runBare</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runTest</name>
				<alias>jsx.tunit.framework.TestCase.runTest</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>toString</name>
				<alias>jsx.tunit.framework.TestCase.toString</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.TestCase.getName</name>
				<alias>jsx.tunit.framework.TestCase.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.TestCase.getClass</alias>
				<memberof>jsx.tunit.framework.TestCase</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/TestFailure.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.TestFailure</name>
				<alias>jsx.tunit.framework.TestFailure</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>isFailure</name>
						<alias>jsx.tunit.framework.TestFailure.isFailure</alias>
					</method>
				
					<method>
						<name>getTest</name>
						<alias>jsx.tunit.framework.TestFailure.getTest</alias>
					</method>
				
					<method>
						<name>getException</name>
						<alias>jsx.tunit.framework.TestFailure.getException</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.TestFailure.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>TestFailure</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isFailure</name>
				<alias>jsx.tunit.framework.TestFailure.isFailure</alias>
				<memberof>jsx.tunit.framework.TestFailure</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTest</name>
				<alias>jsx.tunit.framework.TestFailure.getTest</alias>
				<memberof>jsx.tunit.framework.TestFailure</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getException</name>
				<alias>jsx.tunit.framework.TestFailure.getException</alias>
				<memberof>jsx.tunit.framework.TestFailure</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.TestFailure.getName</name>
				<alias>jsx.tunit.framework.TestFailure.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.TestFailure.getClass</alias>
				<memberof>jsx.tunit.framework.TestFailure</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/TestListener.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.TestListener</name>
				<alias>jsx.tunit.framework.TestListener</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>startTest</name>
						<alias>jsx.tunit.framework.TestListener.startTest</alias>
					</method>
				
					<method>
						<name>endTest</name>
						<alias>jsx.tunit.framework.TestListener.endTest</alias>
					</method>
				
					<method>
						<name>addSuccess</name>
						<alias>jsx.tunit.framework.TestListener.addSuccess</alias>
					</method>
				
					<method>
						<name>addFailure</name>
						<alias>jsx.tunit.framework.TestListener.addFailure</alias>
					</method>
				
					<method>
						<name>addError</name>
						<alias>jsx.tunit.framework.TestListener.addError</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.TestListener.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>TestListener</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startTest</name>
				<alias>jsx.tunit.framework.TestListener.startTest</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>endTest</name>
				<alias>jsx.tunit.framework.TestListener.endTest</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSuccess</name>
				<alias>jsx.tunit.framework.TestListener.addSuccess</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addFailure</name>
				<alias>jsx.tunit.framework.TestListener.addFailure</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_failure</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addError</name>
				<alias>jsx.tunit.framework.TestListener.addError</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_error</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.TestListener.getName</name>
				<alias>jsx.tunit.framework.TestListener.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.TestListener.getClass</alias>
				<memberof>jsx.tunit.framework.TestListener</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/TestResult.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.TestResult</name>
				<alias>jsx.tunit.framework.TestResult</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>addListener</name>
						<alias>jsx.tunit.framework.TestResult.addListener</alias>
					</method>
				
					<method>
						<name>removeListener</name>
						<alias>jsx.tunit.framework.TestResult.removeListener</alias>
					</method>
				
					<method>
						<name>runCount</name>
						<alias>jsx.tunit.framework.TestResult.runCount</alias>
					</method>
				
					<method>
						<name>successCount</name>
						<alias>jsx.tunit.framework.TestResult.successCount</alias>
					</method>
				
					<method>
						<name>getSuccesses</name>
						<alias>jsx.tunit.framework.TestResult.getSuccesses</alias>
					</method>
				
					<method>
						<name>addSuccess</name>
						<alias>jsx.tunit.framework.TestResult.addSuccess</alias>
					</method>
				
					<method>
						<name>failureCount</name>
						<alias>jsx.tunit.framework.TestResult.failureCount</alias>
					</method>
				
					<method>
						<name>getFailures</name>
						<alias>jsx.tunit.framework.TestResult.getFailures</alias>
					</method>
				
					<method>
						<name>addFailure</name>
						<alias>jsx.tunit.framework.TestResult.addFailure</alias>
					</method>
				
					<method>
						<name>errorCount</name>
						<alias>jsx.tunit.framework.TestResult.errorCount</alias>
					</method>
				
					<method>
						<name>getErrors</name>
						<alias>jsx.tunit.framework.TestResult.getErrors</alias>
					</method>
				
					<method>
						<name>addError</name>
						<alias>jsx.tunit.framework.TestResult.addError</alias>
					</method>
				
					<method>
						<name>startTest</name>
						<alias>jsx.tunit.framework.TestResult.startTest</alias>
					</method>
				
					<method>
						<name>endTest</name>
						<alias>jsx.tunit.framework.TestResult.endTest</alias>
					</method>
				
					<method>
						<name>wasSuccessful</name>
						<alias>jsx.tunit.framework.TestResult.wasSuccessful</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.framework.TestResult.run</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.TestResult.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>TestResult</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addListener</name>
				<alias>jsx.tunit.framework.TestResult.addListener</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeListener</name>
				<alias>jsx.tunit.framework.TestResult.removeListener</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_listener</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runCount</name>
				<alias>jsx.tunit.framework.TestResult.runCount</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>successCount</name>
				<alias>jsx.tunit.framework.TestResult.successCount</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getSuccesses</name>
				<alias>jsx.tunit.framework.TestResult.getSuccesses</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSuccess</name>
				<alias>jsx.tunit.framework.TestResult.addSuccess</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>failureCount</name>
				<alias>jsx.tunit.framework.TestResult.failureCount</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getFailures</name>
				<alias>jsx.tunit.framework.TestResult.getFailures</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addFailure</name>
				<alias>jsx.tunit.framework.TestResult.addFailure</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>errorCount</name>
				<alias>jsx.tunit.framework.TestResult.errorCount</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getErrors</name>
				<alias>jsx.tunit.framework.TestResult.getErrors</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addError</name>
				<alias>jsx.tunit.framework.TestResult.addError</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startTest</name>
				<alias>jsx.tunit.framework.TestResult.startTest</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>endTest</name>
				<alias>jsx.tunit.framework.TestResult.endTest</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>wasSuccessful</name>
				<alias>jsx.tunit.framework.TestResult.wasSuccessful</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.framework.TestResult.run</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.TestResult.getName</name>
				<alias>jsx.tunit.framework.TestResult.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.TestResult.getClass</alias>
				<memberof>jsx.tunit.framework.TestResult</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/framework/TestSuite.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.tunit.framework.TestSuite</name>
				<alias>jsx.tunit.framework.TestSuite</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>String</type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>__isTestMethod__</name>
						<alias>jsx.tunit.framework.TestSuite.__isTestMethod__</alias>
					</method>
				
					<method>
						<name>__addTestMethod__</name>
						<alias>jsx.tunit.framework.TestSuite.__addTestMethod__</alias>
					</method>
				
					<method>
						<name>getName</name>
						<alias>jsx.tunit.framework.TestSuite.getName</alias>
					</method>
				
					<method>
						<name>getTestClass</name>
						<alias>jsx.tunit.framework.TestSuite.getTestClass</alias>
					</method>
				
					<method>
						<name>countTestCases</name>
						<alias>jsx.tunit.framework.TestSuite.countTestCases</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.framework.TestSuite.run</alias>
					</method>
				
					<method>
						<name>runTest</name>
						<alias>jsx.tunit.framework.TestSuite.runTest</alias>
					</method>
				
					<method>
						<name>addTest</name>
						<alias>jsx.tunit.framework.TestSuite.addTest</alias>
					</method>
				
					<method>
						<name>addTestSuite</name>
						<alias>jsx.tunit.framework.TestSuite.addTestSuite</alias>
					</method>
				
					<method>
						<name>testAt</name>
						<alias>jsx.tunit.framework.TestSuite.testAt</alias>
					</method>
				
					<method>
						<name>testCount</name>
						<alias>jsx.tunit.framework.TestSuite.testCount</alias>
					</method>
				
					<method>
						<name>getTests</name>
						<alias>jsx.tunit.framework.TestSuite.getTests</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.framework.TestSuite.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>TestSuite</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getName</name>
				<alias>jsx.tunit.framework.TestSuite.getName</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTestClass</name>
				<alias>jsx.tunit.framework.TestSuite.getTestClass</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>countTestCases</name>
				<alias>jsx.tunit.framework.TestSuite.countTestCases</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.framework.TestSuite.run</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runTest</name>
				<alias>jsx.tunit.framework.TestSuite.runTest</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addTest</name>
				<alias>jsx.tunit.framework.TestSuite.addTest</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addTestSuite</name>
				<alias>jsx.tunit.framework.TestSuite.addTestSuite</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_testClass</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>testAt</name>
				<alias>jsx.tunit.framework.TestSuite.testAt</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_index</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>testCount</name>
				<alias>jsx.tunit.framework.TestSuite.testCount</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTests</name>
				<alias>jsx.tunit.framework.TestSuite.getTests</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.framework.TestSuite.getName</name>
				<alias>jsx.tunit.framework.TestSuite.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.framework.TestSuite.getClass</alias>
				<memberof>jsx.tunit.framework.TestSuite</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/htmlgui/ResultPrinter.js">
		<overview>
			<name>ResultPrinter.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.htmlgui.ResultPrinter</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>formatException</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.formatException</alias>
					</method>
				
					<method>
						<name>print</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.print</alias>
					</method>
				
					<method>
						<name>startTest</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.startTest</alias>
					</method>
				
					<method>
						<name>endTest</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.endTest</alias>
					</method>
				
					<method>
						<name>addSuccess</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.addSuccess</alias>
					</method>
				
					<method>
						<name>addFailure</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.addFailure</alias>
					</method>
				
					<method>
						<name>addError</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.addError</alias>
					</method>
				
					<method>
						<name>printResult</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.printResult</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.htmlgui.ResultPrinter.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>formatException</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.formatException</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_exception</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>print</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.print</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_runTime</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startTest</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.startTest</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>endTest</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.endTest</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSuccess</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.addSuccess</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addFailure</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.addFailure</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_failure</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addError</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.addError</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_error</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>printResult</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.printResult</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_char</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.htmlgui.ResultPrinter.getName</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.htmlgui.ResultPrinter.getClass</alias>
				<memberof>jsx.tunit.htmlgui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/htmlgui/TestRunner.js">
		<overview>
			<name>TestRunner.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.htmlgui.TestRunner</name>
				<alias>jsx.tunit.htmlgui.TestRunner</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>runTest</name>
						<alias>jsx.tunit.htmlgui.TestRunner.runTest</alias>
					</method>
				
					<method>
						<name>runSuite</name>
						<alias>jsx.tunit.htmlgui.TestRunner.runSuite</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.htmlgui.TestRunner.run</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.htmlgui.TestRunner.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runTest</name>
				<alias>jsx.tunit.htmlgui.TestRunner.runTest</alias>
				<memberof>jsx.tunit.htmlgui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runSuite</name>
				<alias>jsx.tunit.htmlgui.TestRunner.runSuite</alias>
				<memberof>jsx.tunit.htmlgui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_testSuite</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.htmlgui.TestRunner.run</alias>
				<memberof>jsx.tunit.htmlgui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.htmlgui.TestRunner.getName</name>
				<alias>jsx.tunit.htmlgui.TestRunner.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.htmlgui.TestRunner.getClass</alias>
				<memberof>jsx.tunit.htmlgui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/runner/BaseTestRunner.js">
		<overview>
			<name>BaseTestRunner.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.runner.BaseTestRunner</name>
				<alias>jsx.tunit.runner.BaseTestRunner</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>getTest</name>
						<alias>jsx.tunit.runner.BaseTestRunner.getTest</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.runner.BaseTestRunner.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTest</name>
				<alias>jsx.tunit.runner.BaseTestRunner.getTest</alias>
				<memberof>jsx.tunit.runner.BaseTestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_testSuiteClass</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.runner.BaseTestRunner.getName</name>
				<alias>jsx.tunit.runner.BaseTestRunner.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.runner.BaseTestRunner.getClass</alias>
				<memberof>jsx.tunit.runner.BaseTestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/textui/ResultPrinter.js">
		<overview>
			<name>ResultPrinter.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.textui.ResultPrinter</name>
				<alias>jsx.tunit.textui.ResultPrinter</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>printStart</name>
						<alias>jsx.tunit.textui.ResultPrinter.printStart</alias>
					</method>
				
					<method>
						<name>printEnd</name>
						<alias>jsx.tunit.textui.ResultPrinter.printEnd</alias>
					</method>
				
					<method>
						<name>startTest</name>
						<alias>jsx.tunit.textui.ResultPrinter.startTest</alias>
					</method>
				
					<method>
						<name>endTest</name>
						<alias>jsx.tunit.textui.ResultPrinter.endTest</alias>
					</method>
				
					<method>
						<name>addSuccess</name>
						<alias>jsx.tunit.textui.ResultPrinter.addSuccess</alias>
					</method>
				
					<method>
						<name>addFailure</name>
						<alias>jsx.tunit.textui.ResultPrinter.addFailure</alias>
					</method>
				
					<method>
						<name>addError</name>
						<alias>jsx.tunit.textui.ResultPrinter.addError</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.textui.ResultPrinter.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>printStart</name>
				<alias>jsx.tunit.textui.ResultPrinter.printStart</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>printEnd</name>
				<alias>jsx.tunit.textui.ResultPrinter.printEnd</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_result</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_runTime</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startTest</name>
				<alias>jsx.tunit.textui.ResultPrinter.startTest</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>endTest</name>
				<alias>jsx.tunit.textui.ResultPrinter.endTest</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addSuccess</name>
				<alias>jsx.tunit.textui.ResultPrinter.addSuccess</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addFailure</name>
				<alias>jsx.tunit.textui.ResultPrinter.addFailure</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_failure</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addError</name>
				<alias>jsx.tunit.textui.ResultPrinter.addError</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_error</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.textui.ResultPrinter.getName</name>
				<alias>jsx.tunit.textui.ResultPrinter.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.textui.ResultPrinter.getClass</alias>
				<memberof>jsx.tunit.textui.ResultPrinter</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/tunit/textui/TestRunner.js">
		<overview>
			<name>TestRunner.js</name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.textui.TestRunner</name>
				<alias>jsx.tunit.textui.TestRunner</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>runTest</name>
						<alias>jsx.tunit.textui.TestRunner.runTest</alias>
					</method>
				
					<method>
						<name>runSuite</name>
						<alias>jsx.tunit.textui.TestRunner.runSuite</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.tunit.textui.TestRunner.run</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.tunit.textui.TestRunner.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runTest</name>
				<alias>jsx.tunit.textui.TestRunner.runTest</alias>
				<memberof>jsx.tunit.textui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>runSuite</name>
				<alias>jsx.tunit.textui.TestRunner.runSuite</alias>
				<memberof>jsx.tunit.textui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_testSuite</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.tunit.textui.TestRunner.run</alias>
				<memberof>jsx.tunit.textui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_test</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.tunit.textui.TestRunner.getName</name>
				<alias>jsx.tunit.textui.TestRunner.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.tunit.textui.TestRunner.getClass</alias>
				<memberof>jsx.tunit.textui.TestRunner</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/util/scheduler/Scheduler.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.util.scheduler.Scheduler</name>
				<alias>jsx.util.scheduler.Scheduler</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params></params>
				<properties></properties>
				<methods>
					<method>
						<name>start</name>
						<alias>jsx.util.scheduler.Scheduler.start</alias>
					</method>
				
					<method>
						<name>stop</name>
						<alias>jsx.util.scheduler.Scheduler.stop</alias>
					</method>
				
					<method>
						<name>pause</name>
						<alias>jsx.util.scheduler.Scheduler.pause</alias>
					</method>
				
					<method>
						<name>pauseResume</name>
						<alias>jsx.util.scheduler.Scheduler.pauseResume</alias>
					</method>
				
					<method>
						<name>getTaskByReference</name>
						<alias>jsx.util.scheduler.Scheduler.getTaskByReference</alias>
					</method>
				
					<method>
						<name>addTask</name>
						<alias>jsx.util.scheduler.Scheduler.addTask</alias>
					</method>
				
					<method>
						<name>deleteTask</name>
						<alias>jsx.util.scheduler.Scheduler.deleteTask</alias>
					</method>
				
					<method>
						<name>startTask</name>
						<alias>jsx.util.scheduler.Scheduler.startTask</alias>
					</method>
				
					<method>
						<name>stopTask</name>
						<alias>jsx.util.scheduler.Scheduler.stopTask</alias>
					</method>
				
					<method>
						<name>pauseTask</name>
						<alias>jsx.util.scheduler.Scheduler.pauseTask</alias>
					</method>
				
					<method>
						<name>isRunning</name>
						<alias>jsx.util.scheduler.Scheduler.isRunning</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.util.scheduler.Scheduler.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Scheduler</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>start</name>
				<alias>jsx.util.scheduler.Scheduler.start</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stop</name>
				<alias>jsx.util.scheduler.Scheduler.stop</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pause</name>
				<alias>jsx.util.scheduler.Scheduler.pause</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_length</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pauseResume</name>
				<alias>jsx.util.scheduler.Scheduler.pauseResume</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getTaskByReference</name>
				<alias>jsx.util.scheduler.Scheduler.getTaskByReference</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>addTask</name>
				<alias>jsx.util.scheduler.Scheduler.addTask</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_args</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_runInterval</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>deleteTask</name>
				<alias>jsx.util.scheduler.Scheduler.deleteTask</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>startTask</name>
				<alias>jsx.util.scheduler.Scheduler.startTask</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stopTask</name>
				<alias>jsx.util.scheduler.Scheduler.stopTask</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>pauseTask</name>
				<alias>jsx.util.scheduler.Scheduler.pauseTask</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_length</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isRunning</name>
				<alias>jsx.util.scheduler.Scheduler.isRunning</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.util.scheduler.Scheduler.getName</name>
				<alias>jsx.util.scheduler.Scheduler.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.util.scheduler.Scheduler.getClass</alias>
				<memberof>jsx.util.scheduler.Scheduler</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/util/scheduler/Task.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.util.scheduler.Task</name>
				<alias>jsx.util.scheduler.Task</alias>
				<memberof></memberof>
				<type></type>
				<desc></desc>
				<params>
					<param>
						<type>Function</type>
						<name>_block</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Object</type>
						<name>_object</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Array</type>
						<name>_args</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_runInterval</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>start</name>
						<alias>jsx.util.scheduler.Task.start</alias>
					</method>
				
					<method>
						<name>stop</name>
						<alias>jsx.util.scheduler.Task.stop</alias>
					</method>
				
					<method>
						<name>run</name>
						<alias>jsx.util.scheduler.Task.run</alias>
					</method>
				
					<method>
						<name>isRunning</name>
						<alias>jsx.util.scheduler.Task.isRunning</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.util.scheduler.Task.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Task</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>start</name>
				<alias>jsx.util.scheduler.Task.start</alias>
				<memberof>jsx.util.scheduler.Task</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>stop</name>
				<alias>jsx.util.scheduler.Task.stop</alias>
				<memberof>jsx.util.scheduler.Task</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>run</name>
				<alias>jsx.util.scheduler.Task.run</alias>
				<memberof>jsx.util.scheduler.Task</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>isRunning</name>
				<alias>jsx.util.scheduler.Task.isRunning</alias>
				<memberof>jsx.util.scheduler.Task</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.util.scheduler.Task.getName</name>
				<alias>jsx.util.scheduler.Task.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.util.scheduler.Task.getClass</alias>
				<memberof>jsx.util.scheduler.Task</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
	<file path="../jssdk/output/jsx/util/session/Session.js">
		<overview>
			<name></name>
			<desc></desc>
		</overview>
		
		<symbols>
			
			<symbol isa="CONSTRUCTOR">
				<name>jsx.util.session.Session</name>
				<alias>jsx.util.session.Session</alias>
				<memberof></memberof>
				<type></type>
				<desc>API over the cookies object</desc>
				<params>
					<param>
						<type>String</type>
						<name>_id</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>Number</type>
						<name>_hours</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_path</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_domain</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type>String</type>
						<name>_secure</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods>
					<method>
						<name>resetSession</name>
						<alias>jsx.util.session.Session.resetSession</alias>
					</method>
				
					<method>
						<name>getAttribute</name>
						<alias>jsx.util.session.Session.getAttribute</alias>
					</method>
				
					<method>
						<name>setAttribute</name>
						<alias>jsx.util.session.Session.setAttribute</alias>
					</method>
				
					<method>
						<name>removeAttribute</name>
						<alias>jsx.util.session.Session.removeAttribute</alias>
					</method>
				
					<method>
						<name>getAttributeNames</name>
						<alias>jsx.util.session.Session.getAttributeNames</alias>
					</method>
				
					<method>
						<name>invalidate</name>
						<alias>jsx.util.session.Session.invalidate</alias>
					</method>
				
					<method>
						<name>getClass</name>
						<alias>jsx.util.session.Session.getClass</alias>
					</method>
				</methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags>
					<tag title="class">
						<type></type>
						<desc>Session</desc>
					</tag>
				</tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>resetSession</name>
				<alias>jsx.util.session.Session.resetSession</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getAttribute</name>
				<alias>jsx.util.session.Session.getAttribute</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>setAttribute</name>
				<alias>jsx.util.session.Session.setAttribute</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				
					<param>
						<type></type>
						<name>_value</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>removeAttribute</name>
				<alias>jsx.util.session.Session.removeAttribute</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params>
					<param>
						<type></type>
						<name>_name</name>
						<desc></desc>
						<optional>false</optional>
					</param>
				</params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getAttributeNames</name>
				<alias>jsx.util.session.Session.getAttributeNames</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>invalidate</name>
				<alias>jsx.util.session.Session.invalidate</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>jsx.util.session.Session.getName</name>
				<alias>jsx.util.session.Session.getName</alias>
				<memberof></memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
			<symbol isa="FUNCTION">
				<name>getClass</name>
				<alias>jsx.util.session.Session.getClass</alias>
				<memberof>jsx.util.session.Session</memberof>
				<type></type>
				<desc>undocumented</desc>
				<params></params>
				<properties></properties>
				<methods></methods>
				<returns></returns>
				<exceptions></exceptions>
				<tags></tags>
			</symbol>
			
		</symbols>
		
	</file>
	
</jsdoc>