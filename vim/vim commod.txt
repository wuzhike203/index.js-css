#{motion}移动命令
==============================================================================
1.1     fx          移动当前行的下一个x处(f; 重复上一个f命令)
1.2     tx          移动到x的左边一个位置
1.3     Fx          往回找
1.4     w
1.5     b
1.6     e
1.7     ^
1.8     $
1.9     )           移动到下一个句子
1.10    (           移动到上一个句子
1.11    {/}
1.11    aw          单词
------------------------------------------------------------------------------

#{visual}产生区域
==============================================================================
1       v
==============================================================================

#编辑命令
==============================================================================
1   插入(进入插入模式)
-------------------------------------------
    i       前插
    a       后插

2   替换(保留在命令模式)
-------------------------------------------
    r       替换单个字符
    R       后续字母输入一直替换原有文本

3   修改(进入插入模式)
-------------------------------------------
3.2 单个字符
    s       删除当前字符, 并进入插入模式
    数字 + s : 删除多个字符
3.3 文本块 c
    cc
    C
    c + {motion}
    {visula} + c

4   删除 (保留在命令模式)
-------------------------------------------
4.1 删除单个字符
    x
    数字 + x : 删除多个字符
4.2 删除文本块 d
    dd
    D
    d + {motion}
    {visula} + d

5   复制 (保留在命令模式)
-------------------------------------------
5.1 复制文本块
    yy
    y + {motion}
    {visual} + y
==============================================================================


#[count]多少行
==============================================================================
    number
------------------------------------------------------------------------------

#[range]范围参数,从起始到结束的行数
==============================================================================
    start, end
    ""          为空，则为当前行
    %           所有行
    ^           首行
    $           末行
------------------------------------------------------------------------------

#fold
==============================================================================
// create and delete folds
------------------------------------------------------------------------------
1   zf{motion}/{Visual}zf           创建折叠   
2   [count]zF                       创建折叠
3   :{range}fo(ld)                  创建折叠

4   zd                              删除 鼠标处 一个嵌套层次的折叠(nest)
5   zD                              删除 鼠标处 所有嵌套层次的折叠(nest)
6   zE                              删除 文本中 所有嵌套层次的折叠(nest)
------------------------------------------------------------------------------

------------------------------------------------------------------------------
// open and close folds
------------------------------------------------------------------------------
// 鼠标处
1   zo[count]                       打开 鼠标处 多个嵌套层次的折叠
2   zO                              打开 鼠标处 所有嵌套层次的折叠
3   zc[count]                       关闭 鼠标处 多个嵌套层次的折叠
4   zC                              关闭 鼠标处 所有嵌套层次的折叠
5   za[count]                       开关 鼠标处 多个嵌套层次的折叠
6   zA                              开关 鼠标处 所有嵌套层次的折叠
7   zv                              打开 鼠标处 有限嵌套层次的折叠: 保证鼠标处处于打开状态
8   zx                              
9   zX                              
// 所有的
// fold level
10  zm                              减少 所有的 折叠层次 一层 : set foldlevel - 1
11  zM                              减少 所有的 折叠层次 to 0 : set foldlevel to 0
12  zr                              加大 所有的 折叠层次 一层 : set foldlevel + 1
13  zR                              加大 所有的 折叠层次 最大 : set foldlevel to highest fold level
// :
14  :{range}foldo[pen][!]           打开 一层 折叠(!: 打开所有层次的折叠)
15  :{range}foldc[lose][!]          关闭 一层 折叠(!: 关闭所有层次的折叠)
//
16  zn                              撤销折叠, reset 'foldenable'
17  zN                              恢复折叠到zn之前的水平
18  zi                              反转 zn/zN
------------------------------------------------------------------------------

------------------------------------------------------------------------------
// moving over folds
------------------------------------------------------------------------------
1   [z                              移动到当前打开折叠的开始位置
2   ]z                              移动到当前打开折叠的结束位置
3   zj                              向下移动到下一个折叠的开始位置
4   zk                              向上移动到上一个折叠的结束位置
------------------------------------------------------------------------------


------------------------------------------------------------------------------
// executing commands on folds
// 在折叠处执行命令
------------------------------------------------------------------------------
1   :[range]foldd[oopen] {cmd}      在所有行，除了关闭的折叠处, 执行命令
2   :[range]folddoc[losed] {cmd}    在所有关闭的折叠处, 执行命令
------------------------------------------------------------------------------

------------------------------------------------------------------------------
// fold option
------------------------------------------------------------------------------
1   colors      Folded/FoldColumn
    :highlight  Folded guibg=grey guifg=blue
    :highlight  FoldColumn guibg=grey guifg=blue

2   foldlevel
    foldlevel越低, 折叠越多
    foldlevel is 0, all folds are closed.

3   foldtext

4   foldcolumn  折叠层次的宽度缩进
------------------------------------------------------------------------------


#清除搜索关键字之后的高亮
==============================================================================
1   :noh


#命令中表示当前文件名
==============================================================================
1   %   当前完整的文件名
2   %:h 文件名的头部，即文件目录.例如../path/test.c就会为../path
3   %:t 文件名的尾部.例如../path/test.c就会为test.c
4   %:r 无扩展名的文件名.例如../path/test就会成为test
5   %:e 扩展名


#:new/:e---新建/打开文件
==============================================================================
1   :new newfile.extend        保留现有文件窗口, 将窗口水平分割, 新建一个文件
    :vsp new filename           垂直分割窗口
2   :e   filename.extend       在现有文件窗口中, 新建, 打开或刷新一个文件


#不退出vim,重新刷新文件
==============================================================================
1   重新载入当前文件
------------------------------------------------------------------------------
    :e                  // 保存所做修改,
    :e!                 // 放弃当前修改, 强制重新载入

2   重新载入所有打开的文件
------------------------------------------------------------------------------
    :bufdo e            // 保存所做修改,
    :bufdo e!           // 放弃当前修改, 强制重新载入
    // bufdo命令表示: 把后面的命令应用到所有buffer中的文件


#vim颜色配置方案中的颜色代表数字(彩色终端)
==============================================================================
1：darkred
2：darkgreen
3：darkyellow
4：darkblue
5：darkcyan(深紫色)
6：darkcyan(深蓝绿色)
7：灰色
>8：白色



#vim中插入特殊字符
==============================================================================
1、知道字符编码
------------------------------------------------------------------------------
    //查看帮助 :h  i_CTRL-V_digit
    //使用 ga 查看光标处的字符编码 
    1.1 非unicode编码的字符
        <C-v>XXX        
        // XXX: 3位的10进制字符编码
        如：<C-v>065: 相当于字母A
    1.2 unicode编码的字符
        <C-v>uXXXX
        如：<C-v>u: 相当于 ¿

2、知道二合字母
------------------------------------------------------------------------------
    //查看帮助:h  digraphs-default
    <C-k>{char1}{char2}

    // 几个常见的符号
    char    {char1}{char2}
    ----------------------------
    ©       Co
    ®       Rg
    ±       +-
    µ       My
    ¶       PI
    ¼       14
    ÷       -:
    ‰       %0

    ⅲ       3r 
    Ⅲ       3R
    ㈠      1c
    ㈨      9c

    ←       <-
    →       ->
    ↑       -!
    ↓       -v
    ∠       -V
    ↔       <>          <>
    ↕       UD

    ∆       DE
    ∇       NB
    ░       .S
    ☆       *1
    ★       *2



#vim diff
==============================================================================
1   show different
------------------------------------------------------------------------------
    1.1 在cmd中:
        gvim -d file1 file2
    1.2 在vim中:
        // 垂直比较
        :vertical diffs[plit] file2 
        // 水平比较
        :diffs[plit] file2 

2   在差异间跳转
------------------------------------------------------------------------------
    向下跳：]c
    向上跳：[c

3   有时diff会卡住
------------------------------------------------------------------------------
    使用:diffupdate 刷新

4   merge 
------------------------------------------------------------------------------
    :diffpu(t)
    :diffg(et)
    
#linux下VIM安装
==============================================================================
1   查看版本
------------------------------------------------------------------------------
    vim --version 

2、vim的配置文件位置(查看vim的大部分的安装信息)
------------------------------------------------------------------------------
	// 全局配置文件(所有用户都有效)
	2.1 先使用vim --version查看vim的主程序目录$vim;则配置文件为：$vim/vimrc
	2.2 其他颜色，脚本等文件在$vim/vim73/下
	// 用户自个的配置文件(对单个用户有效，优先级最高)
	2.3 在用户主目录/home/$user/下的: .vimrc 或者 .vim/.vimrc

3、linux 安装方式 apt-get 和 源码安装
------------------------------------------------------------------------------
    使用apt-get/yum安装时，有时出现文件不全的现象

4、颜色配置方案中
------------------------------------------------------------------------------
    // 对应3中设备: GUI, 彩色终端cterm, 黑白终端term
    // 对不同的设备，要分别设置
	// window中的vim应该使用GUI,linux下的应该使用cterm


#VIM命令
==============================================================================
1   :  调用vim命令
2   ！ 调用cmd命令
3   r  插入cmd命令的结果到vim中
    示例：
        :r !python xxx.py      
        // 把xxx.py的运行结果插入到vim的当前位置


#VIM查找映射
==============================================================================
1   :verbose map xxx
------------------------------------------------------------------------------
    示例:
        verbose map <c-r>

#调用函数
==============================================================================
1   normal模式下调用函数
------------------------------------------------------------------------------
    exe "nmap <F6> :call " . function-name
    //namp <F6> :call function()

2   插入模式下
------------------------------------------------------------------------------
    imap <silent> <C-D><C-D> <C-R>=strftime("%e %b %Y")<CR> 
        :表示 在当前位置插入格式化日期 #<C-R>=  插入
    imap <silent> <C-T><C-T> <C-R>=strftime("%l:%M %p")<CR>

    //插入日期
    strftime("%d/%m/%y %H:%M:%S")<cr>

#添加vim到右键菜单
==============================================================================
    :! install


#tab与空格
==============================================================================
1   在.vimrc中添加以下代码后，重启vim即可实现按TAB产生4个空格：
------------------------------------------------------------------------------
    set ts=4            // 注：ts是tabstop的缩写，设TAB宽4个空格
    set expandtab       // 将tab用space来代替

2   对于已保存的文件，可以使用下面的方法进行空格和TAB的替换：
------------------------------------------------------------------------------
    :%retab!

3   空格替换为TAB：
------------------------------------------------------------------------------
    :set ts=4
    :set noexpandtab
    :%retab!


#   
==============================================================================
