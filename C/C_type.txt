C语言数据类型及转换规则

=========================================================================================
1   inches                  英寸
2   feet                    英尺
3   yard                    码

// 转换规则
1yard = 3 feet
1 feet = 12 inches
=========================================================================================


// (无符号就是在符号前面加上 unsigned)
=========================================================================================
序号    符号                字节数  下限            上限            sizeof()        常量声明 
=========================================================================================
// 整形 
1       char                1       CHAR_MIN        CHAR_MAX                    
        unsigned char       1       0               UCHAR_MAX
2       short               2       SHRT_MIN        SHRT_MAX 
        unsigned short      2       0               USHRT_MAX 
3       int                 4       INT_MIN         INT_MAX                     100
        unsigned int        4       0               UINT_MAX                    100U
4       long                4       LONG_MIN        LONG_MAX        long        100L
        unsigned long       4       0               ULONG_MAX                   100UL
5       long long           8       LLONG_MIN       LLONG_MAX                   100LL
        unsigned long long  8       0               ULLONG_MAX                  100ULL

// 浮点型                           最小正数        最大正数    最大小数位数    常量声明
1       float               4       FLT_MIN         FLT_MAX     FLT_DIG         2.2f
2       double              8       DBL_MIN         DBL_MAX     DBL_DIG         2.2
3       long double         12      LDBL_MIN        LDBL_MAX    LDBL_DIG        2.2L

#转换说明符含义(%[-][width][.precision][modifier]character)
=============================================================================
序号    符号                说明
=============================================================================
1       -                   左对齐(没有, 就是右对齐)
2       width               总宽度
3       precision           小数位数
4       character:
        ---------------------------------------------------
        c                   字符

        x                   有符号4字节16进制整数(小写)
        X                   有符号4字节16进制整数(大写)

        hd                  有符号2字节整数
        d                   有符号4字节整数
        ld                  有符号4字节整数
        lld                 有符号8字节整数

        u                   无符号4字节整数
        lu                  无符号4字节整数
        llu                 无符号8字节整数

        e/f                 float
        Le/lf               double

        p                   内存地址(16进制)
                            // 内存地址一般是32位或64位
        zd                  size_t


#枚举类型/布尔类型
=============================================================================


#op=
=============================================================================
n += m;
n -= m;
n *= m;
n /= m;
n %= m;
<< >> & ^ |

#
=============================================================================
1   size_t      整数类型
2   char*       内存中的地址(char的指针)



#c11字符串处理
=============================================================================
序号    描述                标准函数            扩展函数    
1       确定字符串长度      strlen(str)         strnlen_s(str, sizeof(str))
2       复制字符串          strcpy(dst, sre)    strcpy_s(dst, sizeof(dst), sre)
                                                strncpy_s(dst, sizeof(dst), sre, num)
3       连接字符串          strcat(dst, sre)    strcat_s(dst, sizeof(dst), sur)
                                                strncat_s(dst, sizeof(dst), sre, num)




// 18-01-17 11:02:27 编译过程
// http://blog.csdn.net/koudaidai/article/details/8092647
1 预处理(Preprocessing)
2 编译(Compilation)
3 汇编(Assembly)
4 链接(Linking)

1.       预处理(Preproceessing)
----------------------------------------------------------------------
    预处理的过程主要处理包括以下过程：

    将所有的#define删除，并且展开所有的宏定义
    处理所有的条件预编译指令，比如#if #ifdef #elif #else #endif等
    处理#include 预编译指令，将被包含的文件插入到该预编译指令的位置。
    删除所有注释 “//”和”/* */”.
    添加行号和文件标识，以便编译时产生调试用的行号及编译错误警告行号。
    保留所有的#pragma编译器指令，因为编译器需要使用它们
     
    通常使用以下命令来进行预处理：
    gcc -E hello.c -o hello.i
    参数-E表示只进行预处理 或者也可以使用以下指令完成预处理过程
    cpp hello.c > hello.i      /*  cpp – The C Preprocessor  */
    直接cat hello.i 你就可以看到预处理后的代码

2.       编译(Compilation)
----------------------------------------------------------------------
    编译过程就是把预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码。
    $gcc –S hello.i –o hello.s
    或者
    $ /usr/lib/gcc/i486-linux-gnu/4.4/cc1 hello.c

3.       汇编(Assembly)
----------------------------------------------------------------------
    汇编器是将汇编代码转变成机器可以执行的命令，每一个汇编语句几乎都对应一条机器指令。汇编相对于编译过程比较简单，根据汇编指令和机器指令的对照表一一翻译即可。
    $ gcc –c hello.c –o hello.o
    或者
    $ as hello.s –o hello.co
    由于hello.o的内容为机器码，不能以普通文本形式的查看（vi 打开看到的是乱码）。


4.       链接(Linking)
----------------------------------------------------------------------
    通过调用链接器ld来链接程序运行需要的一大堆目标文件，以及所依赖的其它库文件，最后生成可执行文件。
    ld -static crt1.o crti.o crtbeginT.o hello.o -start-group -lgcc -lgcc_eh -lc-end-group crtend.o crtn.o (省略了文件的路径名)。
