// jquery problem
==========================================================
1   不支持 change事件
2   不支持 移动端事件
3   事件对象e与原生不一致
==========================================================



// 重要知识点
==========================================================
1   html基础
2   webGL1, WebGL2, OpenGL.ES3.0
3   canvas
4   http协议
5   mime常用类型(pdf, doc, img, audio, vedio等)
==========================================================

// 2017 网页设计新趋势
==========================================================
1   响应式设计
        电脑、平板、手机等都有很好的体验
2   数据可视化
        人们越来越厌烦纯数字表现, 将数据以图表等的可视化
    方式展示
3   字体多样式; 大字体突出显示
4   极简主义

// 排版
==========================================================
    //公共样式表：
    ------------------------------------------------------
    序号        种类
    ------------------------------------------------------
    1       p,h1~h6等排版
    2       btn
    3       arrow/caret
    4       a,samp等字体继承           
    5       在webkit下input等的outline
    ------------------------------------------------------
    
    //功能
    ------------------------------------------------------
    1       #ff9900, #ccc 等各种颜色
    2       table
    3       callout             特别说明
    4       example             例子
    5       highlight           高亮(比如：代码片段)
    6       docs                文档说明
    7       section             章节
    8       validation          校验
    9       status              状态
    ------------------------------------------------------

    // 一、排版
    ------------------------------------------------------
    1       h1~h6               标题           
    2       small               副标题
    3       .lead               中心内容

    4       p                   页面主体

    5       内联文本元素
            mark
            ins
            del

            small
            big
            sub
            sup
            strong/b
            em/i
            -----------------------------
            <ruby> 元素：由一个或多个字符（需要一个解释/发音）,
                         一个提供信息的 rt 元素组成，
                         还包括可选的 rp 元素，定义当浏览器不支持 "ruby" 元素时显示的内容。

            <rp> 定义注释(不支持 ruby 元素的浏览器所显示的内容)
            <rt> 定义解释或发音

            <ruby>
            漢 <rt><rp>(</rp>han<rp>)</rp></rt>         //注释在字符旁边
            </ruby>

            <ruby>
            漢 <rt>han</rt>         //注释在字符上边
            </ruby>
            -----------------------------

    6       纯语义元素
            -----------------------------
            abbr
            <abbr title="etcetera">etc.</abbr>
            -----------------------------
            <time>
                //该元素能够以机器可读的方式对日期和时间进行编码，
                //这样，举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，
                //搜索引擎也能够生成更智能的搜索结果。
                例如：
                    我在 <time datetime="2010-02-14" pubdate="pubdate">情人节</time> 有个约会。
                //pubdate属性指示:
                    <time>元素中的日期/时间是文档(或最近的前辈<article>元素)的发布日期。
            -----------------------------
            address
            -----------------------------

    7       引用
            blockquote              引用块
            q                       引用内联
            它们都有个cite属性：indicate引用的来源

            另：cite标签：引用的来源
                 .footer: 引用地址

    ------------------------------------------------------

    // 二、代码
    ------------------------------------------------------
    1       pre                     代码块
    2       code                    代码 内联
    3       var                     代码中的变量
    4       kbd                     由键盘输入的字符
    5       samp                    输出代码
    ------------------------------------------------------

    // 三、列表
    ------------------------------------------------------
    1       ul                      无序
    2       ol                      有序
    3       dl                      定义列表
    ------------------------------------------------------

    // 四、table
    ------------------------------------------------------
    1   table
    2   table-default
    3   table-striped
    4   table-bordered
    5   table-hover
    6   table-condensed
    ------------------------------------------------------

    // 五、状态类
    ------------------------------------------------------
    0   default
    1   active                      激活类
    2   success
    3   primary
    4   info
    5   warning
    6   danger
    7   disabled                    禁用类
    8   muted                       减弱的
    9   visible
    10  hidden
    ------------------------------------------------------

    // 六、尺寸
    ------------------------------------------------------
    1   lg
    2   md
    3   sm
    4   xs
    ------------------------------------------------------

    // 七、图片
    ------------------------------------------------------
    1   rounded
    2   circle
    3   thumbnail
    ------------------------------------------------------

// html5        
==========================================================
    // 一、段落语义
    ------------------------------------------------------
    1   <article>
    2   <section>
    3   <aside>
    4   <footer>
    5   <header>
    6   <nav>
    7   <main>
    ------------------------------------------------------

    // 二、进度条: progress, meter 
    ------------------------------------------------------
    1   progress        
        <progress value="0.2"></progress>                                               
    2   meter           
        <meter min="0" max="20" value="17" low="5" high="15" optimum="10">15</meter>    
    ------------------------------------------------------

    // 三、details, summary
    ------------------------------------------------------
    1   details     // 描述文档部分的细节(动态的指示)
        <details open="show">
            <summary>I am a title.</summary>
            <p>我是隐藏的内容</p>
        </details>
    ------------------------------------------------------

    // 四、menu, menuitem
    ------------------------------------------------------
    1   <menu type="context/toolbar/list" label=""> 
            context：上下文；
            toolbar：工具栏；
            list：列表
            label ：菜单显示的名称。
    2   <menuitem label="" icon="" onclick="">
            label：菜单项显示的名称
            icon：在菜单项左侧显示的图标
            onclick：点击菜单项触发的事件
    示例1：
    <div contextmenu="mymenu" >右击我试试</div>
    <menu type="context" id="mymenu" >
      <menuitem label="菜单1" onclick="alert('这是菜单1');" 
            icon="http://d.lanrentuku.com/down/gif/gif-0145.gif"></menuitem>
      <menuitem label="菜单2" onclick="alert('这是菜单2');" 
            icon="http://d.lanrentuku.com/down/gif/gif-0161.gif"></menuitem>
      <menu label="菜单3">
        <menuitem label="菜单3-1" onclick="alert('这是菜单3-1');"
            icon="http://up.2cto.com/2012/0407/20120407090812492.gif"></menuitem>
        <menu label="菜单3-2" > 
           <menuitem label="菜单3-2-1" onclick="alert('这是菜单3-2-1');"
           icon="http://up.2cto.com/2012/0407/20120407090813196.gif"></menuitem>
        </menu>
      </menu>
    </menu>
    -----------------------------------------------------

    示例2：
    <menu>
        <li><input type="checkbox" />Red</li>
        <li><input type="checkbox" />blue</li>
    </menu>
    -----------------------------------------------------

// 标准属性
==========================================================
    ------------------------------------------------------
    1   contextmenu 
        // 上下文菜单，即鼠标右击元素会出现一个菜单
        <div contextmenu="mymenu" >右击我试试</div>
    ------------------------------------------------------
    2   accesskey
        //定义访问元素的热键，用alt+(shift)+accesskey访问(是点击, 不是选中)
        <div accesskey="b" onclick="alert('我被点击了')">
            使用 <kbd>alt</kbd> + <kbd>b</kbd> 
        </div>
    ------------------------------------------------------
    3   contenteditable
        // 元素内容是否可编辑
        <p contenteditable="true">这是一个可以编辑的段落.</p>
    ------------------------------------------------------
    4   data-yourvalue
        // 自定义属性
    ------------------------------------------------------

// Form
==========================================================
    ------------------------------------------------------
    // 一、新的表单元素
    ------------------------------------------------------
    1   datalist
        <input id="myCar" list="cars" />
        <datalist id="cars">
          <option value="BMW">
          <option value="Ford">
          <option value="Volvo">
        </datalist>

    // 二、新的Form属性
    ------------------------------------------------------
    1   autocomplete
    2   novalidate

    // 三、新的input属性
    ------------------------------------------------------
    1   autocomplete
    2   autofocus
    3   form
    4   form overrides (formaction, formenctype, formmethod, formnovalidate, formtarget)
    5   height 和 width
    6   list
    7   min, max 和 step
    8   multiple
    9   pattern (regexp)
    10  placeholder
    11  required

    // 四、新的input类型
    ------------------------------------------------------
    1   email
    2   url
    3   number
    4   range
    5   Date pickers (date, month, week, time, datetime, datetime-local)
    6   search
    7   color

// 特殊
==========================================================
    ------------------------------------------------------
    // 一、图片，映射，图片分区
    ------------------------------------------------------
    1   map
    2   area
        示例：
		<img src="planets.jpg" border="0" usemap="#planetmap" alt="Planets" />

		<map name="planetmap" id="planetmap">
		  <area shape="circle" coords="180,139,14" href ="venus.html" alt="Venus" />
		  <area shape="circle" coords="129,161,10" href ="mercur.html" alt="Mercury" />
		  <area shape="rect" coords="0,0,110,260" href ="sun.html" alt="Sun" />
		</map>
    ------------------------------------------------------

    // 二、多媒体
    ------------------------------------------------------
    1   <object>
        //定义一个嵌入的对象,多媒体
    2   <param>
        //为对象定义参数
        -------------------------------------------------
        <object id="Slider1" width="100" height="50">
          <param name="BorderStyle" value="1" />
          <param name="MousePointer" value="0" />
          <param name="Enabled" value="1" />
          <param name="Min" value="0" />
          <param name="Max" value="10" />
        </object>
    3   <track> 
        //标签为诸如 video 元素之类的媒介规定外部文本轨道。
        示例,播放带有字幕的视频：
        -------------------------------------------------
        <video width="320" height="240" controls="controls">
          <source src="forrest_gump.mp4" type="video/mp4" />
          <source src="forrest_gump.ogg" type="video/ogg" />
          <track kind="subtitles" src="subs_chi.srt" srclang="zh" label="Chinese">
          <track kind="subtitles" src="subs_eng.srt" srclang="en" label="English">
        </video>
    ------------------------------------------------------

    // 三、换行
    ------------------------------------------------------
    1   white-space: 
        // 决定换不换行
            换行 
    d           合并空格 normal/pre-line
                保留空格 pre-wrap
            不换行
                合并空格 nowrap
                保留空格 pre
    2   word-wrap:
        //当一个单词超过指定容器的边界时是否断行
        normal： 
            允许内容顶开或溢出指定的容器边界。
        break-word：
            内容将在边界内换行。如果需要，单词内部允许断行。
    3   wrod-break:
        //字内换行行为
    4   word-spacing: 
        //单词之间的间隔
    5   overflow  
        // 当对象的内容超过其指定高度及宽度时如何管理内容
    6   text-overflow
        // 只在overflow为hidden和scroll时，才起作用。

    // 四、渐变
    ------------------------------------------------------
    1   linear-gradient(<angle>, <color-stop>, <color-stop>)
        // 1.1 确定角度: 即某一角度的射线与元素接触的第一个点为起点
            <angle>:
                left: 0deg;
                top : 270deg;
                left top: -45deg;
    2   radial-gradient(position, shape, <color-stop>, <color-stop>)
        // 2.1 确定中心点positon
            (x, y)
            x/y:    left    = 0,
                    center  = 50%,
                    right   = 100%,
                    percentage,
                    length,
        // 2.2 确定形状或大小: <shape> <size> || <shape-size>
            <shape>: 
                circle/ellipse
            <size>:
                closest-side：      指定径向渐变的半径长度为从圆心到离圆心最近的边 
                closest-corner：    指定径向渐变的半径长度为从圆心到离圆心最近的角 
                farthest-side：     指定径向渐变的半径长度为从圆心到离圆心最远的边 
                farthest-corner：   指定径向渐变的半径长度为从圆心到离圆心最远的角 
                contain：           包含，指定径向渐变的半径长度为从圆心到离圆心最近的点。类同于closest-side 
                cover：             覆盖，指定径向渐变的半径长度为从圆心到离圆心最远的点。类同于farthest-corner 
            <shape-size>: [h-length, v-length]
                length: <percentage>/<length>： 

    // 五、背景
    ------------------------------------------------------
	1   background-color:
	2   background-image: 
            url() / 渐变
	3   background-position:
        // 背景图像填充的起点: 以元素左上角为坐标原点
            // (x, y)
            x:  left/center/right/percentage/length
            y:  top/center/bottom/percentage/length
    4   background-size:
        // 背景图像的大小
            auto/cover/contain/percentage/length
	5   background-origin:
        // 设定坐标原点
            content-box/padding-box/border-box
	6   background-clip:
        //指定图像向外裁剪的区域
            content-box/padding-box/border-box/text
            ---------------------------------------
            chrome 支持:
                -webkit-background-clip: text;
                backgrund-clip: border-box;
                //即：对于text，必须带上-webkit-
                      对于其他属性，必须不带-webkit-
            fixefox 支持：
                -webkit-background-clip:text 
                background-clip:text
                background-clip: border-box;
            ---------------------------------------
	7   background-repeat:
        // 背景如何铺排填充
            no-repeat/repeat/repeat-x/repeat-y
	8   background-attachment: 
        // 背景图像是随内容滚动还是固定
            fixed： 背景图像相对于窗体固定。 
            scroll： 背景图像相对于元素固定


    // 八、html/css/js中使用unicode字符
    ------------------------------------------------------
    1 html:
        &# + 10进制的unicode编码 + ;
        如：&#1001;
        &#x + 16进制的unicode编码 + ;
        如：&#x101;
    2 css
        \ + 16进制的unicode编码
        如：\4e00;
    3 js
        \u + 16进制的unicode编码
        如：\u4e00;
----------------------------------------------------------

// 工具类
==========================================================
    序号    名称            说明 
    ------------------------------------------------------
    1       YSlow           网站性能评分工具
    2       https://zygotebody.com/     谷歌人体浏览器
    3       https://tinypng.com/        图片压缩：
----------------------------------------------------------
    

// 插件类
==========================================================
    序号    名称            说明 
    ------------------------------------------------------
    0     zepto.js        与jquery类似，但以移动端为主的js库
    ------------------------------------------------------
    1       滚动条插件   
            // 使用说明
            1、 jquery.mCustomScrollbar.css
            2、 jquery.mCustomScrollbar.min.js
                jquery.mousewheel.min.js 
            3、	对要作用的元素
                3.1 设置max-height/height,
                3.2 使用函数：
                    mCustomScrollbar({theme: "minimal"});
                如：
                    $("elem").mCustomScrollbar({theme: "minimal"});	
            4、滚动条的位置在块的border处，故需要右边的
                margin-right: 10px。
    ------------------------------------------------------
    2       动画插件：
            // 使用说明
            1、animate.min.css
            // 1 Attention Seekers  (吸引搜索者)
                flash               // 闪烁

                rubberBand          // 橡皮筋(元素被拉伸)

                bounce              // 弹跳(垂直摆动)
                jello               // 凝聚(与bounce相近, 带点角度)
                shake               // 摇头(水平摆动)
                wobble              // 颤抖(与 shake很类似, 幅度更大)
                swing               // 秋千摆(抛物线)

                tada                // 先小, 变大过程中, 摇摆
                pulse               // 先小, 变大; 类型脉搏



            // In: 进入; Out: 离开
            // Down: 向下; Up: 向上; Left: 从左边来; Right: 从右边来
            // 2 Bouncing Entrances (弹跳进入)
                bounceIn
                bounceInDown
                bounceInLeft
                bounceInRight
                bounceInUp

            // 3 Bouncing Exits (弹跳离开)
                bounceOut
                bounceOutDown
                bounceOutLeft
                bounceOutRight
                bounceOutUp

            // 4 Fading Entrances (渐隐进入)
                fadeIn
                fadeInDown
                fadeInDownBig
                fadeInLeft
                fadeInLeftBig
                fadeInRight
                fadeInRightBig
                fadeInUp
                fadeInUpBig

            // 5 Fading Exits (渐隐离开)
                fadeOut
                fadeOutDown
                fadeOutDownBig
                fadeOutLeft
                fadeOutLeftBig
                fadeOutRight
                fadeOutRightBig
                fadeOutUp
                fadeOutUpBig

            // 6 Flippers   (翻滚)
                flip
                flipInX
                flipInY
                flipOutX
                flipOutY

            // 7 Lightspeed (光速)
                lightSpeedIn
                lightSpeedOut

            // 8 Rotating Entrances (旋转进入)
                rotateIn
                rotateInDownLeft
                rotateInDownRight
                rotateInUpLeft
                rotateInUpRight

            // 10 Rotating Exits    (旋转离开)
                rotateOut
                rotateOutDownLeft
                rotateOutDownRight
                rotateOutUpLeft
                rotateOutUpRight

            // 11 Sliding Entrances (滑动进入)
                slideInUp
                slideInDown
                slideInLeft
                slideInRight

            // 12 Sliding Exits     (滑动离开)
                slideOutUp
                slideOutDown
                slideOutLeft
                slideOutRight
                                
            // 13 Zoom Entrances    (缩放进入)
                zoomIn
                zoomInDown
                zoomInLeft
                zoomInRight
                zoomInUp
                                
            // 14 Zoom Exits        (缩放离开)
                zoomOut
                zoomOutDown
                zoomOutLeft
                zoomOutRight
                zoomOutUp

            // 15 Specials          (特殊)
                hinge               // 铰链, 挂着
                jackInTheBox
                rollIn              // 滚进来
                rollOut             // 滚出去
    ------------------------------------------------------
    3       日期插件：My97DatePicker
            // 使用说明
            WdatePicker({
                /* 显示
                 * 0、当前获取焦点的元素
                 * 1、通过元素onclick触发       el: 'element_id'
                 * 2、直接显示在页面上          eCont: 'element_id'
                 */ 
                
                /* 显示面板
                 * ----------------------------------------------
                 * 1  星期              isShowWeek: true
                 * ----------------------------------------------
                 * 2  清空按钮          isShowClear
                 * ----------------------------------------------
                 * 3  今天按钮          isShowToday
                 * ----------------------------------------------
                 * 4    数据            按照 dateFmt: '' 格式显示
                 * ----------------------------------------------
                 * 5    双月历          doubleCalendar: true
                 * ----------------------------------------------
                 */

                /* 显示位置
                 * position:{left: 100, top: 50},
                 */ 

                /* 取值范围
                 * ----------------------------------------------
                 * 1    起始日期        startDate: '1980-05-01'
                 *                      alwaysUserStartDate: true
                 * ----------------------------------------------
                 * 2    最小日期        minDate: '1980-05-01'
                        获取：  %y      当年
                                %M      当前月
                                %d      当前日
                                %ld     本月最后一天
                                %H      当前月
                                %m      当前月
                                %s      当前月
                                {}      运算表达式
                                #F{}    {}之间是函数, 可写自定义JS代码
                 * ----------------------------------------------
                 * 3    最大日期        maxDate: '1980-05-01'
                 * ----------------------------------------------
                 * 4    无效天          disabledDays: [6]   周一到周天
                 * ----------------------------------------------
                 * 5    无效日期        disabledDates: [^6]  
                 * ----------------------------------------------
                 * 6    时分秒的步进    hmsMenuCfg: {H:[1, 6], m:[15, 6], s:[30, 2]}
                 * ----------------------------------------------
                 */
                dateFmt: "yy-MM-dd HH:mm:ss",
                hmsMenuCfg:{H:[1,6],m:[5,6],s:[30,2]},

                /* 获取外面信息的途径
                 *  $dp.$()  == document.getElementById()
                 */

                /* 改变日期值
                 *  $dp.$D(id, arg), 对日期进行差值增量   arg = {H:, m:, s:}
                 */

                /* 获取内部信息
                 *  $dp.cal     指向日期控件对象
                 * ----------------------------------------------
                 * 1    $dp.cal.getP()              获取单属性
                        $dp.cal.getNewP()
                 * ----------------------------------------------
                 * 2    $dp.cal.getDateStr()        获取整个值
                        $dp.cal.getNewDateStr()
                 * ----------------------------------------------
                   3    $dp.cal.date                获取日期对象
                        $dp.cal.newdate
                 * ----------------------------------------------
                 * 
                 */
    ------------------------------------------------------
    4       省市区插件：
            // 使用说明
            1、city.min.js
            2、jquery.cityselect.js
    ------------------------------------------------------
    5       图表插件：
            // highchart 
            // echarts
    ------------------------------------------------------
    6       表盘插件：
            // panel 
            // justage      
    ------------------------------------------------------
    7       cookie插件
            // 使用说明
            1、jquery.cookie.min.js
    ------------------------------------------------------
    8       复制到剪切板插件       
            // Clip: 需要adobe Flash
            1、jquery.zclip.js
    ------------------------------------------------------
    9       当窗口滚动到某元素时触发
            // Waypoints is the easiest way to trigger 
            // a function when you scroll to an element. 
            1、jquery.waypoints.min.js
              var waypoint = new Waypoint({
                  element: document.getElementById('waypoint'),
                  handler: function(direction) {
                      console.log('Scrolled to waypoint!')
                  }
              })
    ------------------------------------------------------
    10      jQuery UI插件
            // jquery.ui.widget.js
    ------------------------------------------------------
    11      打印机效果插件
            // jQuery.typewriter.js
    ------------------------------------------------------
    12      上传文件插件
            // jQuery.iframe-Transport.js
            // jquery.fileupload.js
    ------------------------------------------------------
    13      商品从点击出以抛物线的动画相似加入购物车
            // jquery.fly.min.js
    ------------------------------------------------------
    14      轮播滑动插件
            // jquery.flexslider-min.js
    ------------------------------------------------------
    15      数字动画插件
            // jquery.countup.min.js
    ------------------------------------------------------
    16      滚动插件
            // scroll.js
    ------------------------------------------------------
    17      移动端触摸滚动插件
            // mobiscroll
    ------------------------------------------------------


// 多媒体标签的差异
==========================================================
// 多媒体标签有:
----------------------------------------------------------
    1   <embed src="" type=""/>
    ------------------------------------------------------
    2   <object data="" type="">
            <param name="" value="">
        </object>
    ------------------------------------------------------
    3   <video src=""></video>
    ------------------------------------------------------
    4   <audio src=""></audio>
    ------------------------------------------------------

// 差异点
----------------------------------------------------------
    序号    差异点              embed   object  video   audio
    ------------------------------------------------------
    1   是否使用插件打开        √       √       ×       ×
    2   打开的内容类型          多种    多种    视频    音频

    // embed/object的差异
    1   embed 是由 Netscape 提出的, 
            // 根据嵌入内容类型的不同而         来调用不同的插件
    2   object 是由 Microsoft 提出的, 最初only for IE, 后来得到
        W3C的认可, 并被各大浏览器支持.
            // 其是根据: type=""(前期根据clsid) 来调用不同的插件
----------------------------------------------------------

// 总结
----------------------------------------------------------
1   如果要嵌入除音视频之外的内容, 必须用object或embed中的一个
2   如果要嵌入音视频, 下面是兼容所有的浏览器
    <video width="320" height="240" controls="controls">
        <source src="movie.mp4" type="video/mp4" />
        <source src="movie.ogg" type="video/ogg" />
        <source src="movie.webm" type="video/webm" />
        <object data="movie.mp4" width="320" height="240">
            <embed src="movie.swf" width="320" height="240" />
        </object>
    </video>
----------------------------------------------------------


// 16-10-09 08:37:34 
    1 水平居中有2中方式
        a、块 ：position: static/relative:  margin: auto
                          absolute:  top: 0; bottom: 0; left: 0; right: 0; margin: auto;
        b、inline 和 inline-block : 父元素text-align: center;

    2、垂直居中有两种方式：
        2.1 inline: vertical-align: middle;
        2.2 line-height = height 
        2.3 padding: 上下一致


// 16-10-16 09:40:19 
    text-align:     作用于外，外框中 文本 的对齐方式
    vertical-align: 作用于内，内联元素 在 外框中的垂直对齐方式。

// 16-09-28 00:03:08 
    button 与 a作为按钮的区别
    button: 文字自动对中(上下和左右)
            自动添加border
    a: 文字不自动对中

// 16-10-20 15:52:28 
    table th 的作用
    1、td的宽度由对应的th标签的宽度决定。
    2、 <tr>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        假如：a: 确定了第一个th的宽度为100px,
              b: table的总宽度为：500px
              则：剩下两列的宽度为：(500-100)/2
    3、一个table 最好只 允许一行 th 。
        // 如果出现多行th。则第一行的th对宽度起作用。
    4、对某行的tr作用样式，可能在这行中每个td或th上都显示相同的重复样式。
        例如：对tr应用背景图案，则在每一个td上都出现相同的图案。

    // table的宽度
    如果明确指定了宽度，则table-layout: auto 和 fixed没什么区别。

// 16-10-20 17:01:34  
    Content Delivery Network
    内容分发网络CDN

        内容分发网络将网站内容发布到最接近用户的边缘节点，使网民可就近取得所需内容，
    提高网民访问的响应速度和成功率，同时能够保护源站。
        解决由于地域、带宽、运营商接入等问题带来的访问延迟高问题，
    有效帮助站点提升访问速度。

// 16-10-24 12:36:09 
    checkbox已设置为checked--true-但不勾选问题解决方法（只第一次勾选有效）
    // 使用jquery prop() 代替 attr()

//16-10-24 14:58:22 
    360 极速模式 不支持 writing-mode: tb-lr 和 tb-rl :

// 16-10-24 15:13:46 
    media query
    screen and (max-device-aspect-ratio: 10/12);

// 16-10-27 09:01:02 
    #!!p标签中不能放置div标签

// 16-10-27 09:44:38 
    1、checkbox, radio 没有change 事件。
        //通过点击事件，检查其值
    2、change事件对应文本域(text, textarea)和select
    3、select事件对应文本域(text, textarea)

//16-10-27 14:41:06 
    margin 上下合并
    只有普通文档流中垂直相邻的块元素才会发生marign垂直方向的合并。
    #inline-block, float, absolute均会失效。

// 16-11-01 11:10:33 
    // px em rem
        任意浏览器的默认字体高都是16px。
        所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。
        为了简化font-size的换算，需要在css中的body选择器中声明:
            Font-size=62.5%，或者 font-size: 10px;
            这就使em值变为 16px*62.5%=10px, 
        这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。
    #chrome 中最小字体：12px(即使设置的字体低于此值，浏览器也会按照最小字体12px显示的)。

    //EM特点 
    1. em的值并不是固定的；
    2. em会继承父级元素的字体大小。
    // rem
        是CSS3新增的一个相对单位（root em，根em）.
        这个单位与em有什么区别呢？
            区别在于使用rem为元素设定字体大小时，仍然是相对大小，
            但相对的只是HTML根元素。

// 16-11-04 08:47:38 
    只有fixefox 支持 text-decoration的复合写法:
    text-decoration: text-decoration-line || text-decoration-style || text-decoration-color
    例如：text-decoration: line-through solid red;
    //其他浏览器仅仅支持：
        text-decoration: text-decoration-line;
        例如：text-decoration: line-through;

// 16-11-04 09:32:37 
    // background-clip
    chrome 支持:
        -webkit-background-clip: text;
        backgrund-clip: border-box;
        //即：对于text，必须带上-webkit-
              对于其他属性，必须不带-webkit-
    fixefox 支持：
        -webkit-background-clip:text 
        background-clip:text
        background-clip: border-box;

// 16-11-10 10:28:21 
    // transfrom
    所谓变换，就是把对象上 
            每个点的坐标值 
        按照一定的规则 
            变为另一个坐标值
        的过程。
    transform: matrix(a, b, c, d, e, f)
    例如：对于对象上某一点(x, y), 其新坐标为(x1, y1):
        a   c   e       x       ax+cy+e         x1
        b   d   f   *   y   =   bx+dy+f <==>    y1 
        0   0   1       1       0 +0 +1         1
    特例：
    1、当a=1, b=0, c=0, d=1时
        x1 = x+e,
        y1 = y+f,
        相当于translate(e,f)
    2、当a=2, b=0, c=0, d=2, e=0, f=0时
        x1 = 2x,
        y1 = 2y,
        相当于scale(2)

// 16-12-05 11:19:17 拖动事件
    按一般的理解：鼠标移动才叫拖动，
    但有时，即使人没有移动鼠标，由于震动等原因，浏览器会自动判断鼠标在移动了。
    解决方案：判断鼠标移动的位置。大于某一个小数值，才叫 “真移动”.

// 16-12-05 11:29:11 正则表达式
    1、当使用正则构造函数新建一个正则实例时，构造函数会先对字符串转义一次,如：
    var reg = new RegExp("\d+");
    字符串"\d+"被传入后，实际变成"d+",
    即：reg = /d+/;
    2、[.] == [\.], 即：及时在中括号里面，"\"也是转义的
    3、     RegExp 构造函数 
                    ↓
                RegExp 实例 → 字符串
        3.1 当一个regexp 实例作用于一个字符串时，如果带有g标志，
            则下一次查找从上一次查找到的字符串的下一个位置开始,
        // 如果找到字符串，返回带有index和input属性的数组。
        // index: 找到的字符串在原字符串中的位置。
        // input: 正则的字面量表示。
        // 数组的第一项是与整个正则表达式匹配的字符串。
        // 以后的每一个项是与铺货组匹配的字符串(如果有的话)
        3.2 每一个regexp实例的行为反应到实例中的lastIndex: 下一次查找的起点
        3.3 同时每一个regexp实例的行为都会反应到RegExp的静态属性中：
        ---------------------------------------------------------------
            长属性名        说明
        ---------------------------------------------------------------
            input           最近一次要匹配的字符串
            lastMatch       最近一次的匹配项
            lastParen       最近一次的捕获组
            leftContext     input字符串中lastMatch之前的文本
            rightContext    input字符串中lastMatch之后的文本

// 16-12-12 16:00:10
	1、右键选择
        -webkit-user-select: none;
        #极大地降低chrome浏览器性能
        -moz-user-select: none;
        #对firefox影响不大
    2、记录版本之间的变化 往往比 记录变化的结果 更有效!
    3、网页显示流程：
        3.1 把html解析为dom树
        3.2 把css解析为cssom
        3.3 把 dom树和cssom 合成 渲染树
        3.4 生成布局(layout), 即: 将渲染树进行平面合成。(flow)
        3.5 绘制(painter)
        // 前面3步往往很快，一般卡在第四步。
        // "生成布局"(flow)和"绘制"(paint)这两步，合称为"渲染"(render)
        // 重排 必然 重绘；
        导致重排(reflow)的操作(即：导致布局发生变化的操作)
        a. 修改dom
        b. 改变元素的位置。
        // 仅仅导致重绘的操作(即：不影响布局)
        a. 改变元素的颜色

        总结：提高网页的性能，就是要减少重排(reflow)和重绘(repainter)的频率和成本
            // 尤其是重排(重排比重绘花费的时间要多很多)
        一、降低频率
            1、尽可能的把多个操作集中处理，然后一次执行，避免多次渲染(render)
                例如：
                    div.style.color = 'blue';
                    div.style.marginTop = '30px';
                    // 上面代码中，div元素有两个样式变动，但是浏览器只会触发一次重排和重绘。

                    div.style.color = 'blue';
                    var margin = parseInt(div.style.marginTop);
                    div.style.marginTop = (margin + 10) + 'px';
                    // 上面代码对div元素设置背景色以后，
                    // 第二行要求浏览器给出该元素的位置，所以浏览器不得不立即重排。

            // 一般来说，样式的写操作之后，
            // 如果有下面这些属性的读操作，都会引发浏览器立即重新渲染。
                offsetTop/offsetLeft/offsetWidth/offsetHeight
                scrollTop/scrollLeft/scrollWidth/scrollHeight
                clientTop/clientLeft/clientWidth/clientHeight
                getComputedStyle()

            // 所以，从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里面。
                // bad
                div.style.left = div.offsetLeft + 10 + "px";
                div.style.top = div.offsetTop + 10 + "px";

                // good
                var left = div.offsetLeft;
                var top  = div.offsetTop;
                div.style.left = left + 10 + "px";
                div.style.top = top + 10 + "px";

            #一般的规则是：
                // 样式表越简单，重排和重绘就越快。
                // 重排和重绘的DOM元素层级越高，成本就越高。
                // table元素的重排和重绘成本，要高于div元素

            #提高性能的技巧
                1、不要一条条地改变样式，
                    而要通过改变class，或者cssText属性，
                    一次性地改变样式
                2、尽量操作离线DOM(临时从文档中移除去),
                3、克隆DOM,
                4、隐藏DOM(临时display: none)，
                
                然后再用这些DOM替换原始节点 或 显示等。
        二、降低成本
            1、 重排和重绘的DOM元素层级越高，成本就越高。
                table元素的重排和重绘成本，要高于div元素
            2、 innerHTML的成本 要稍低于 原始dom操作
                (注意：在dom数比较大的时候成本同样很高)
            3、在某个element元素的内容发生变化时，
                如果只有少量的dom发生操作，
                #操作单个dom的成本要远低于内容替换(innerHTML)


// 16-12-28 14:51:23 
    1、如果border: 5px solid; 未设置颜色，则：
        其border颜色由其color颜色决定
    2、列表前面的图像颜色由 li的color 决定,
                 图像大小由 li的font-size决定。
    3、text-decoration的颜色在除firefox之外的浏览器中由color决定

// 17-01-18 09:48:28 
    一个块元素，
    1、使用overflow: hidden, 起遮罩效果时，
        内部元素在其 content和padding上都可见
    2、不管背景图片或颜色的源点:background-origin: 
        背景在右下角的padding, border都可见。
    3、当内部元素使用 position: absolute; bottom: 0;与父元素对齐时。
        以父元素的border为界

// 17-01-19 17:22:09 
    当元素为fixed 或 absolute 时，
    如果left: 0;right: 0; 相当于width: 100%;

    类型        margin-left         margin-right
    -----------------------------------------------
    宽度确定    改变位置            不起作用
    宽度未定    改变长度            改变长度

// 17-03-09 10:54:30 
    pseudo-element 分类
    ---------------------------------------------
    1   a               link
                        visited
    ---------------------------------------------
    2   表单元素        enabled
                        disabled
    ---------------------------------------------
    3   radio/checkbox  checked
    ---------------------------------------------
    4   跟鼠标相关      hover
                        foucs
                        active
    ---------------------------------------------
    5   nth-child类     
                        first-child
                        last-child
                        nth-child
                        nth-last-child

                        first-of-type
                        last-of-type
                        nth-of-type
                        nth-last-of-type
    ---------------------------------------------

// 17-03-22 13:45:49 
    常用的MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展
----------------------------------------------------------------------
名称            类型/子类型                     扩展名
----------------------------------------------------------------------
// application
----------------------------------------------------------------------
流媒体          application/octet-stream	    */bin/class/dms/exe/lha/lzh
微软word文件    application/msword	            doc/dot
微软exel文件    application/vnd.ms-excel	    xla/xlc/xlm/xlt/xlw/xl
微软outlook     application/vnd.ms-outlook	    msg
微软ppt         application/vnd.ms-powerpoint	pot/pps/ppt/pp
                application/vnd.ms-project	    mpp
                application/vnd.ms-works	    wcm/wdb/wks/wps/wd
                application/winhlp	            hlp
pdf             application/pdf	                pdf
adobe           application/postscript	        ai/ps/eps
压缩文件        application/x-compress	        z
                application/x-compressed	    tgz
                application/x-gtar	            gtar
                application/x-gzip	            gz
                application/x-tar	            tar
                application/zip	                zip

js              application/x-javascript	    js
dll             application/x-msdownload	    dll
----------------------------------------------------------------------

// audio
----------------------------------------------------------------------
                audio/mpeg	                    mp3
                audio/x-wav	                    wav
----------------------------------------------------------------------

// image
----------------------------------------------------------------------
                image/bmp	                    bmp
                image/gif	                    gif
                image/jpeg	                    jpe/jpeg/jpg
                image/svg+xml	                svg
                image/x-icon	                ico
----------------------------------------------------------------------

// text
----------------------------------------------------------------------
                text/css	                    css
                text/html	                    htm/html/stm
                text/plain	                    bas/c/h/txt
                text/x-component	            htc
                text/x-setext	                etx
----------------------------------------------------------------------

// video
----------------------------------------------------------------------
                video/mpeg	                    mp2/mpa/pme/mpeg/mpv2
                video/quicktime	                mov/qt
                video/x-msvideo	                avi
                video/x-sgi-movie	            movie
----------------------------------------------------------------------

// video
----------------------------------------------------------------------
flash           application/x-shockwave-flash	swf
----------------------------------------------------------------------

// 17-03-21 22:37:12 
    Golden guidelines for writing clean css
    Four simple rules for writing clean css:
    1   Avoid global and element selectors
    2   Omit overly specific selectors
    3   Use semantic class names
    4   Don't tie CSS too closely to markup structure

// chrome fixfoxe 360 的差异
    当字体size, family, letter-spacing, weight相同时：
        字体所占的宽度在chrome与其他的浏览器中不一样

// console 命令详解
    1 显示信息
    -----------------------------------------------------------------
        console.log("")
        console.info("信息")
        console.error("错误")
        console.warn("警告")
    2 格式化
    -----------------------------------------------------------------
        %d, %f, %s, %o(对象)
        console.log("%d年%d月%d日", 2015, 5, 5)
    3 信息分组
    -----------------------------------------------------------------
        console.group("我是分组名称")
            console.log("我是分组第一条")
            console.log("我是分组第二条")
        console.groupEnd()
    4 查看对象信息
    -----------------------------------------------------------------
        console.dir()
    5 显示某个节点的outHTML
    -----------------------------------------------------------------
        console.dirxml()
    6 判断是否为真
    -----------------------------------------------------------------
        console.assert( a == 1)
    7 追踪函数的调用轨迹
    -----------------------------------------------------------------
        // 在函数内容 调用 console.trace()
        function fun(){
            console.trace();
        }
    8 计时功能
    -----------------------------------------------------------------
        console.time("名称")
        ...
        ...
        ...
        console.timeEnd("名称")
    9 性能分析
    -----------------------------------------------------------------
        // 找出程序各个部分的运行时间
        console.profile("名称")
        fun1();
        fun2();
        fun3();
        fun4();
        console.profileEnd()

// 17-05-17 14:24:36 
    // js中的类数组对象
    1 arguments
    2 NodeList

// 17-05-20 21:40:39 焦点相关
    1 document.activeElement        // 获得焦点元素(只读)
    2 document.hasFocus()           // 用于确定文档是否获得焦点

    3 scrollIntoView()              // 让元素处于窗口中
    4 focus()                       // 让某元素获得焦点, 并让元素处于窗口中
    // 目前 focus 仅适用于可见的表单元素,
    // 对于其他元素, 可设置一个 width: 0; height: 0; border: 0; overflow的表单元素跟随
    // 在移动端会弹出软键盘
    5 使用瞄点 #a
        // vue-router使用hash来控制路由(与这个冲突)

// 17-05-20 21:45:20  元素位置和大小
    // 位置
    1 相对父元素
        offsetLeft, offsetTop
    2 相对根元素
        offset 一层一层叠加

    // 大小
    1 offsetWidth
    2 clinetWidth
    3 scrollWidth

    getBoundingClientRect()
    // 返回一个矩形对象, 包括top, left, right, bottom 四个属性
    // 它们是相对于视口的位置
    // offsetWidth = right - left
    // left 相当于 offset 一层层叠加

// 17-05-20 22:21:06 滚动
    1 每个元素的scrollLeft, scrollTop 既是可读，也是可写
    2 最外层是 window.scrollTo(x, y)
        以及: document.documentElement.scrollTop / scrollLeft

    3 最外层的scroll事件是在window上触发的, 但通过document.documentElement.scrollTop
        来获取值(而不是通过事件对象e)

// 17-05-21 18:09:31 隐藏一个元素的方法
    1 display: none
    2 visibility: hidden;
    3 opacity: 0;
    4 width: 0; height: 0; overflow: hidden;

    // 注，以上4中情况均可点击

// 图形技术
    序号    名称    类型    浏览器支持情况
    1       vml     矢量    ie6/7/8/9
    2       svg     矢量    ie9+

    3       canvas  位图    ie9+
            webGL 是嵌入到canvas中工作的

// 17-08-20 12:12:09  CSS3 新特性
     网页中一些特殊的对象
     http://www.zhangxinxu.com/wordpress/2013/06/%E4%BC%AA%E5%85%83%E7%B4%A0-%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F-pseudo-elements-style-form-controls/
    1   // placehodler
    ------------------------------------------------
        input::          -moz-placehodler { }
        input::     -ms-input-placehodler { }
        input:: -webkit-input-placehodler { }

    2   scrollbar
    ------------------------------------------------
        // 滚动条
        // chrome滚动条是以伪对象的方式使用
        .test::-webkit-scrollbar{
            // 基础
            background-color: transparent;
            width: 5px;
        }
        .test::-webkit-scrollbar-track{
            // 轨道
            background-color:#eee;
            border-radius: 5px;
        }
        .test::-webkit-scrollbar-thumb{
            // 滑块
            background-color:#00aff0;
            border-radius: 5px;
        }
        .test::-webkit-scrollbar-thumb:hover {
            // 鼠标移动到滑块时
            background-color:#9c3;
        }
        .test::-webkit-scrollbar-thumb:active {
            // 鼠标拖动滑块时
            background-color:red;
        }

    3   // 表单，下拉箭头
    ------------------------------------------------
        3.1 select
            // 在非IE中，通过appearance: none; 解决.
            // 在IE10及以上，::-ms-expand{ display: none; }

    // css3 新特效
    ================================================
    1   // 遮罩(IE, Edge都不支持;)
    ------------------------------------------------
        mask: 与background相似,
        但在元素上面, bg在元素下面
        // Rule
        只有mask不透明度不为0的地方, 才可以显示内容

    2   // appearance(IE都不支持, Edge开始支持)
    ------------------------------------------------
        // 清除浏览器默认样式(如: select)
                appearance: none;
           -moz-appearance: none;  
        -webkit-appearance: none; 

    // Layout: 布局
    3   // column 多栏 排版(IE10+, 所有浏览器都只支持部分属性)
    ------------------------------------------------
        column-width;               // 列宽(无用)
        column-gap;                 // 列间隙
        column-count:               // 列数
        column-rule:                // 列之间的边
        column-span:                // 在子元素上使用, "all", none, 跨列
        column-fill:                // 统一列高: auto, balance

        columns:                    // 复合属性

    
    4   // box 模型(是flex的实验版, IE10+)
    ------------------------------------------------
    5   // flex 模型(IE10+, -ms-)
    ------------------------------------------------
        .box {
            display: flex;
        }
        // 子元素的float, clear, vertical-align将失效

    6   // grid 布局(网格线布局, IE11+(部分支持), UC不支持, 
    ------------------------------------------------
        // experimental Web Platform features" flag in chrome://flags)
        display: grid;

    7   // ps中的混合模式(ie, Edge都不支持; firefox, chrome支持)
    ------------------------------------------------
        mix-blend-mode:     // 目前支持度不好
        background-blend-mode:  //背景图片以及背景色的混合
        // 取值
            normal;         // 正常
            multiply;       // 正片叠底
            screen;         // 滤色
            overlay;        // 叠加
            darken;         // 变暗
            lighten;        // 变亮
            color-dodge;    // 颜色减淡
            color-burn;     // 颜色加深
            hard-light;     // 强光
            soft-light;     // 柔光
            difference;     // 差值
            exclusion;      // 排除
            hue;            // 色相
            saturation;     // 饱和度
            color;          // 颜色
            luminosity;     // 亮度
            initial;        // 默认
            inherit;        // 继承
            unset;          // 还原

// 17-09-21 20:33:10 
    // IE6 适配
    1 select 高度无法变动
    2 不支持属性选择符
    3 不支持关系选择符(除包含选择符)
    4 不支持复合属性
    5 不支持box-sizing

    // 颜色
    6 不支持opacity
    7 不支持 rgba

    // 表单
    8 label 不能唤起 type="file"

    // 高度
    9 元素高度无法减小到小于字体高度的值，(可以设置font-size: 或 Line-height)

    // 列表
    10 列表前面的标识的位置与li的行高有关

    // 宽度
    11 即使是正常的块元素，也显示地指明width: 100%; 这样position: absolute的元素的位置才正确.

    // 好像下面的信息对 float; inline-block 有影响
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;

    5 text-align: center;
    // 定位
    不支持 position: fixed

    // 尺寸
    元素如果不设置overflow: hidden, 则：尽管设置了具体的width,
    实际宽度任然受到内容子元素的影响

    // 浮动
    如果浮动元素不是第一个子元素，浮动不起作用

    // 边框
    border: none; 与 border: 0; 效果不一样

    // select遮挡div的bug，
    这个bug表现为页面有浮动元素（某个div元素）在select上面时，
    在IE6里面select总是显示在这个浮动元素上方，该元素z-index的值多大都没有作用。

    解决的思路是：
        IE6中iframe可以覆盖select，而div可以覆盖iframe，
        所以解决办法就是使用iframe元素包裹或者覆盖select元素或浮动元素，
        或者在select元素或浮动元素添加一个Iframe作为子元素。

    // iframe(ie6, 7, 8)
    默认背景为白色，而且ie6下无法设置背景色

    // label
    必须为label设置for属性

    // 双倍浮动

    // IE6崩溃的原因(css)
    ==========================================================================================
    1  含有step3,               step4, step1都可以
    2  float 嵌套
    3   双倍浮动


// 17-11-02 15:40:47 
    当设置 writing-mode: tb-rl: 时,
        line-height: 
        text-align: 
        text-indent:
        方向将旋转

// 17-11-21 12:25:23 
    当子元素width: 100%时, 所获得宽度因自身的属性不同而不同
    1 position: relative; static(包括float),
        = 父元素的实际宽度(不包括内补白)
    2 position: absolute; fixed
        = 父元素实际宽度 + 内补白

// 17-11-27 14:51:31 
    通过伪类设置 unicode字符 与 用html标签展现不一致

// 17-12-24 22:01:50 
    user-select: none; // 禁止用户选择

// 17-11-30 13:23:24 
    ES2015新特性
    =======================================================
    1 let, const
    2 class, extends,
    3 template string ``
    4 destructuring
    // 函数
    5 arrow function
    6 default, rest

// 17-12-22 10:52:07 
    ul 和 滚动条的位置
    1 ul:
        outside: 在padding-left中
    2 滚动条(width = 16px):
        在padding-right中

    // 继承父元素的宽度和高度
    absolute:100%; 包含 padding
    // absolute: 
    right: 0, 指padding-right的边界

// 18-01-02 15:41:55 
    HTML提供了5种空格实体（space entity），它们拥有不同的宽度.
    非断行空格（&nbsp;）是常规空格的宽度，可运行于所有主流浏览器。
    其他几种空格（ &ensp; &emsp; &thinsp; &zwnj;&zwj;）在不同浏览器中宽度各异。
 
    1 &nbsp;        
        它叫不换行空格，全称No-Break Space，
        它是最常见和我们使用最多的空格，大多数的人可能只接触了&nbsp;，它是按下space键产生的空格。
        在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。
        要使用html实体表示才可累加，该空格占据宽度受字体影响明显而强烈。
     
    2 &ensp;        
        它叫“半角空格”，全称是En Space，
        en是字体排印学的计量单位，为em宽度的一半。
        根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。
        此空格传承空格家族一贯的特性：透明的，此空格有个相当稳健的特性:
            就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。
     
    3 &emsp;        
        它叫“全角空格”，全称是Em Space，
        em是字体排印学的计量单位，相当于当前指定的点数。
            例如，1em在16px的字体中就是16px。
        此空格也传承空格家族一贯的特性：透明的，此空格也有个相当稳健的特性:
            就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。
     
    4 &thinsp;        
        它叫窄空格，全称是Thin Space。
        我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。
        它是em之六分之一宽。
     
    5 &zwnj; 
        它叫零宽不连字，全称是Zero Width Non Joiner，简称“ZWNJ”，
    是一个不打印字符，放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。
        Unicode中的零宽不连字字符映射为“”（zero width non-joiner，U+200C），HTML字符值引用为： &#8204;
     
    6 &zwj;
        它叫零宽连字，全称是Zero Width Joiner，简称“ZWJ”，
        是一个不打印字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，
    使得这两个本不会发生连字的字符产生了连字效果。
        零宽连字符的Unicode码位是U+200D (HTML: &#8205; &zwj;）。
     
    此外，浏览器还会把以下字符当作空白进行解析：
        空格（&#x0020;）、
        制表位（&#x0009;）、
        换行（&#x000A;）,
        回车（&#x000D;）
        （&#12288;）等等。

// 18-01-03 17:32:14 框架选择
    1 如果一个页面A 中有一个内联框架iframe, 指向B:
        则: 1.1 在页面A中的代码 可以通过frames[0] 获得页面B的 window对象, 
                #但此window对象的大部分功能无法使用
            1.2 在页面B中的代码 可以通过window.parent 获取页面A的 window对象,
                #且此window对象可以正常使用


// 18-01-03 18:04:32 跨文档传递消息(cross-document messaging):XDM
    // 也叫: web message
    window.postMessage(msg, domain)

    // 接受消息时
    window.onmessage = function(e){
        // e = { data: "", origin: 发送消息的文档所在的域, source: 发送消息的域的window代理 }
    };


// 18-02-13 14:59:10 搜狗浏览器(版本号: 7.5.8.27113)
    // 自动回填表单 存在下面2个 bug
    1 只要页面上有 <input type="password" /> 和 一个 <input type="text" />,
        搜狗就认定是登录页面, 要执行表单自动回填

    2 当增加的页面内容上含有 button 按钮时(input,type="submit" 和 img 还没验证), 如:
        var div = document.createElement("div"),
            div.innerHTML = "<button>aa</button>";
            document.body.appendChild(div);

        会引起表单自动回填
        (即使是 <button type="button">aa</button> )


// 18-03-08 09:25:40 剪贴板对象
    1 拖动时, e.dataTransfer
        // 从IE5开始支持
        getData("text"),
        setData("text")
        files

    2 copy,paste: 复制和粘贴 事件时, e.clipboardData
      (IE: window.clipboardData)


// 18-03-08 09:35:16 浏览器选择了文本
    IE9以下支持：document.selection 
        document.selection.createRange().text;

    IE9、Firefox、Safari、Chrome和Opera支持：window.getSelection()
        document.getSelection().toString() 


// 如何确定一个元素的text-baseline: 文字基准线
    0 一个 overflow: hidden/auto: 的块级或块级内联元素, 其baseline是其底部

    1 取元素最后一行
    2 此行中所有
        非float, 非absolute, 非fixed, 
        vertical-align: baseline的直接子元素(包括所有text类型, 所有内联和块级元素)
        baseline线水平排列成一条线, 就是此元素的baseline

        // 奇怪吗？块级元素和内联块级 可以再同一水平线上？
        // 哈哈~~, 有这种可能性: 只包含一个块级元素。


// Document.visibilityState: 文档的可见性: 只读属性
    页面是在背后, 或是不可见的隐藏的标签页
    1 'visible' : 
        此时页面内容至少是部分可见. 即此页面在前景标签页中，
        并且窗口没有最小化.
    2 'hidden' : 
        此时页面对用户不可见. 即文档处于背景标签页或者窗口处于最小化状态，
        或者操作系统正处于 '锁屏状态' 

    // 此属性的值改变时, 会递交 visibilitychange 事件给Document.
    

// 18-03-24 15:08:46 
    H5的项目，发现页面元素为一串数字时，评估手机会默认显示成蓝色字体

    解决此问题的方法很简单，在head标签中添加下面的meta标记即可解决。
    <meta name="format-detection" content="telephone=no">

// 18-04-03 14:28:44 
    js表达式
    a = b + 1,   这个表达式返回a的值
    b + 1,       这个表达式返回b+1的值

    // 用逗号分隔的表达式序列, 返回最后一个表达式的值
    (表达式1, 表达式2, 表达式3),   返回表达式3的值

    // 表达式中不允许出现 var
    

